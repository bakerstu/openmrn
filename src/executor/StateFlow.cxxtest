#include "utils/test_main.hxx"

#include <stdint.h>
#include <list>

#include "executor/StateFlow.hxx"

class StateFlowTest : public testing::Test
{
public:
    StateFlowTest()
    {
    }
    ~StateFlowTest()
    {
        wait();
    }

protected:
    SyncNotifiable done_notifier_;

    void wait()
    {
        wait_for_main_executor();
    }
};

class TrivialFlow : public StateFlowBase
{
public:
    TrivialFlow(Service *s)
        : StateFlowBase(s)
    {
    }
};

TEST_F(StateFlowTest, CreateDestroyBase)
{
    TrivialFlow f(&g_service);
}

class SimpleTestFlow : public StateFlowBase
{
public:
    SimpleTestFlow()
        : StateFlowBase(&g_service)
    {
    }

    void DoSomethingSimple(int foo, int *bar)
    {
        foo_ = foo;
        bar_ = bar;
        start_flow(STATE(CopyData));
    }

private:
    Action CopyData()
    {
        *bar_ = foo_;
        return exit();
    }

    int foo_;
    int *bar_;
};

TEST_F(StateFlowTest, NotifyEmptyFlow)
{
    TrivialFlow f(&g_service);
    f.notify();
    wait();
}

TEST_F(StateFlowTest, SimpleFlow)
{
    int a = 5, b = 0;
    SimpleTestFlow f;
    f.DoSomethingSimple(a, &b);
    wait();
    EXPECT_EQ(5, b);
}

struct Id
{
    typedef uint32_t id_type;
    uint32_t id_;
    id_type id()
    {
        return id_;
    }
};

class QueueTestFlow : public StateFlow<Buffer<Id>, QList<3>>
{
public:
    QueueTestFlow(vector<uint32_t> *seen_ids)
        : StateFlow(&g_service)
        , seenIds_(seen_ids)
    {
    }

protected:
    virtual Action entry()
    {
        seenIds_->push_back(message()->data()->id_);
        return release_and_exit();
    }

private:
    vector<uint32_t> *seenIds_;
};

DynamicPool g_message_pool(Bucket::init(4, 8, 16, 32, 0));

class QueueTest : public StateFlowTest
{
public:
    QueueTest()
        : flow_(&seenIds_)
    {
    }

protected:
    vector<uint32_t> seenIds_;
    QueueTestFlow flow_;
};

TEST_F(QueueTest, Nothing)
{
    wait();
    EXPECT_TRUE(seenIds_.empty());
}

TEST_F(QueueTest, OneItem)
{
    Buffer<Id> *first;
    g_message_pool.alloc(&first);
    first->data()->id_ = 42;
    wait();
    EXPECT_TRUE(seenIds_.empty());
    flow_.send(first);
    wait();
    ASSERT_EQ(1U, seenIds_.size());
    EXPECT_EQ(42U, seenIds_[0]);
}

TEST_F(QueueTest, ThreeItems)
{
    Buffer<Id> *first;
    g_message_pool.alloc(&first);
    first->data()->id_ = 42;
    EXPECT_TRUE(seenIds_.empty());

    flow_.send(first);
    wait();
    ASSERT_EQ(1U, seenIds_.size());
    EXPECT_EQ(42U, seenIds_[0]);

    Buffer<Id> *second;
    g_message_pool.alloc(&second);
    second->data()->id_ = 43;
    flow_.send(second);

    Buffer<Id> *third;
    g_message_pool.alloc(&third);
    third->data()->id_ = 44;
    flow_.send(third);
    wait();
    ASSERT_EQ(3U, seenIds_.size());
    EXPECT_EQ(42U, seenIds_[0]);
    EXPECT_EQ(43U, seenIds_[1]);
    EXPECT_EQ(44U, seenIds_[2]);
}

/// @Todo(balazs.racz): figure out why this does not work.
TEST_F(QueueTest, DISABLED_Priorities)
{
    Buffer<Id> *m[3];
    g_message_pool.alloc(m + 0);
    g_message_pool.alloc(m + 1);
    g_message_pool.alloc(m + 2);
    m[0]->data()->id_ = 42;
    m[1]->data()->id_ = 43;
    m[2]->data()->id_ = 44;
    // We block the executor before sending off the messages to avoid this test
    // being flakey on multi-core processors.
    BlockExecutor b;
    g_executor.add(&b, 0);
    b.wait_for_blocked();

    flow_.send(m[0]);
    flow_.send(m[1], 1);
    flow_.send(m[2], 0);
    b.release_block();

    wait();
    // The order of the arrived messages should be reversed.
    ASSERT_EQ(3U, seenIds_.size());
    EXPECT_EQ(44U, seenIds_[0]);
    EXPECT_EQ(43U, seenIds_[1]);
    EXPECT_EQ(42U, seenIds_[2]);
}

/*TEST_F(StateFlowTest, CallDone) {
  SimpleTestFlow f(&done_notifier_);
  int a = 5, b = 0;
  f.DoSomethingSimple(a, &b);
  done_notifier_.WaitForNotification();
  EXPECT_EQ(5, b);
  EXPECT_TRUE(f.IsDone());
  }*/

/*
class SleeperFlow : public StateFlow {
public:
  explicit SleeperFlow(Notifiable* done)
    : StateFlow(&global_executor, done), r_(NULL) {}

  void SleepOnce(bool* r) {
    r_ = r;
    StartFlowAt((MemberFunction)&SleeperFlow::MSleepOnce);
  }

  void SleepNTimes(int n) {
    count_ = n;
    StartFlowAt((MemberFunction)&SleeperFlow::MSleepCount);
  }

  void ReptSleepNTimes(int n) {
    count_ = n;
    WakeUpRepeatedly(&sleep_data_, MSEC_TO_NSEC(3));
    StartFlowAt(STATE(StartReptSleep));
  }

private:
  bool* r_;
  StateFlowAction MSleepOnce() {
    return Sleep(&sleep_data_, MSEC_TO_NSEC(3),
                 (MemberFunction)&SleeperFlow::MSleepDone);
  }

  StateFlowAction MSleepCount() {
    if (count_--) {
      return Sleep(&sleep_data_, MSEC_TO_NSEC(3),
                   (MemberFunction)&SleeperFlow::MSleepCount);
    } else {
      return call_immediately((MemberFunction)&SleeperFlow::MSleepDone);
    }
  }

  StateFlowAction StartReptSleep() {
    return WaitForTimerWakeUpAndCall(
        &sleep_data_,
        (MemberFunction)&SleeperFlow::MReptSleepCount);
  }

  StateFlowAction MReptSleepCount() {
    if (!--count_) {
      StopTimer(&sleep_data_);
      return call_immediately(STATE(MSleepDone));
    }
    return WaitForNotification();
  }

  StateFlowAction MSleepDone() {
    if (r_) *r_ = true;
    return Exit();
  }

  int count_;
  SleepData sleep_data_;
};

TEST_F(StateFlowTest, SleepOnceTest) {
  SleeperFlow f(&done_notifier_);
  bool r = false;
  f.SleepOnce(&r);
  done_notifier_.WaitForNotification();
  EXPECT_TRUE(r);
  EXPECT_TRUE(f.IsDone());
}

TEST_F(StateFlowTest, SleepNTest) {
  SleeperFlow f(&done_notifier_);
  f.SleepNTimes(3);
  done_notifier_.WaitForNotification();
}

TEST_F(StateFlowTest, SleepReptTest) {
  SleeperFlow f(&done_notifier_);
  f.ReptSleepNTimes(3);
  done_notifier_.WaitForNotification();
}


class SubFlowCaller : public StateFlow {
public:
  explicit SubFlowCaller(Notifiable* done)
    : StateFlow(&global_executor, done) {}

  void RunFlowAndSubFlow(bool *r) {
    r_ = r;
    StartFlowAt(STATE(Start));
  }

private:
  bool* r_;
  SleeperFlow* sleeper_flow_;

  StateFlowAction Start() {
    sleeper_flow_ = new SleeperFlow(this);
    sleeper_flow_->SleepOnce(r_);
    return CallFlow(sleeper_flow_, ST(ChildDone));
  }

  StateFlowAction ChildDone() {
    delete sleeper_flow_;
    return Exit();
  }
};

TEST_F(StateFlowTest, FlowWithChildTest) {
  SubFlowCaller f(&done_notifier_);
  bool r = false;
  f.RunFlowAndSubFlow(&r);
  done_notifier_.WaitForNotification();
  EXPECT_TRUE(r);
}
*/

TEST(StaticStateFlowTest, SizeSmall)
{
#if UINTPTR_MAX == UINT32_MAX
    EXPECT_EQ(4U, sizeof(QMember));
    EXPECT_EQ(104U, sizeof(StateFlow<Buffer<string>, QList<1>>));
#else
    EXPECT_EQ(8U, sizeof(QMember));
    EXPECT_EQ(192U, sizeof(StateFlow<Buffer<string>, QList<1>>));
#endif
}

struct Increment
{
    void reset(int *p, int c)
    {
        ptr = p;
        len = c;
    }
    int *ptr;
    int len;

    BarrierNotifiable done;
};

class IncrementFlow : public StateFlow<Buffer<Increment>, QList<1>>
{
public:
    IncrementFlow()
        : StateFlow<Buffer<Increment>, QList<1>>(&g_service)
    {
    }

    Action entry()
    {
        return sleep_and_call(&timer_, MSEC_TO_NSEC(15), STATE(do_inc));
    }

    Action do_inc()
    {
        *message()->data()->ptr += message()->data()->len;
        return_buffer();
        return exit();
    }

private:
    StateFlowTimer timer_{this};
};

class DriverFlow : public StateFlowBase
{
public:
    DriverFlow(IncrementFlow *child, Notifiable* n)
        : StateFlowBase(&g_service)
        , member_(5)
        , child_(child)
        , done_(n)
    {
        start_flow(STATE(do_a_call));
    }

    Action do_a_call()
    {
        return invoke_subflow_and_wait(child_, STATE(call_done), &member_, 13);
    }

    Action call_done()
    {
        auto* b = full_allocation_result(child_);
        b->unref();
        done_->notify();
        return exit();
    }

    int member_;
    FlowInterface<Buffer<Increment>> *child_;
    Notifiable* done_;
};

TEST(ChildFlowCall, CallOnce) {
    IncrementFlow iflow;
    SyncNotifiable sn;
    BarrierNotifiable bn(&sn);
    DriverFlow df(&iflow, bn.new_child());
    bn.notify();
    sn.wait_for_notification();
    EXPECT_EQ(18, df.member_);
}

TEST(ChildFlowCall, CallMany) {
    IncrementFlow iflow;
    SyncNotifiable sn;
    BarrierNotifiable bn(&sn);
    std::list<DriverFlow> df;
    for (int i = 0; i < 33; ++i) {
        df.emplace_back(&iflow, bn.new_child());
    }
    bn.notify();
    sn.wait_for_notification();
    for (auto& e : df) {
        EXPECT_EQ(18, e.member_);
    }
}


// =========== Tests for asynchronous read/writes. ======

class StateFlowPipeTest : public ::testing::Test
{
protected:
    StateFlowPipeTest()
    {
        int pipefd[2];
        HASSERT(::pipe2(pipefd, O_NONBLOCK) == 0);
        fdRecv_ = pipefd[0];
        fdSend_ = pipefd[1];
    }

    ~StateFlowPipeTest()
    {
        close(fdSend_);
        close(fdRecv_);
    }

    /** Declares a local class (and instance) of a stateflow with two
     * interesting states, and the first state using the code in `body' to
     * perform the return action. */
#define DECL_FLOW(body)                                                        \
    class TestFlow : public StateFlowBase                                      \
    {                                                                          \
    public:                                                                    \
        TestFlow(StateFlowPipeTest *parent)                                    \
            : StateFlowBase(&g_service)                                        \
            , parent_(parent)                                                  \
        {                                                                      \
            start_flow(STATE(test_state));                                     \
        }                                                                      \
        Action test_state()                                                    \
        {                                                                      \
            parent_->bnIn_.notify();                                           \
            LOG_ERROR("in select");                                            \
            body;                                                              \
        }                                                                      \
        Action finished()                                                      \
        {                                                                      \
            LOG_ERROR("select returned");                                      \
            parent_->bnOut_.notify();                                          \
            return exit();                                                     \
        }                                                                      \
                                                                               \
        StateFlowSelectHelper selectHelper_{this};                             \
        StateFlowTimedSelectHelper timedSelectHelper_{this};                   \
        StateFlowPipeTest *parent_;                                            \
    } flow(this)

public:
    int fdSend_;
    int fdRecv_;
    char recvBuf_[100] = {0};
    char sndBuf_[100] = {88, 33, 21, 14, 52, 61, 0};
    SyncNotifiable inTestState_;
    BarrierNotifiable bnIn_{&inTestState_};
    SyncNotifiable outOfTestState_;
    BarrierNotifiable bnOut_{&outOfTestState_};
};

TEST_F(StateFlowPipeTest, TestPipe)
{
    ASSERT_EQ(5, write(fdSend_, sndBuf_, 5));
    ASSERT_EQ(4, read(fdRecv_, recvBuf_, 4));
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 4),
        std::vector<char>(recvBuf_, recvBuf_ + 4));
    // Needed to avoid crashes at destruction.
    bnIn_.notify();
    bnOut_.notify();
}

TEST_F(StateFlowPipeTest, TestReadSingle)
{
    DECL_FLOW(return read_single(&selectHelper_, parent_->fdRecv_,
        parent_->recvBuf_, 5, STATE(finished)));
    inTestState_.wait_for_notification();
    usleep(50000);
    wait_for_main_executor();
    EXPECT_FALSE(bnOut_.is_done());
    ASSERT_EQ(2, write(fdSend_, sndBuf_, 2));
    outOfTestState_.wait_for_notification();
    EXPECT_EQ(3u, flow.selectHelper_.remaining_);
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 2),
        std::vector<char>(recvBuf_, recvBuf_ + 2));
}

TEST_F(StateFlowPipeTest, TestReadRepeated)
{
    DECL_FLOW(return read_repeated(&selectHelper_, parent_->fdRecv_,
        parent_->recvBuf_, 5, STATE(finished)));
    inTestState_.wait_for_notification();
    usleep(50000);
    wait_for_main_executor();
    EXPECT_FALSE(bnOut_.is_done());
    // In the first round we write 2 bytes out of 5
    ASSERT_EQ(2, write(fdSend_, sndBuf_, 2));
    usleep(50000);
    wait_for_main_executor();
    // Still not exited wait
    EXPECT_EQ(3u, flow.selectHelper_.remaining_);
    EXPECT_FALSE(bnOut_.is_done());
    // Write the rest
    ASSERT_EQ(7, write(fdSend_, sndBuf_ + 2, 7));
    outOfTestState_.wait_for_notification();
    EXPECT_EQ(0u, flow.selectHelper_.remaining_);
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 4),
        std::vector<char>(recvBuf_, recvBuf_ + 4));
}

TEST_F(StateFlowPipeTest, TestReadRepeatedWithTimedHelper)
{
    DECL_FLOW(return read_repeated(&timedSelectHelper_, parent_->fdRecv_,
        parent_->recvBuf_, 5, STATE(finished)));
    inTestState_.wait_for_notification();
    usleep(50000);
    wait_for_main_executor();
    EXPECT_FALSE(bnOut_.is_done());
    // In the first round we write 2 bytes out of 5
    ASSERT_EQ(2, write(fdSend_, sndBuf_, 2));
    usleep(50000);
    wait_for_main_executor();
    // Still not exited wait
    EXPECT_EQ(3u, flow.timedSelectHelper_.remaining_);
    EXPECT_FALSE(bnOut_.is_done());
    // Write the rest
    ASSERT_EQ(7, write(fdSend_, sndBuf_ + 2, 7));
    outOfTestState_.wait_for_notification();
    EXPECT_EQ(0u, flow.timedSelectHelper_.remaining_);
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 4),
        std::vector<char>(recvBuf_, recvBuf_ + 4));
}

TEST_F(StateFlowPipeTest, TestReadWithTimeoutLongTimeout)
{
    // If the timeout is long enough we will read all data.
    DECL_FLOW(return read_repeated_with_timeout(&timedSelectHelper_,
        MSEC_TO_NSEC(500), parent_->fdRecv_, parent_->recvBuf_, 5,
        STATE(finished)));
    inTestState_.wait_for_notification();
    usleep(50000);
    wait_for_main_executor();
    EXPECT_FALSE(bnOut_.is_done());
    // In the first round we write 2 bytes out of 5
    ASSERT_EQ(2, write(fdSend_, sndBuf_, 2));
    usleep(50000);
    wait_for_main_executor();
    // Still not exited wait
    EXPECT_EQ(3u, flow.timedSelectHelper_.remaining_);
    EXPECT_FALSE(bnOut_.is_done());
    // Write the rest
    ASSERT_EQ(7, write(fdSend_, sndBuf_ + 2, 7));
    outOfTestState_.wait_for_notification();
    EXPECT_EQ(0u, flow.timedSelectHelper_.remaining_);
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 4),
        std::vector<char>(recvBuf_, recvBuf_ + 4));
}

TEST_F(StateFlowPipeTest, TestReadWithTimeoutShortTimeout)
{
    // If the timeout is shorter we will return partial data.
    DECL_FLOW(
        return read_repeated_with_timeout(&timedSelectHelper_, MSEC_TO_NSEC(70),
            parent_->fdRecv_, parent_->recvBuf_, 5, STATE(finished)));
    long long t_start = OSTime::get_monotonic();
    inTestState_.wait_for_notification();
    wait_for_main_executor();
    EXPECT_FALSE(bnOut_.is_done());
    // In the first round we write 2 bytes out of 5
    ASSERT_EQ(2, write(fdSend_, sndBuf_, 2));
    outOfTestState_.wait_for_notification();
    long long elapsed = OSTime::get_monotonic() - t_start;
    ASSERT_LT(MSEC_TO_NSEC(69), elapsed);
    ASSERT_GT(MSEC_TO_NSEC(500), elapsed);
    EXPECT_TRUE(bnOut_.is_done());
    EXPECT_EQ(3u, flow.timedSelectHelper_.remaining_);
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 2),
        std::vector<char>(recvBuf_, recvBuf_ + 2));
}

TEST_F(StateFlowPipeTest, TestReadWithTimeoutZeroTimeout)
{
    // If the timeout is zero we will return no data.
    DECL_FLOW(return read_repeated_with_timeout(&timedSelectHelper_, 0,
        parent_->fdRecv_, parent_->recvBuf_, 5, STATE(finished)));
    inTestState_.wait_for_notification();
    wait_for_main_executor();
    usleep(50000);
    EXPECT_TRUE(bnOut_.is_done());
    outOfTestState_.wait_for_notification();
    EXPECT_EQ(5u, flow.timedSelectHelper_.remaining_);
}

TEST_F(StateFlowPipeTest, TestReadWithTimeoutZeroTimeoutReadyData)
{
    // If the timeout is zero but there is data in the pipe we will return it.
    ASSERT_EQ(2, write(fdSend_, sndBuf_, 2));
    usleep(50000);
    long long t_start = OSTime::get_monotonic();
    DECL_FLOW(return read_repeated_with_timeout(&timedSelectHelper_, 0,
        parent_->fdRecv_, parent_->recvBuf_, 5, STATE(finished)));
    inTestState_.wait_for_notification();
    outOfTestState_.wait_for_notification();
    long long elapsed = OSTime::get_monotonic() - t_start;
    EXPECT_EQ(3u, flow.timedSelectHelper_.remaining_);
    EXPECT_EQ(std::vector<char>(sndBuf_, sndBuf_ + 2),
        std::vector<char>(recvBuf_, recvBuf_ + 2));
    LOG(INFO, "elapsed time %lld usec", elapsed / 1000);
    // Hard to give an upper bound on the scheduling delay of multiple threads.
    ASSERT_GT(MSEC_TO_NSEC(50), elapsed);
    wait_for_main_executor();
}

#undef DECL_FLOW

TEST_F(StateFlowPipeTest, RaceCondition)
{
    static const unsigned COUNT = 1000;
    // This flow will perform many iterations of wait_with_timeout,
    // synchronized with the main thread dumping some bytes into the pipe.
    class TestFlow : public StateFlowBase
    {
    public:
        TestFlow(StateFlowPipeTest *parent)
            : StateFlowBase(&g_service)
            , parent_(parent)
            , count_(COUNT)
        {
            start_flow(STATE(test_state));
        }
        Action test_state()
        {
            parent_->bnIn_.notify();
            if (--count_ == 0)
            {
                return call_immediately(STATE(finished));
            }
            return read_repeated_with_timeout(&timedSelectHelper_,
                USEC_TO_NSEC(300), parent_->fdRecv_, parent_->recvBuf_, 1,
                STATE(read_again));
        }
        Action read_again()
        {
            if (timedSelectHelper_.remaining_)
            {
                // Ensures that there is no remaining byte in the pipe from the
                // previous iteration.
                return read_repeated(&timedSelectHelper_, parent_->fdRecv_,
                    parent_->recvBuf_, 1, STATE(test_state));
            }
            else
            {
                successCount_++;
                return call_immediately(STATE(test_state));
            }
        }
        Action finished()
        {
            parent_->bnOut_.notify();
            return exit();
        }

        StateFlowSelectHelper selectHelper_{this};
        StateFlowTimedSelectHelper timedSelectHelper_{this};
        StateFlowPipeTest *parent_;
        unsigned count_;
        unsigned successCount_ = 0;
    } flow(this);

    // This flow will act as a representative of other stuff going on on the
    // main executor, scheduling and perfoming "computation" and scheduling
    // etc.
    class BlockerFlow : public StateFlowBase
    {
    public:
        BlockerFlow()
            : StateFlowBase(&g_service)
        {
            start_flow(STATE(block));
        }

        ~BlockerFlow()
        {
            be_done = true;
            wait_for_main_executor();
            wait_for_main_executor();
        }

        Action block()
        {
            if (be_done)
                return exit();
            usleep(100);
            return yield_and_call(STATE(block));
        }

    private:
        bool be_done = false;
    } blocker_flow;

    while (true)
    {
        inTestState_.wait_for_notification();
        bnIn_.reset(&inTestState_);
        usleep(200 + random() % 500);
        ASSERT_EQ(1, write(fdSend_, sndBuf_, 1));
        if (bnOut_.is_done())
            break;
    }
    bnIn_.notify();
    outOfTestState_.wait_for_notification();
    LOG(INFO, "Success count: %u out of %u.", flow.successCount_, COUNT);
}
