#include <stdlib.h>

#include "utils/test_main.hxx"

#include "can_frame.h"
#include "executor/Dispatcher.hxx"

/*static void InvokeNotification(Notifiable *done)
{
    done->notify();
    }*/

using testing::Invoke;
using testing::StrictMock;
using testing::WithArg;
using testing::Return;
using testing::_;

namespace openlcb
{

struct CanMessagePayload : public can_frame
{
    CanMessagePayload() {
        CLR_CAN_FRAME_RTR(*this);
        CLR_CAN_FRAME_ERR(*this);
        SET_CAN_FRAME_EFF(*this);
        can_dlc = 0;
    }

    typedef uint32_t id_type;
    /** @returns the identifier for dispatching */
    id_type id()
    {
        if (IS_CAN_FRAME_EFF(*this))
        {
            /** @todo(balazs.racz) merge this with some common headers,
             * e.g. can frame dispatcher. */
            return GET_CAN_FRAME_ID_EFF(*this);// | (1U << 30);
        }
        else
        {
            return GET_CAN_FRAME_ID(*this);
        }
    }

    void set_id(uint32_t id) {
        SET_CAN_FRAME_ID_EFF(*this, id);
    }
};

typedef Buffer<CanMessagePayload> CanMessage;

/** This flow will allow setting expectations on the can ID and data length. */
class CanMessageHandlerFlow : public StateFlow<CanMessage, QList<3> >
{
public:
    CanMessageHandlerFlow() : StateFlow<CanMessage, QList<3> >(&g_service)
    {
    }

protected:
    /** This virtual function will be called with the ID and data length of
     * each incoming can message. */
    virtual void handle_message(uint32_t id, int dlc) = 0;

    Action entry()
    {
        handle_message(message()->data()->id(), message()->data()->can_dlc);
        return release_and_exit();
    }
};

/** Mock object for @ref CanMessageHandlerFlow */
class MockCanMessageHandler : public CanMessageHandlerFlow
{
public:
    MOCK_METHOD2(handle_message, void(uint32_t can_id, int dlc));
};


/** This flow will allow setting expectations on the raw pointer of the buffer
 * passed in. */
class CanFrameHandlerFlow : public StateFlow<CanMessage, QList<3> >
{
public:
    CanFrameHandlerFlow() : StateFlow<CanMessage, QList<3> >(&g_service)
    {
    }

protected:
    /** This virtual function will be called with the ID and data length of
     * each incoming can message. */
    virtual void handle_frame(CanMessage* frame) = 0;

    Action entry()
    {
        handle_frame(message());
        return release_and_exit();
    }
};

/** Mock object for @ref CanFrameHandlerFlow */
class MockCanFrameHandler : public CanFrameHandlerFlow
{
public:
    MOCK_METHOD1(handle_frame, void(CanMessage* frame));
};

typedef DispatchFlow<CanMessage, 3> CanDispatchFlow;

class DispatcherTest : public ::testing::Test
{
protected:
    DispatcherTest() : f_(&g_service)
    {
    }

    ~DispatcherTest()
    {
        wait_for_main_executor();
    }

    void send_message(uint32_t id) {
        CanMessage* m;
        mainBufferPool->alloc(&m);
        m->data()->set_id(id);
        f_.send(m);
    }

    void wait() {
        wait_for_main_executor();
    }

    CanDispatchFlow f_;
};

TEST_F(DispatcherTest, TestCreateDestroyEmptyRun)
{
    send_message(0);
    send_message(1);
}

TEST_F(DispatcherTest, TestAddAndNotCall)
{
    StrictMock<MockCanMessageHandler> h1;
    f_.register_handler(&h1, 1, 0x1FFFFFFFUL);
    f_.unregister_handler(&h1, 1, 0x1FFFFFFFUL);
    f_.register_handler(&h1, 1, 0x1FFFFFFFUL);

    send_message(0);
}

TEST_F(DispatcherTest, TestAddAndCall)
{
    StrictMock<MockCanMessageHandler> h1;
    f_.register_handler(&h1, 1, 0x1FFFFFFFUL);

    EXPECT_CALL(h1, handle_message(1, 0));

    send_message(1);
    wait();
}

TEST_F(DispatcherTest, TestCallWithMask)
{
    StrictMock<MockCanMessageHandler> h1;
    f_.register_handler(&h1, 1, 0xFFUL);

    EXPECT_CALL(h1, handle_message(257, _));

    send_message(257);
    send_message(2);
    wait();
}

TEST_F(DispatcherTest, TestMultiplehandlers)
{
    StrictMock<MockCanMessageHandler> h1;
    f_.register_handler(&h1, 1, 0xFFUL);
    StrictMock<MockCanMessageHandler> h2;
    f_.register_handler(&h2, 257, 0x1FFFFFFFUL);
    StrictMock<MockCanMessageHandler> h3;
    f_.register_handler(&h3, 2, 0xFFUL);

    EXPECT_CALL(h1, handle_message(_, _)).Times(2);
    EXPECT_CALL(h2, handle_message(_, _)).Times(1);
    EXPECT_CALL(h3, handle_message(_, _)).Times(1);

    send_message(257);
    send_message(2);
    send_message(1);
    wait();
}

/*TEST_F(DispatcherTest, TestAsync)
{
    StrictMock<MockCanMessageHandler> h1;
    StrictMock<MockCanMessageHandler> halloc;
    TypedAllocator<CanFrameHandler> alloc;
    alloc.Release(&h1);

    f_.register_handler(1, 0xFFUL, &halloc);

    EXPECT_CALL(halloc, get_allocator()).WillRepeatedly(Return(&alloc));

    EXPECT_CALL(h1, get_allocator()).WillRepeatedly(Return(nullptr));
    EXPECT_CALL(h1, handle_message(_, _)).Times(1).WillRepeatedly(
        WithArg<1>(Invoke(&InvokeNotification)));

    TypedSyncAllocation<CanDispatchFlow> salloc(f_.allocator());
    salloc.result()->IncomingMessage(257);

    TypedSyncAllocation<CanDispatchFlow> salloc2(f_.allocator());
    salloc.result()->IncomingMessage(1);
    WaitForExecutor();

    EXPECT_CALL(h1, handle_message(_, _)).Times(1).WillRepeatedly(
        WithArg<1>(Invoke(&InvokeNotification)));
    alloc.Release(&h1); // will release message for second call.
    WaitForExecutor();
    }*/

TEST_F(DispatcherTest, TestParams)
{
    StrictMock<MockCanFrameHandler> h1;
    f_.register_handler(&h1, 17, 0x1FFFFFFFUL);

    CanMessage* m;
    mainBufferPool->alloc(&m);
    m->data()->set_id(17);

    // Checks that the same pointer is sent to the argument.
    EXPECT_CALL(h1, handle_frame(m));
    f_.send(m);

    wait();
}

TEST_F(DispatcherTest, TestUnregister)
{
    StrictMock<MockCanMessageHandler> h1;
    f_.register_handler(&h1, 1, 0xFFUL);

    EXPECT_CALL(h1, handle_message(1, _));
    EXPECT_CALL(h1, handle_message(257, _));

    send_message(257);
    send_message(1);
    wait();

    f_.unregister_handler(&h1, 1, 0xFFUL);
    send_message(1);

    wait();
}

} // namespace openlcb
