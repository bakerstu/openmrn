/** \copyright
 * Copyright (c) 2013, Stuart W Baker
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 * 
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file Velocity.cxxtest
 * This file contains a unit test for classes in NMRAnetVelocity.hxx and
 * NMRAnetVelocity.cxx.
 *
 * @author Stuart W. Baker
 * @date 15 September 2013
 */

#include "os/os.h"
#include "gtest/gtest.h"
#include "openlcb/Velocity.hxx"
#include "openlcb/TractionDefs.hxx"

using namespace openlcb;

TEST(NMRAnetVelocityTest, size)
{
    EXPECT_EQ(4, sizeof(Velocity));
    EXPECT_EQ(2, sizeof(float16_t));
}

TEST(NMRAnetVelocityTest, constructor_int)
{
    Velocity velocity = 0.0F;
    
    EXPECT_TRUE(velocity == 0.0);
    EXPECT_EQ(velocity.direction(), Velocity::FORWARD);
}

TEST(NMRAnetVelocityTest, constructor_unsigned_int)
{
    Velocity *velocity = new Velocity(0U);
    
    EXPECT_TRUE(*velocity == 0.0);
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
}

TEST(NMRAnetVelocityTest, constructor_float)
{
    Velocity velocity = 0.0F;
    
    EXPECT_TRUE(velocity == 0.0);
    EXPECT_EQ(velocity.direction(), Velocity::FORWARD);
}

TEST(NMRAnetVelocityTest, constructor_double)
{
    Velocity velocity = 0.0;
    
    EXPECT_TRUE(velocity == 0.0);
    EXPECT_EQ(velocity.direction(), Velocity::FORWARD);
}

TEST(NMRAnetVelocityTest, constructor_float16)
{
    Velocity *velocity = new Velocity((float16_t)0);
    
    EXPECT_TRUE(*velocity == 0.0f);
    EXPECT_NEAR(velocity->speed(), 0.0f, 1e-6);
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
}

TEST(NMRAnetVelocityTest, constructor_copy)
{
    Velocity *velocity = new Velocity(1.7F);
    
    Velocity v = *velocity;
    
    EXPECT_TRUE(v == 1.7);
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
}

TEST(NMRAnetVelocityTest, constructor_float_negative_zero)
{
    Velocity *velocity = new Velocity(-0.0F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);
    
    EXPECT_TRUE(*velocity == -0.0);
    EXPECT_TRUE(*velocity == 0.0);
}

TEST(NMRAnetVelocityTest, isnan)
{
    Velocity v(nan_to_speed());
    EXPECT_TRUE(v.isnan());
    EXPECT_TRUE(isnan(v.speed()));
    EXPECT_TRUE(nan_to_speed().isnan());
    Velocity w;
    w.set_wire(0xFFFFu);
    EXPECT_TRUE(w.isnan());
    EXPECT_EQ(Velocity::REVERSE, w.direction());

    w.set_wire(0x7FFFu);
    EXPECT_TRUE(w.isnan());
    EXPECT_EQ(Velocity::FORWARD, w.direction());
}

TEST(NMRAnetVelocityTest, notnan)
{
    Velocity v(13.5);
    EXPECT_FALSE(v.isnan());
    EXPECT_FALSE(isnan(v.speed()));
}

TEST(NMRAnetVelocityTest, speed_positive)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
}

TEST(NMRAnetVelocityTest, speed_negative)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
}

TEST(NMRAnetVelocityTest, forward_from_forward)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
    
    velocity->forward();
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
}

TEST(NMRAnetVelocityTest, forward_from_reverse)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
    
    velocity->forward();
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
}

TEST(NMRAnetVelocityTest, reverse_from_forward)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
    
    velocity->reverse();
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
}

TEST(NMRAnetVelocityTest, reverse_from_reverse)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
    
    velocity->reverse();
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->speed() == 100.5F);
}

TEST(NMRAnetVelocityTest, mph_positive)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_FLOAT_EQ((100.5F / 0.44704F), velocity->mph());
}

TEST(NMRAnetVelocityTest, mph_negative)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_FLOAT_EQ((100.5F / 0.44704F), velocity->mph());
}

TEST(NMRAnetVelocityTest, get_dcc_128_forward)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->get_dcc_128() == (46 | 0x80));
}

TEST(NMRAnetVelocityTest, get_dcc_128_reverse)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->get_dcc_128() == 46);
}

TEST(NMRAnetVelocityTest, get_dcc_128_zero)
{
    Velocity *velocity = new Velocity(0.0F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->get_dcc_128() == (0x80));
}

TEST(NMRAnetVelocityTest, get_dcc_128_saturate)
{
    Velocity *velocity = new Velocity(300.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->get_dcc_128() == (127 | 0x80));
}

TEST(NMRAnetVelocityTest, set_dcc_128_forward)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_128(46 | 0x80);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == (45 / 0.44704F));
}

TEST(NMRAnetVelocityTest, set_dcc_128_reverse)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_128(46);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(*velocity == (-45 / 0.44704F));
}

TEST(NMRAnetVelocityTest, set_dcc_128_zero)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_128(0 | 0x80);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == 0.0);
}

TEST(NMRAnetVelocityTest, set_dcc_128_estop)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_128(1);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(*velocity == 0.0);
}

TEST(NMRAnetVelocityTest, get_dcc_28_forward)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->get_dcc_28() == (0x40 | 0x16 | 0x20));
}

TEST(NMRAnetVelocityTest, get_dcc_28_reverse)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->get_dcc_28() == (0x40 | 0x16));
}

TEST(NMRAnetVelocityTest, get_dcc_28_zero)
{
    Velocity *velocity = new Velocity(0.0F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
    EXPECT_TRUE(velocity->get_dcc_28() == (0x40 | 0x20));
}

TEST(NMRAnetVelocityTest, get_dcc_28_saturate)
{
    Velocity *velocity = new Velocity(300.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
    EXPECT_TRUE(velocity->get_dcc_28() == (0x40 | 0x1F | 0x20));
}

TEST(NMRAnetVelocityTest, set_dcc_28_forward)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_28(0x40 | 0x16 | 0x20);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == (10.0F / ((0.44704F * 28.0F)/128.0F)));
}

TEST(NMRAnetVelocityTest, set_dcc_28_reverse)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_28(0x40 | 0x16);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(*velocity == -(10.0F / ((0.44704F * 28.0F)/128.0F)));
}

TEST(NMRAnetVelocityTest, set_dcc_28_forward_estop_I)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_28(0x40 | 0x11 | 0x20);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == 0);
}

TEST(NMRAnetVelocityTest, set_dcc_28_forward_stop)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_28(0x40 | 0x00 | 0x20);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == 0);
}

TEST(NMRAnetVelocityTest, get_dcc_14_forward)
{
    Velocity *velocity = new Velocity(100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(velocity->get_dcc_14() == (0x40 | 0x06 | 0x20));
}

TEST(NMRAnetVelocityTest, get_dcc_14_reverse)
{
    Velocity *velocity = new Velocity(-100.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(velocity->get_dcc_14() == (0x40 | 0x06));
}

TEST(NMRAnetVelocityTest, get_dcc_14_zero)
{
    Velocity *velocity = new Velocity(0.0F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
    EXPECT_TRUE(velocity->get_dcc_14() == (0x40 | 0x20));
}

TEST(NMRAnetVelocityTest, get_dcc_14_saturate)
{
    Velocity *velocity = new Velocity(300.5F);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);
    EXPECT_TRUE(velocity->get_dcc_14() == (0x40 | 0x0F | 0x20));
}

TEST(NMRAnetVelocityTest, set_dcc_14_forward)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_14(0x40 | 0x06 | 0x20);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == (5.0F / ((0.44704F * 14.0F)/128.0F)));
}

TEST(NMRAnetVelocityTest, set_dcc_14_reverse)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_14(0x40 | 0x06);
    
    EXPECT_EQ(velocity->direction(), Velocity::REVERSE);    
    EXPECT_TRUE(*velocity == -(5.0F / ((0.44704F * 14.0F)/128.0F)));
}

TEST(NMRAnetVelocityTest, set_dcc_14_forward_estop)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_14(0x40 | 0x01 | 0x20);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == 0);
}

TEST(NMRAnetVelocityTest, set_dcc_14_forward_stop)
{
    Velocity *velocity = new Velocity();
    
    velocity->set_dcc_14(0x40 | 0x00 | 0x20);
    
    EXPECT_EQ(velocity->direction(), Velocity::FORWARD);    
    EXPECT_TRUE(*velocity == 0);
}

TEST(NMRAnetVelocityTest, operators_value)
{
    Velocity velocity = 2;

    EXPECT_TRUE(velocity != 0);
    
    EXPECT_TRUE((velocity + 10) == 12);
    EXPECT_TRUE((velocity - 10) == -8);
    EXPECT_TRUE((velocity * 10) == 20);
    EXPECT_TRUE((velocity / 2)  ==  1);
 
    EXPECT_TRUE((velocity++) == 2);
    EXPECT_TRUE((velocity) == 3);
    EXPECT_TRUE((++velocity) == 4);
    EXPECT_TRUE((velocity) == 4);

    EXPECT_TRUE((velocity--) == 4);
    EXPECT_TRUE((velocity) == 3);
    EXPECT_TRUE((--velocity) == 2);
    EXPECT_TRUE((velocity) == 2);

    EXPECT_EQ(velocity.direction(), Velocity::FORWARD);
    velocity = -2;
    EXPECT_EQ(velocity.direction(), Velocity::REVERSE);
    velocity += 2;
    EXPECT_EQ(velocity.direction(), Velocity::REVERSE);
    EXPECT_TRUE((velocity) == 0);

    velocity = 2;
    velocity += 2;
    EXPECT_TRUE((velocity) == 4);

    velocity -= 10;
    EXPECT_TRUE((velocity) == -6);

    velocity *= -4;
    EXPECT_TRUE((velocity) == 24);

    velocity /= 2;
    EXPECT_TRUE((velocity) == 12);
}

TEST(NMRAnetVelocityTest, operators_object)
{
    Velocity velocity = 2;
    Velocity value = 10;
    
    EXPECT_TRUE(velocity != value);
    
    EXPECT_TRUE((velocity + value) == 12);
    EXPECT_TRUE((velocity - value) == -8);
    EXPECT_TRUE((velocity * value) == 20);
    EXPECT_TRUE((value / velocity) ==  5);
 
    value = 2;
    velocity += value;
    EXPECT_TRUE((velocity) == 4);

    value = 10;
    velocity -= value;
    EXPECT_TRUE((velocity) == -6);

    value = -4;
    velocity *= value;
    EXPECT_TRUE((velocity) == 24);

    value = 2;
    velocity /= value;
    EXPECT_TRUE((velocity) == 12);

    value = 2;
    velocity = value;
    EXPECT_TRUE((velocity) == 2);
    EXPECT_TRUE(velocity == value);
}

int appl_main(int argc, char* argv[])
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
