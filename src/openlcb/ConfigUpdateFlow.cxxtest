/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file ConfigUpdateFlow.cxxtest
 *
 * Unit tests for ConfigUpdateFlow.
 *
 * @author Balazs Racz
 * @date 13 June 2015
 */

#include "utils/async_if_test_helper.hxx"

#include "openlcb/ConfigUpdateFlow.hxx"
#include "utils/ConfigUpdateListener.hxx"

namespace openlcb
{
namespace
{

using testing::DoAll;

/// Helper class for testing config update flow.
class MockConfigListener : public ConfigUpdateListener
{
public:
    MOCK_METHOD3(apply_configuration, UpdateAction(int fd, bool initial_load,
                                                   BarrierNotifiable *done));
    MOCK_METHOD1(factory_reset, void(int fd));
};

class ConfigUpdateFlowTest : public AsyncIfTest
{
protected:
    ~ConfigUpdateFlowTest() {
        wait_for_main_executor();
    }

    StrictMock<MockConfigListener> l1, l2;
    ConfigUpdateFlow updateFlow_{ifCan_.get()};
};

TEST_F(ConfigUpdateFlowTest, CreateDestroy)
{
}

TEST_F(ConfigUpdateFlowTest, CallListenerWithInitial)
{
    wait_for_main_executor();
    updateFlow_.TEST_set_fd(23);
    EXPECT_CALL(l1, apply_configuration(23, true, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    updateFlow_.register_update_listener(&l1);
    wait_for_main_executor();
    Mock::VerifyAndClear(&l1);

    EXPECT_CALL(l1, apply_configuration(23, false, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));

    updateFlow_.trigger_update();
    wait_for_main_executor();
}

TEST_F(ConfigUpdateFlowTest, CallMultipleListener)
{
    updateFlow_.TEST_set_fd(23);

    EXPECT_CALL(l1, apply_configuration(23, true, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    EXPECT_CALL(l2, apply_configuration(23, true, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));

    updateFlow_.register_update_listener(&l1);
    updateFlow_.register_update_listener(&l2);
    wait_for_main_executor();
    Mock::VerifyAndClear(&l1);
    Mock::VerifyAndClear(&l2);

    EXPECT_CALL(l1, apply_configuration(23, false, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    EXPECT_CALL(l2, apply_configuration(23, false, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));

    updateFlow_.trigger_update();
    wait_for_main_executor();
}

TEST_F(ConfigUpdateFlowTest, AsyncListenerCall)
{
    updateFlow_.TEST_set_fd(17);
    EXPECT_CALL(l1, apply_configuration(17, true, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    EXPECT_CALL(l2, apply_configuration(17, true, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    updateFlow_.register_update_listener(&l1);
    updateFlow_.register_update_listener(&l2);
    wait_for_main_executor();
    Mock::VerifyAndClear(&l1);
    Mock::VerifyAndClear(&l2);

    Notifiable* d = nullptr;
    EXPECT_CALL(l1, apply_configuration(17, false, _))
        .WillOnce(DoAll(SaveArg<2>(&d),
                        Return(ConfigUpdateListener::UPDATED)));
    updateFlow_.trigger_update();
    wait_for_main_executor();
    Mock::VerifyAndClear(&l1);
    // The second will also be called now.
    EXPECT_CALL(l2, apply_configuration(17, false, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    d->notify();
    wait_for_main_executor();
}

TEST_F(ConfigUpdateFlowTest, InitialLoad)
{
    updateFlow_.~ConfigUpdateFlow();
    // This code simulates what happens during startup in a real
    // binary. Specifically, the executor is not running yet when things get
    // registered.
    BlockExecutor block(nullptr);
    new (&updateFlow_) ConfigUpdateFlow(ifCan_.get());
    updateFlow_.open_file("/dev/zero");
    updateFlow_.init_flow();
    updateFlow_.register_update_listener(&l1);
    EXPECT_CALL(l1, apply_configuration(::testing::Gt(0), true, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    block.release_block();
    wait_for_main_executor();
    Mock::VerifyAndClear(&l1);

    EXPECT_CALL(l1, apply_configuration(::testing::Gt(0), false, _))
        .WillOnce(DoAll(WithArg<2>(Invoke(&InvokeNotification)),
                        Return(ConfigUpdateListener::UPDATED)));
    updateFlow_.trigger_update();
    wait_for_main_executor();
}

} // namespace
} // namespace openlcb
