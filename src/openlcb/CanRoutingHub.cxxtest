#include "utils/async_if_test_helper.hxx"

#include "openlcb/CanRoutingHub.hxx"

namespace openlcb
{
namespace
{

class CanRoutingHubTest : public ::testing::Test
{
protected:
    typedef StrictMock<MockSend> PortType;
    void test_packet(const string &packet, PortType *source,
        std::initializer_list<PortType *> destinations)
    {
        for (PortType *dst : destinations)
        {
            EXPECT_CALL(*dst, mwrite(StrCaseEq(packet)));
        }
        auto *b = hub_.alloc();
        b->data()->skipMember_ = source;
        b->data()->assign(packet);
        hub_.send(b);
        wait();
    }

    ~CanRoutingHubTest()
    {
        wait();
    }

    void wait()
    {
        wait_for_main_executor();
        for (PortType *p : all_ports())
        {
            Mock::VerifyAndClear(p);
        }
    }

    const std::vector<PortType *> &all_ports()
    {
        return allPorts_;
    }

    void register_all_ports()
    {
        for (PortType *p : allPorts_)
        {
            hub_.register_port(p);
        }
    }

    GcCanRoutingHub hub_{&g_service};
    PortType p1_, p2_, p3_, p4_;
    std::vector<PortType *> allPorts_{&p1_, &p2_, &p3_, &p4_};
};

TEST_F(CanRoutingHubTest, Construct)
{
}

TEST_F(CanRoutingHubTest, SimpleStdPacket)
{
    register_all_ports();

    test_packet(":S000N;", &p1_, {&p2_, &p3_, &p4_});
}

TEST_F(CanRoutingHubTest, Unregister)
{
    register_all_ports();

    test_packet(":S000N;", &p1_, {&p2_, &p3_, &p4_});

    hub_.unregister_port(&p3_);

    test_packet(":S000N;", &p1_, {&p2_, &p4_});
}

TEST_F(CanRoutingHubTest, Addressed)
{
    register_all_ports();

    // This will not add anything to the routing table
    test_packet(":S111N;", &p1_, {&p2_, &p3_, &p4_});
    // Addressed packet will be broadcast
    test_packet(":X19828444N0111;", &p4_, {&p1_, &p2_, &p3_});
    // We do add to the routing table
    test_packet(":X19100111N050101011800;", &p1_, {&p2_, &p3_, &p4_});
    // Addressed packet will be unicast
    test_packet(":X19828444N0111;", &p4_, {&p1_});
    // Response too.
    test_packet(":X19668111N0444000000000000;", &p1_, {&p4_});

    // Addressed packet loopback goes nowhere.
    test_packet(":X19828222N0111;", &p1_, {});

    // a global packet will be still broadcast
    test_packet(":X19490444N;", &p4_, {&p1_, &p2_, &p3_});
}

TEST_F(CanRoutingHubTest, AddressTransition)
{
    register_all_ports();

    // We do add to the routing table
    test_packet(":X19100111N050101011800;", &p1_, {&p2_, &p3_, &p4_});
    // Addressed packet will be unicast
    test_packet(":X19828444N0111;", &p4_, {&p1_});
    // Different source
    test_packet(":X19100111N050101011800;", &p2_, {&p1_, &p3_, &p4_});
    // Addressed packet will be unicast to new target
    test_packet(":X19828444N0111;", &p4_, {&p2_});
}

TEST_F(CanRoutingHubTest, NoAddressTransitionOnCID)
{
    register_all_ports();

    // We do add to the routing table
    test_packet(":X10701111N050101011800;", &p1_, {&p2_, &p3_, &p4_});
    // Addressed packet will be unicast
    test_packet(":X19828444N0111;", &p4_, {&p1_});
    // Different source but CID frame
    test_packet(":X16999111N;", &p2_, {&p1_, &p3_, &p4_});
    // Addressed packet will be unicast to old target
    test_packet(":X19828444N0111;", &p4_, {&p1_});
}

TEST_F(CanRoutingHubTest, Datagram)
{
    register_all_ports();

    // Addressed packet will be broadcast
    test_packet(":X1A111444N;", &p4_, {&p1_, &p2_, &p3_});
    // We do add to the routing table
    test_packet(":X19100111N050101011800;", &p1_, {&p2_, &p3_, &p4_});
    // Datagram first
    test_packet(":X1B111444N2020;", &p4_, {&p1_});
    // Datagram middle
    test_packet(":X1C111444N2020;", &p4_, {&p1_});
    // Datagram end
    test_packet(":X1D111444N2020;", &p4_, {&p1_});
    // Datagram only
    test_packet(":X1A111444N2020;", &p4_, {&p1_});

    // Response addressed packet
    test_packet(":X19A28111N0444;", &p1_, {&p4_});
}

TEST_F(CanRoutingHubTest, Stream)
{
    register_all_ports();

    // Addressed packet will be broadcast
    test_packet(":X1F111444N;", &p4_, {&p1_, &p2_, &p3_});
    // We do add to the routing table
    test_packet(":X19100111N050101011800;", &p1_, {&p2_, &p3_, &p4_});
    // Stream packet.
    test_packet(":X1F111444N20;", &p4_, {&p1_});
}

TEST_F(CanRoutingHubTest, UnknownType)
{
    register_all_ports();

    // Add to the routing table
    test_packet(":X19100111N050101011800;", &p1_, {&p2_, &p3_, &p4_});

    // Nonexistant addressed MTI
    test_packet(":X19008444N0111;", &p4_, {&p1_});
    // Nonexistant global MTI
    test_packet(":X19004444N0111;", &p4_, {&p1_, &p2_, &p3_});
    // Nonexistant addressed MTI loopback
    test_packet(":X19008222N0111;", &p1_, {});

    // Unknown frame types
    test_packet(":X18008444N0111;", &p4_, {&p1_, &p2_, &p3_});
    // Unknown frame types
    test_packet(":X1E008444N0111;", &p4_, {&p1_, &p2_, &p3_});
}

TEST_F(CanRoutingHubTest, Events)
{
    register_all_ports();

    // We do add to the routing table
    test_packet(":X19100111N050101011800;", &p1_, {&p2_, &p3_, &p4_});
    test_packet(":X19100222N050101011800;", &p2_, {&p1_, &p3_, &p4_});
    test_packet(":X19100333N050101011800;", &p3_, {&p1_, &p2_, &p4_});
    test_packet(":X19100444N050101011800;", &p4_, {&p1_, &p2_, &p3_});

    // Event report
    test_packet(":X195B4111N0501010118000001;", &p1_, {});

    // Consumer identified
    test_packet(":X194C7444N0501010118000001;", &p4_, {&p1_, &p2_, &p3_});
    
    // Event report
    test_packet(":X195B4111N0501010118000001;", &p1_, {&p4_});

    // Consumer range identified
    test_packet(":X194A4333N0501010118000F00;", &p3_, {&p1_, &p2_, &p4_});
    // Producer range identified. This should not impact event routing, but
    // right now it does, because we merge producer and consumer identified
    // together.
    // test_packet(":X19524333N0501010118000F00;", &p2_, {&p1_, &p3_, &p4_});

    // Event report
    test_packet(":X195B4111N0501010118000001;", &p1_, {&p4_});
    // matches the range
    test_packet(":X195B4111N0501010118000F06;", &p1_, {&p3_});
}


} // namespace
} // namespace openlcb
