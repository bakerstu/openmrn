#include "utils/async_traction_test_helper.hxx"

#include "openlcb/TractionTrain.hxx"
#include "openlcb/TractionTestTrain.hxx"
#include "openlcb/TractionThrottle.hxx"

namespace openlcb
{

static constexpr NodeID TRAIN_NODE_ID = 0x060100000000 | 1372;

class ThrottleTest : public AsyncNodeTest
{
protected:
    ThrottleTest()
    {
        print_all_packets();
        create_allocated_alias();
        run_x(
            [this]() { otherIf_.local_aliases()->add(TRAIN_NODE_ID, 0x771); });
        trainNode_.reset(new TrainNodeForProxy(&trainService_, &trainImpl_));
        wait();
    }

    LoggingTrain trainImpl_{1372};
    std::unique_ptr<TrainNode> trainNode_;

    IfCan otherIf_{&g_executor, &can_hub0, 5, 5, 5};
    TrainService trainService_{&otherIf_};

public:
    SyncNotifiable n_;

    class ImplFlow : public StateFlowBase
    {
    public:
        ImplFlow(ThrottleTest *test)
            : StateFlowBase(test->ifCan_.get())
            , throttle_(test->node_)
            , test_(test)
        {
        }

        ~ImplFlow()
        {
            auto *b = full_allocation_result(&throttle_);
            if (b)
            {
                b->unref();
            }
        }

        TractionThrottleInput *response()
        {
            return full_allocation_result(&throttle_)->data();
        }

        TractionThrottle throttle_;
        ThrottleTest *test_;
    };
};

TEST_F(ThrottleTest, CreateDestroy)
{
    wait();
    clear_expect();
}

TEST_F(ThrottleTest, SendAssign)
{
    wait();
    clear_expect();

    class TestFlow : public ImplFlow
    {
    public:
        TestFlow(ThrottleTest *t)
            : ImplFlow(t)
        {
        }

        void start()
        {
            start_flow(STATE(send_assign));
        }

        Action send_assign()
        {
            return invoke_subflow_and_wait(&throttle_, STATE(assign_done),
                TractionThrottleCommands::ASSIGN_TRAIN, TRAIN_NODE_ID, false);
        }

        Action assign_done()
        {
            test_->n_.notify();
            return exit();
        }
    } flow(this);
    flow.start();
    n_.wait_for_notification();
    EXPECT_EQ(0, flow.response()->resultCode);
    NodeID actual_ctrl_id = trainNode_->get_controller().id;
    EXPECT_EQ(TEST_NODE_ID, actual_ctrl_id);

    wait();
}

TEST_F(ThrottleTest, SendAssignRelease)
{
    wait();
    clear_expect();

    class TestFlow : public ImplFlow
    {
    public:
        TestFlow(ThrottleTest *t)
            : ImplFlow(t)
        {
        }

        void start_assign()
        {
            start_flow(STATE(send_assign));
        }

        void start_release()
        {
            start_flow(STATE(send_release));
        }

        Action send_assign()
        {
            return invoke_subflow_and_wait(&throttle_, STATE(assign_done),
                TractionThrottleCommands::ASSIGN_TRAIN, TRAIN_NODE_ID, false);
        }

        Action send_release()
        {
            return invoke_subflow_and_wait(&throttle_, STATE(assign_done),
                TractionThrottleCommands::RELEASE_TRAIN);
        }

        Action assign_done()
        {
            test_->n_.notify();
            return exit();
        }
    } flow(this);

    flow.start_assign();
    n_.wait_for_notification();
    EXPECT_EQ(0, flow.response()->resultCode);
    NodeID actual_ctrl_id = trainNode_->get_controller().id;
    EXPECT_EQ(TEST_NODE_ID, actual_ctrl_id);

    wait();

    flow.start_release();
    n_.wait_for_notification();
    wait();
    EXPECT_EQ(0, flow.response()->resultCode);
    actual_ctrl_id = trainNode_->get_controller().id;
    EXPECT_EQ(0u, actual_ctrl_id);

    wait();
}

TEST_F(ThrottleTest, SendQuery)
{
    wait();
    clear_expect();

    class TestFlow : public ImplFlow
    {
    public:
        TestFlow(ThrottleTest *t)
            : ImplFlow(t)
        {
        }

        void start()
        {
            start_flow(STATE(send_assign));
        }

        void load()
        {
            start_flow(STATE(send_load));
        }

        Action send_assign()
        {
            return invoke_subflow_and_wait(&throttle_, STATE(assign_done),
                TractionThrottleCommands::ASSIGN_TRAIN, TRAIN_NODE_ID, false);
        }

        Action send_load()
        {
            return invoke_subflow_and_wait(&throttle_, STATE(assign_done),
                TractionThrottleCommands::LOAD_STATE);
        }

        Action assign_done()
        {
            test_->n_.notify();
            return exit();
        }
    } flow(this);
    flow.start();
    n_.wait_for_notification();
    EXPECT_EQ(0, flow.response()->resultCode);
    NodeID actual_ctrl_id = trainNode_->get_controller().id;
    EXPECT_EQ(TEST_NODE_ID, actual_ctrl_id);

    wait();

    trainImpl_.set_speed(Velocity::from_mph(13.2));
    trainImpl_.set_fn(1, 1);
    trainImpl_.set_fn(2, 0);
    trainImpl_.set_fn(4, 1);
    trainImpl_.set_fn(7, 1);

    flow.load();
    n_.wait_for_notification();
    wait();
    EXPECT_EQ(0, flow.response()->resultCode);

    EXPECT_NEAR(13.2, flow.throttle_.get_speed().mph(), 0.1);
    EXPECT_EQ(0, flow.throttle_.get_fn(0));
    EXPECT_EQ(1, flow.throttle_.get_fn(1));
    EXPECT_EQ(0, flow.throttle_.get_fn(2));
    EXPECT_EQ(0, flow.throttle_.get_fn(3));
    EXPECT_EQ(1, flow.throttle_.get_fn(4));
    EXPECT_EQ(0, flow.throttle_.get_fn(5));
    EXPECT_EQ(0, flow.throttle_.get_fn(6));
    EXPECT_EQ(1, flow.throttle_.get_fn(7));
}

class ThrottleClientTest : public ThrottleTest {
protected:
    ~ThrottleClientTest() {
        wait();
    }

    TractionThrottle throttle_{node_};
};


#define EXPECT_QRYCONSIST(NODE, FLAGS, index) { uint8_t flags; EXPECT_EQ(NODE, trainNode_->query_consist(index, &flags)); EXPECT_EQ(FLAGS, flags); }

TEST_F(ThrottleClientTest, SendConsistAdd)
{
    NodeID n1 = 0x050101011837;

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, false);
    ASSERT_EQ(0, b->data()->resultCode);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_ADD,
        0x050101011837, 0x5A);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n1, 0x5A, 0);
}

TEST_F(ThrottleClientTest, SendConsistAddDel)
{
    NodeID n1 = 0x050101011837;
    NodeID n2 = 0x050101012188;

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, false);
    ASSERT_EQ(0, b->data()->resultCode);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_ADD, n1, 0x5A);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n1, 0x5A, 0);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_ADD, n2, 0x42);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(2, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n1, 0x5A, 0);
    EXPECT_QRYCONSIST(n2, 0x42, 1);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_DEL, n1);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n2, 0x42, 0);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_DEL, n1);
    EXPECT_EQ(Defs::ERROR_OPENMRN_NOT_FOUND, b->data()->resultCode);
    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n2, 0x42, 0);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_DEL, n2);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0, trainNode_->query_consist_length());
}

TEST_F(ThrottleClientTest, SendConsistQry)
{
    NodeID n1 = 0x050101011837;
    NodeID n2 = 0x050101012188;

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, false);
    ASSERT_EQ(0, b->data()->resultCode);
    wait();

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY);
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0, b->data()->consistCount);
    EXPECT_EQ(0xff, b->data()->consistIndex);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_ADD, n1, 0x5A);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n1, 0x5A, 0);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, b->data()->consistCount);
    EXPECT_EQ(0xff, b->data()->consistIndex);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY, 0);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, b->data()->consistCount);
    EXPECT_EQ(0, b->data()->consistIndex);
    EXPECT_EQ(0x5A, b->data()->flags);
    EXPECT_EQ(n1, b->data()->dst);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY, 1);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(1, b->data()->consistCount);
    EXPECT_EQ(0xff, b->data()->consistIndex);
    EXPECT_EQ(0u, b->data()->dst);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_ADD, n2, 0x42);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(2, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(n1, 0x5A, 0);
    EXPECT_QRYCONSIST(n2, 0x42, 1);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY, 1);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(2, b->data()->consistCount);
    EXPECT_EQ(1, b->data()->consistIndex);
    EXPECT_EQ(0x42, b->data()->flags);
    EXPECT_EQ(n2, b->data()->dst);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY, 0);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(2, b->data()->consistCount);
    EXPECT_EQ(0, b->data()->consistIndex);
    EXPECT_EQ(0x5A, b->data()->flags);
    EXPECT_EQ(n1, b->data()->dst);

    b = invoke_flow(&throttle_, TractionThrottleCommands::CONSIST_QRY, 2);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(2, b->data()->consistCount);
    EXPECT_EQ(0xff, b->data()->consistIndex);
    EXPECT_EQ(0u, b->data()->dst);
}

TEST_F(ThrottleClientTest, SendSelfConsist)
{
    NodeID n1 = TRAIN_NODE_ID;

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, false);
    ASSERT_EQ(0, b->data()->resultCode);

    b = invoke_flow(
        &throttle_, TractionThrottleCommands::CONSIST_ADD, n1, 0);
    // Rejected: already exists.
    EXPECT_NE(0, b->data()->resultCode);
    EXPECT_EQ(Defs::ERROR_OPENMRN_ALREADY_EXISTS, b->data()->resultCode);
    EXPECT_EQ(0, trainNode_->query_consist_length());
}

TEST_F(ThrottleClientTest, AssignWithListener)
{
    EXPECT_EQ(0, trainNode_->query_consist_length());

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, true);
    ASSERT_EQ(0, b->data()->resultCode);

    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(node_->node_id(), 0x8C, 0);

    b = invoke_flow(&throttle_, TractionThrottleCommands::RELEASE_TRAIN);
    ASSERT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0, trainNode_->query_consist_length());
}

TEST_F(ThrottleClientTest, ReassignWithListener)
{
    EXPECT_EQ(0, trainNode_->query_consist_length());

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, true);
    ASSERT_EQ(0, b->data()->resultCode);

    EXPECT_EQ(1, trainNode_->query_consist_length());
    EXPECT_QRYCONSIST(node_->node_id(), 0x8C, 0);

    static auto TRAIN_NODE_ID2 = TRAIN_NODE_ID + 1;
    run_x([this]() { otherIf_.local_aliases()->add(TRAIN_NODE_ID2, 0x772); });
    LoggingTrain train_impl2{1373};
    TrainNodeForProxy node2(&trainService_, &train_impl2);
    wait();

    b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID2, true);
    ASSERT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0, trainNode_->query_consist_length());
    EXPECT_EQ(1, node2.query_consist_length());

    b = invoke_flow(&throttle_, TractionThrottleCommands::RELEASE_TRAIN);
    ASSERT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0, trainNode_->query_consist_length());
    EXPECT_EQ(0, node2.query_consist_length());

    wait();
}

TEST_F(ThrottleClientTest, ReassignWithoutListener)
{
    EXPECT_EQ(0, trainNode_->query_consist_length());

    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, true);
    ASSERT_EQ(0, b->data()->resultCode);

    EXPECT_EQ(1, trainNode_->query_consist_length());

    static auto TRAIN_NODE_ID2 = TRAIN_NODE_ID + 1;
    run_x([this]() { otherIf_.local_aliases()->add(TRAIN_NODE_ID2, 0x772); });
    LoggingTrain train_impl2{1373};
    TrainNodeForProxy node2(&trainService_, &train_impl2);
    wait();

    b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID2, false);
    ASSERT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0, trainNode_->query_consist_length());
    EXPECT_EQ(0, node2.query_consist_length());

    wait();
}

class ListenerInterface
{
public:
    virtual void update(int fn) = 0;
};

class MockListener : public ListenerInterface
{
public:
    MOCK_METHOD1(update, void(int));
};

TEST_F(ThrottleClientTest, ListenerCallback)
{
    StrictMock<MockListener> l;
    throttle_.set_throttle_listener(
        std::bind(&ListenerInterface::update, &l, std::placeholders::_1));
    auto b = invoke_flow(&throttle_, TractionThrottleCommands::ASSIGN_TRAIN,
        TRAIN_NODE_ID, true);
    ASSERT_EQ(0, b->data()->resultCode);

    // The first call might bounce back because the remote alias cache will
    // have a miss. This is not ideal but not a deal breaker.
    EXPECT_CALL(l, update(_)).Times(AtLeast(0));
    Velocity v;
    v.set_mph(5);
    v.reverse();
    throttle_.set_speed(v);
    wait();

    Mock::VerifyAndClear(&l);
    // Setting state will not cause callback.
    throttle_.set_fn(23, 1);
    wait();
    Mock::VerifyAndClear(&l);
    EXPECT_NEAR(5, throttle_.get_speed().mph(), 0.1);
    EXPECT_EQ(Velocity::REVERSE, throttle_.get_speed().direction());

    // Directly setting state on the target train will cause returned calls.
    EXPECT_CALL(l, update(-1));
    send_packet(":X195EB330N07710045D0;"); // speed 13 mph
    wait();
    Mock::VerifyAndClear(&l);
    EXPECT_NEAR(13, throttle_.get_speed().mph(), 0.1);
    EXPECT_EQ(Velocity::FORWARD, throttle_.get_speed().direction());

    // Test with function set as well.
    EXPECT_CALL(l, update(10));
    EXPECT_EQ(TractionThrottle::FN_NOT_KNOWN, throttle_.get_fn(10));
    send_packet(":X195EB330N07710100000a0001;"); // fn 10 = 1
    wait();
    Mock::VerifyAndClear(&l);
    EXPECT_EQ(1, throttle_.get_fn(10));

    // Test with emergency stop as well.
    EXPECT_CALL(l, update(-1));
    EXPECT_FALSE(throttle_.get_emergencystop());
    send_packet(":X195EB330N077102;"); // E-Stop
    wait();
    Mock::VerifyAndClear(&l);
    EXPECT_TRUE(throttle_.get_emergencystop());

    // send another speed command to verify that E-Stop gets cleared
    throttle_.set_speed(v);
    EXPECT_FALSE(throttle_.get_emergencystop());
}

} // namespace openlcb
