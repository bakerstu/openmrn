#include <map>

#include "openlcb/AliasAllocator.hxx"
#include "openlcb/AliasCache.hxx"
#include "openlcb/BulkAliasAllocator.hxx"
#include "openlcb/CanDefs.hxx"
#include "utils/async_if_test_helper.hxx"

namespace openlcb
{
class AsyncAliasAllocatorTest : public AsyncIfTest
{
protected:
    AsyncAliasAllocatorTest()
        : b_(nullptr)
        , alias_allocator_(TEST_NODE_ID, ifCan_.get())
        , bulkAllocator_(create_bulk_alias_allocator(ifCan_.get()))
    {
    }

    ~AsyncAliasAllocatorTest()
    {
        wait();
    }

    void set_seed(unsigned seed, AliasAllocator *alloc = nullptr)
    {
        if (!alloc)
            alloc = &alias_allocator_;
        alloc->seed_ = seed;
    }

    unsigned next_seed(AliasAllocator *alloc = nullptr)
    {
        if (!alloc)
        {
            alloc = &alias_allocator_;
        }
        alloc->next_seed();
        return alloc->seed_;
    }

    /** Takes the next allocated alias from the async alias allocator. Waits
     * until one is available. The alias will be saved into the buffer b_. */
    void get_next_alias()
    {
        NodeAlias a;
        nextAliasNodeId_++;
        do
        {
            run_x([this, &a]() {
                a = alias_allocator_.get_allocated_alias(
                    nextAliasNodeId_, &ex_);
            });
            if (!a)
            {
                n_.wait_for_notification();
            }
        } while (a == 0);
        b_ = alias_allocator_.alloc();
        b_->data()->alias = a;
        b_->data()->state = AliasInfo::STATE_RESERVED;
    }

    /// Pre-generates some aliases into a vector.
    void generate_aliases(AliasAllocator *alloc, unsigned count)
    {
        set_seed(0x555, alloc);
        run_x([this, count, alloc]() {
            for (unsigned i = 0; i < count; i++)
            {
                auto a = alloc->get_new_seed();
                LOG(INFO, "alias %03X", a);
                aliases_.push_back(a);
            }
        });
        set_seed(0x555, alloc);
    }

    /// Expects that CID frames are sent to the bus.
    /// @param begin iterator into alias array
    /// @param end iterator (end) into alias array
    template <typename It> void expect_cid(It begin, It end)
    {
        for (auto it = begin; it != end; ++it)
        {
            NodeAlias a = *it;
            string msg = StringPrintf("cid %03X", a);
            LOG(INFO, "cid %03X", a);
            expect_packet(StringPrintf(":X17020%03XN;", a))
                .RetiresOnSaturation();
            expect_packet(StringPrintf(":X1610D%03XN;", a))
                .RetiresOnSaturation();
            expect_packet(StringPrintf(":X15000%03XN;", a))
                .RetiresOnSaturation();
            expect_packet(StringPrintf(":X14003%03XN;", a))
                .RetiresOnSaturation();
        }
    }

    /// Expects that RID frames are sent to the bus.
    /// @param begin iterator into alias array
    /// @param end iterator (end) into alias array
    template <typename It> void expect_rid(It begin, It end)
    {
        for (auto it = begin; it != end; ++it)
        {
            NodeAlias a = *it;
            LOG(INFO, "rid %03X", a);
            expect_packet(StringPrintf(":X10700%03XN;", a))
                .RetiresOnSaturation();
        }
    }

    /// Helper class to pass into the asynchronous alias allocation wait. Will
    /// notify n_ when the alias is ready to be taken.
    class AllocExecutable : public Executable
    {
    public:
        AllocExecutable(AsyncAliasAllocatorTest *parent)
            : parent_(parent)
        {
        }
        void run() override
        {
        }
        void alloc_result(QMember *item) override
        {
            parent_->n_.notify();
        }
        AsyncAliasAllocatorTest *parent_;
    } ex_ {this};
    friend class AllocExecutable;

    Buffer<AliasInfo> *b_;
    AliasAllocator alias_allocator_;
    std::unique_ptr<BulkAliasAllocatorInterface> bulkAllocator_;
    std::vector<NodeAlias> aliases_;
    /// Will use this node ID to mark the next alias gotten.
    openlcb::NodeID nextAliasNodeId_ = TEST_NODE_ID + 1;
};

TEST_F(AsyncAliasAllocatorTest, SetupTeardown)
{
}

TEST_F(AsyncAliasAllocatorTest, AllocateOne)
{
    set_seed(0x555);

    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    expect_packet(":X10700555N;");

    get_next_alias();
    ASSERT_TRUE(b_);
    EXPECT_EQ(0x555U, b_->data()->alias);
    EXPECT_EQ(AliasInfo::STATE_RESERVED, b_->data()->state);
}

TEST_F(AsyncAliasAllocatorTest, ReserveThenAllocate)
{
    set_seed(0x555);
    clear_expect(true);
    mainBufferPool->alloc(&b_);
    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    alias_allocator_.send(b_);
    wait();
    expect_packet(":X10700555N;");
    usleep(250000);
    wait();
    clear_expect(true);
    run_x([this]() {
        EXPECT_EQ(0x555,
            alias_allocator_.get_allocated_alias(nextAliasNodeId_, nullptr));
        EXPECT_EQ(nextAliasNodeId_,
            ifCan_->local_aliases()->lookup(NodeAlias(0x555)));
    });
}

TEST_F(AsyncAliasAllocatorTest, ReserveUnused)
{
    alias_allocator_.TEST_set_reserve_unused_alias_count(1);
    set_seed(0x555);
    clear_expect(true);
    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    run_x([this]() {
        EXPECT_EQ(
            0, alias_allocator_.get_allocated_alias(nextAliasNodeId_, &ex_));
    });
    wait();
    clear_expect(true);
    expect_packet(":X10700555N;");
    usleep(250000);
    clear_expect(true);
    expect_packet(":X17020AAAN;");
    expect_packet(":X1610DAAAN;");
    expect_packet(":X15000AAAN;");
    expect_packet(":X14003AAAN;");
    set_seed(0xAAA);
    run_x([this]() {
        EXPECT_EQ(0x555,
            alias_allocator_.get_allocated_alias(nextAliasNodeId_, &ex_));
    });
    wait();
    clear_expect(true);
    expect_packet(":X10700AAAN;");
    usleep(250000);
    run_x([this]() {
        // This one should be marked as reserved.
        EXPECT_EQ(CanDefs::get_reserved_alias_node_id(0xAAA),
            ifCan_->local_aliases()->lookup(NodeAlias(0xAAA)));
    });
}

#if 0
TEST_F(AsyncAliasAllocatorTest, TestDelay)
{
    set_seed(0x555);
    AliasInfo info;
    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    alias_allocator_.empty_aliases()->Release(&info);
    wait();
    usleep(150000);
    expect_packet(":X10700555N;");
    usleep(60000);
}
#endif

TEST_F(AsyncAliasAllocatorTest, AllocateMultiple)
{
    set_seed(0x555);
    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    expect_packet(":X10700555N;");
    b_ = nullptr;
    get_next_alias();
    EXPECT_EQ(0x555U, b_->data()->alias);
    EXPECT_EQ(AliasInfo::STATE_RESERVED, b_->data()->state);

    set_seed(0xAAA);
    expect_packet(":X17020AAAN;");
    expect_packet(":X1610DAAAN;");
    expect_packet(":X15000AAAN;");
    expect_packet(":X14003AAAN;");
    expect_packet(":X10700AAAN;");

    /* Conflicts with the previous alias to be tested. That's not a problem at
     * this point however, because that alias has already left the
     * allocator. */
    send_packet(":X10700555N;");

    get_next_alias();
    EXPECT_EQ(0xAAAU, b_->data()->alias);
    EXPECT_EQ(AliasInfo::STATE_RESERVED, b_->data()->state);
}

TEST_F(AsyncAliasAllocatorTest, AllocationConflict)
{
    clear_expect(true);
    set_seed(0x555);
    mainBufferPool->alloc(&b_);
    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    alias_allocator_.send(b_);
    b_ = nullptr;
    wait();
    clear_expect(true);
    set_seed(0xAA5);
    expect_packet(":X17020AA5N;");
    expect_packet(":X1610DAA5N;");
    expect_packet(":X15000AA5N;");
    expect_packet(":X14003AA5N;");
    expect_packet(":X10700AA5N;");
    send_packet(":X10700555N;");
    twait();
    clear_expect(true);
    run_x([this]() {
        // This one should be marked as reserved.
        EXPECT_EQ(CanDefs::get_reserved_alias_node_id(0xAA5),
            ifCan_->local_aliases()->lookup(NodeAlias(0xAA5)));
        // This one should be unknown.
        EXPECT_EQ(0U, ifCan_->local_aliases()->lookup(NodeAlias(0x555)));
    });

    get_next_alias();
    EXPECT_EQ(0xAA5U, b_->data()->alias);
    EXPECT_EQ(AliasInfo::STATE_RESERVED, b_->data()->state);
    run_x([this]() {
        // This one should be marked for the new node ID.
        EXPECT_EQ(nextAliasNodeId_,
            ifCan_->local_aliases()->lookup(NodeAlias(0xAA5)));
    });
}

TEST_F(AsyncAliasAllocatorTest, LateAllocationConflict)
{
    clear_expect(true);
    set_seed(0x555);
    mainBufferPool->alloc(&b_);
    expect_packet(":X17020555N;");
    expect_packet(":X1610D555N;");
    expect_packet(":X15000555N;");
    expect_packet(":X14003555N;");
    alias_allocator_.send(b_);
    b_ = nullptr;
    wait();
    clear_expect(true);
    set_seed(0xAA5);
    usleep(100000);
    expect_packet(":X17020AA5N;");
    expect_packet(":X1610DAA5N;");
    expect_packet(":X15000AA5N;");
    expect_packet(":X14003AA5N;");
    send_packet(":X10700555N;");
    wait();
    clear_expect(true);
    usleep(100000);
    expect_packet(":X10700AA5N;");
    send_packet(":X10700555N;");
    twait();
    get_next_alias();
    EXPECT_EQ(0xAA5U, b_->data()->alias);
    EXPECT_EQ(AliasInfo::STATE_RESERVED, b_->data()->state);
}

TEST_F(AsyncAliasAllocatorTest, GenerationCycleLength)
{
    std::map<unsigned, bool> seen_seeds;
    // Checks that the first 4096 aliases generated are all different.
    for (int i = 0; i < 4096; i++)
    {
        unsigned current_seed = next_seed();
        EXPECT_GE(0xfffU, current_seed);
        EXPECT_FALSE(seen_seeds[current_seed]);
        seen_seeds[current_seed] = true;
    }
    // And then we find a repeat.
    EXPECT_TRUE(seen_seeds[next_seed()]);
}

TEST_F(AsyncAliasAllocatorTest, DifferentGenerated)
{
    set_seed(0x555);
    AliasAllocator other(TEST_NODE_ID + 13, ifCan_.get());
    set_seed(0x555, &other);
    // Checks that the two alias allocators generate different values after a
    // conflict.
    EXPECT_NE(next_seed(), next_seed(&other));
    EXPECT_NE(next_seed(), next_seed(&other));
    // Makes sure 'other' disappears from the executor before destructing it.
    wait();
}

TEST_F(AsyncAliasAllocatorTest, BulkFew)
{
    generate_aliases(ifCan_->alias_allocator(), 5);
    expect_cid(aliases_.begin(), aliases_.end());
    LOG(INFO, "invoke");
    auto start_time = os_get_time_monotonic();
    auto invocation = invoke_flow_nowait(bulkAllocator_.get(), 5);
    wait();
    LOG(INFO, "expect RIDs");
    clear_expect(true);
    expect_rid(aliases_.begin(), aliases_.end());
    LOG(INFO, "wait for complete");
    invocation->wait();
    wait();
    clear_expect(true);
    auto end_time = os_get_time_monotonic();
    EXPECT_LT(MSEC_TO_NSEC(200), end_time - start_time);
}

TEST_F(AsyncAliasAllocatorTest, BulkConflict)
{
    generate_aliases(ifCan_->alias_allocator(), 7);
    clear_expect(true);
    expect_cid(aliases_.begin(), aliases_.begin() + 5);
    LOG(INFO, "invoke");
    auto invocation = invoke_flow_nowait(bulkAllocator_.get(), 5);
    wait();
    LOG(INFO, "send conflicts");
    clear_expect(true);
    expect_cid(aliases_.begin() + 5, aliases_.end());
    send_packet(StringPrintf(":X10700%03XN;", aliases_[0]));
    send_packet(StringPrintf(":X10700%03XN;", aliases_[1]));
    wait();
    usleep(10000);
    wait();
    LOG(INFO, "expect RIDs");
    clear_expect(true);
    expect_rid(aliases_.begin() + 2, aliases_.end());
    LOG(INFO, "wait for complete");
    invocation->wait();
    clear_expect(true);
}

TEST_F(AsyncAliasAllocatorTest, BulkMany)
{
    clear_expect(true);
    generate_aliases(ifCan_->alias_allocator(), 150);
    expect_cid(aliases_.begin(), aliases_.end());
    expect_rid(aliases_.begin(), aliases_.end());
    LOG(INFO, "invoke");
    auto invocation = invoke_flow_nowait(bulkAllocator_.get(), 150);
    wait();
    LOG(INFO, "wait for complete");
    invocation->wait();
    clear_expect(true);
}

} // namespace openlcb
