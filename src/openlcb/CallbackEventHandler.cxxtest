#include "utils/async_if_test_helper.hxx"

#include "openlcb/CallbackEventHandler.hxx"

namespace openlcb
{

void PrintTo(const EventRegistryEntry &entry, ::std::ostream *os)
{
    *os << "EventRegistryEntry for event 0x"
        << StringPrintf("%016" PRIx64, entry.event) << ", user arg "
        << StringPrintf("%" PRIx32, entry.user_arg);
}

namespace
{

class CallbackMock
{
public:
    MOCK_METHOD3(report, void(const EventRegistryEntry &registry_entry,
                             EventReport *report, BarrierNotifiable *done));
    MOCK_METHOD2(get_state, EventState(const EventRegistryEntry &registry_entry,
                                EventReport *report));
};

class CallbackHandlerTest : public AsyncNodeTest
{
protected:
    CallbackHandlerTest()
        : handler_(node_,
              std::bind(&CallbackMock::report, &mock_, std::placeholders::_1,
                       std::placeholders::_2, std::placeholders::_3),
              std::bind(&CallbackMock::get_state, &mock_, std::placeholders::_1,
                       std::placeholders::_2))
    {
    }

    static const EventId EVENT1 = 0x0501010118370203ULL;
    static const EventId EVENT2 = 0x0501010118378888ULL;
    StrictMock<CallbackMock> mock_;
    CallbackEventHandler handler_;
};

/// Checks that the lower bits of the event registry entry is the given.
MATCHER_P(IsRegistryEntry, id_bits, "")
{
    uint32_t expected_bits(id_bits);
    return (arg.user_arg & CallbackEventHandler::USER_BIT_MASK) ==
        (expected_bits & CallbackEventHandler::USER_BIT_MASK);
}

TEST_F(CallbackHandlerTest, CreateDestroy)
{
    handler_.add_entry(EVENT1, CallbackEventHandler::IS_PRODUCER);
}

TEST_F(CallbackHandlerTest, Register)
{
    handler_.add_entry(EVENT1, CallbackEventHandler::IS_PRODUCER);
    wait();
    EXPECT_CALL(mock_, get_state(_, _)).WillOnce(Return(EventState::VALID));
    send_packet_and_expect_response(
        ":X19914377N0501010118370203;", ":X1954422AN0501010118370203;");
}

TEST_F(CallbackHandlerTest, HandleEvent)
{
    handler_.add_entry(EVENT1, CallbackEventHandler::IS_PRODUCER | 13);
    handler_.add_entry(EVENT2, CallbackEventHandler::IS_CONSUMER |
            CallbackEventHandler::IS_PRODUCER | 4);
    wait();
    EXPECT_CALL(mock_, report(IsRegistryEntry(4), _, _));
    send_packet(":X195B4377N0501010118378888;");
    wait();
}

} // namespace
} // namespace openlcb
