#include "utils/async_datagram_test_helper.hxx"
#include "freertos/bootloader_hal.h"

#define BOOTLOADER_DATAGRAM
#include "openlcb/Bootloader.hxx"
#include "openlcb/BootloaderClient.hxx"
#include <string>
#include <functional>

using ::testing::Return;
using ::testing::InvokeWithoutArgs;

extern "C" {
/** This calls into the bootloader main. */
extern void bootloader_entry();

extern Atomic g_bootloader_lock;
}

namespace openlcb
{

extern long long DATAGRAM_RESPONSE_TIMEOUT_NSEC;

namespace
{

class MockBootloaderHAL
{
public:
    MOCK_METHOD0(bootloader_hw_set_to_safe, void());
    MOCK_METHOD0(bootloader_hw_init, void());
    MOCK_METHOD0(request_bootloader, bool());
    MOCK_METHOD0(application_entry, void());
    MOCK_METHOD0(bootloader_reboot, void());
    MOCK_METHOD0(nmranet_nodeid, uint64_t());
    MOCK_METHOD0(nmranet_alias, uint16_t());
    // Argument is the offset from the beginning of virtual_flash.
    MOCK_METHOD1(erase_flash_page, void(uint32_t offset));
    MOCK_METHOD3(write_flash,
        void(uint32_t offset, string payload, uint32_t size_bytes));
};

static MockBootloaderHAL *g_mock_bootloader_hal = nullptr;

#define FLASH_SIZE 13 * 1024
static uint8_t virtual_flash[FLASH_SIZE];
#define APP_HEADER_OFFSET 131 * 4

/** Proxy class for sending canbus traffic to the Bootloader HAL. */
class BootloaderPort : public CanHubPort
{
public:
    BootloaderPort()
        : CanHubPort(&g_service)
    {
        is_waiting_ = false;
    }

    bool is_waiting()
    {
        return is_waiting_;
    }

    virtual Action entry()
    {
        AtomicHolder h(this);
        is_waiting_ = true;
        return wait_and_call(STATE(sent));
    }

    Action sent()
    {
        return release_and_exit();
    }

    bool read_can_frame(struct can_frame *frame)
    {
        {
            AtomicHolder h(this);
            if (is_waiting_)
            {
                *frame = *message()->data();
                is_waiting_ = false;
            }
            else
            {
                return false;
            }
        }
        notify();
        return true;
    }

private:
    /** True if an incoming message is ready for dispatching and the current
     * flow is waiting for a notify. */
    bool is_waiting_ = false;
};

BootloaderPort *g_bootloader_port = nullptr;

extern "C" {

extern volatile unsigned g_bootloader_busy;

void bootloader_led(enum BootloaderLed led, bool value)
{
}

void bootloader_hw_set_to_safe()
{
    g_mock_bootloader_hal->bootloader_hw_set_to_safe();
}
void bootloader_hw_init()
{
    g_mock_bootloader_hal->bootloader_hw_init();
}

bool request_bootloader()
{
    return g_mock_bootloader_hal->request_bootloader();
}

void application_entry()
{
    return g_mock_bootloader_hal->application_entry();
}

void bootloader_reboot()
{
    return g_mock_bootloader_hal->bootloader_reboot();
}

bool read_can_frame(struct can_frame *frame)
{
    return g_bootloader_port->read_can_frame(frame);
}

bool try_send_can_frame(const struct can_frame &frame)
{
    auto *b = can_hub0.alloc();
    *b->data()->mutable_frame() = frame;
    b->data()->skipMember_ = g_bootloader_port;
    can_hub0.send(b);
    return true;
}

void get_flash_boundaries(const void **flash_min, const void **flash_max,
    const struct app_header **app_header)
{
    *flash_min = virtual_flash;
    *flash_max = virtual_flash + FLASH_SIZE;
    *app_header = reinterpret_cast<const struct app_header *>(
        &virtual_flash[APP_HEADER_OFFSET]);
}

/** Rounds a flash address into a flash page.
 *
 * @param address is the address for which the page information is queried.
 * @param page_start will be set to the first byte of that page.
 * @param page_length_bytes is set to the number of bytes in that flash page.
 *
 * In other words, *page_start <= address < (*page_start + *page_length_bytes).
 */
void get_flash_page_info(
    const void *address, const void **page_start, uint32_t *page_length_bytes)
{
    // Simulates a flat 1KB page structure.
    uintptr_t value = reinterpret_cast<uintptr_t>(address);
    value -= reinterpret_cast<uintptr_t>(&virtual_flash[0]);
    value &= ~1023;
    *page_start = &virtual_flash[value];
    *page_length_bytes = 1024;
}

/** Erases the flash page at a specific address. Blocks the caller until the
 * flash erase is successful. (Microcontrollers often cannot execute code while
 * the flash is being written or erased, so a polling mechanism would not help
 * here too much.)
 *
 * @param address is the start address of a valid page, as returned by
 * get_flash_page_info.
 */
void erase_flash_page(const void *address)
{
    uint8_t *dest = (uint8_t *)address;
    // Actually clears the page in the virtual flash.
    const void *page_start;
    uint32_t page_length;
    get_flash_page_info(address, &page_start, &page_length);
    ASSERT_EQ(address, page_start);

    ASSERT_LE(&virtual_flash[0], dest);
    ASSERT_GE(&virtual_flash[FLASH_SIZE], &dest[page_length]);
    memset(dest, 0xff, page_length);

    g_mock_bootloader_hal->erase_flash_page(dest - virtual_flash);
}

void write_flash(const void *address, const void *data, uint32_t size_bytes)
{
    uint8_t *dest = (uint8_t *)address;
    ASSERT_LE(&virtual_flash[0], dest);
    ASSERT_GE(&virtual_flash[FLASH_SIZE], &dest[size_bytes]);
    memcpy(dest, data, size_bytes);
    string payload(static_cast<const char *>(data), size_bytes);

    g_mock_bootloader_hal->write_flash(
        dest - virtual_flash, payload, size_bytes);
}

uint16_t nmranet_alias()
{
    return g_mock_bootloader_hal->nmranet_alias();
}

extern uint64_t nmranet_nodeid()
{
    return g_mock_bootloader_hal->nmranet_nodeid();
}

void checksum_data(const void *data, uint32_t size, uint32_t *checksum)
{
    string data_copy(reinterpret_cast<const char *>(data), size);
    std::hash<string> obj;
    checksum[0] = obj("sd1" + data_copy);
    checksum[1] = obj("xar" + data_copy);
    checksum[2] = obj("o33" + data_copy);
    checksum[3] = 0;
    if (0)
    {
        fprintf(stderr, "Checksum %p-> %5d : %08x%08x%08x%08x\n", data, size,
            checksum[0], checksum[1], checksum[2], checksum[3]);
    }
}

/** This calls into the bootloader main. */
extern void bootloader_entry();
extern bool check_application_checksum();
}

class BootloaderTestBase
{
protected:
    BootloaderTestBase()
    {
        g_mock_bootloader_hal = &mock_;
        memset(virtual_flash, 0, FLASH_SIZE);
        can_hub0.register_port(&can_port_);
        g_bootloader_port = &can_port_;

        EXPECT_CALL(mock_, nmranet_alias()).WillRepeatedly(Return(0x428));
        EXPECT_CALL(mock_, nmranet_nodeid())
            .WillRepeatedly(Return(0x05010101146CULL));
    }

    ~BootloaderTestBase()
    {
        wait_for_main_executor();
        g_bootloader_port = nullptr;
        can_hub0.unregister_port(&can_port_);
        g_mock_bootloader_hal = nullptr;
        memset(virtual_flash, 0, FLASH_SIZE);
    }

    void create_correct_checksum(uint32_t total_size)
    {
        ASSERT_GE(total_size, APP_HEADER_OFFSET + sizeof(struct app_header));
        ASSERT_GE(FLASH_SIZE, total_size);
        struct app_header *hdr = reinterpret_cast<struct app_header *>(
            &virtual_flash[APP_HEADER_OFFSET]);
        checksum_data(virtual_flash, APP_HEADER_OFFSET, hdr->checksum_pre);
        checksum_data(
            virtual_flash + APP_HEADER_OFFSET + sizeof(struct app_header),
            total_size - APP_HEADER_OFFSET - sizeof(struct app_header),
            hdr->checksum_post);
        hdr->app_size = total_size;
    }

    void expect_boot(bool request_bootloader)
    {
        ::testing::InSequence seq;
        EXPECT_CALL(mock_, bootloader_hw_set_to_safe());
        EXPECT_CALL(mock_, bootloader_hw_init());
        EXPECT_CALL(mock_, request_bootloader())
            .WillOnce(Return(request_bootloader));
    }

    void fill_flash_random(uint32_t size)
    {
        for (uint32_t i = 0; i < size; ++i)
        {
            int rval = rand();
            rval ^= rval >> 16;
            rval ^= rval >> 8;
            virtual_flash[i] = rval & 0xff;
        }
    }

    string get_block(unsigned int seed, size_t length)
    {
        string ret;
        for (size_t i = 0; i < length; ++i)
        {
            ret.push_back(rand_r(&seed) & 0xff);
        }
        return ret;
    }

    static void *bootloader_thread(void *arg)
    {
        BootloaderTestBase *t = static_cast<BootloaderTestBase *>(arg);
        bootloader_entry();
        t->running_ = false;
        t->bootloader_exited_.notify();
        return nullptr;
    }

    void run_bootloader()
    {
        running_ = true;
        g_bootloader_busy = 1;
        os_thread_create(&bootloader_thread_, "bootloader", 0, 0,
            &BootloaderTestBase::bootloader_thread, this);
    }

    SyncNotifiable bootloader_exited_;
    os_thread_t bootloader_thread_ = 0;
    bool running_ = false;
    ::testing::StrictMock<MockBootloaderHAL> mock_;
    BootloaderPort can_port_;
};

class BootloaderTest : public AsyncCanTest, protected BootloaderTestBase
{
protected:
    ~BootloaderTest()
    {
        // wait_for_main_executor();
        if (running_)
        {
            wait();
        }
        // usleep(
        wait_for_main_executor();
    }

    class Guard : private StateFlowBase
    {
    public:
        Guard(BootloaderTest *parent)
            : StateFlowBase(&g_service)
            , timer_(this)
            , parent_(parent)
        {
        }

        Action test()
        {
            AtomicHolder h(&g_bootloader_lock);
            if (!g_executor.empty() || g_bootloader_busy ||
                parent_->can_port_.is_waiting())
            {
                return call_immediately(STATE(sleep_some));
            }
            set_terminated();
            block_.notify();
            return wait();
        }

        Action sleep_some()
        {
            return sleep_and_call(&timer_, USEC_TO_NSEC(100), STATE(test));
        }

        void wait_for_guard()
        {
            start_flow(STATE(test));
            block_.wait_for_notification();
        }

    private:
        StateFlowTimer timer_;
        BootloaderTest *parent_;
        SyncNotifiable block_;
    } guard_{this};

    void wait()
    {
        guard_.wait_for_guard();
    }

    void sync_run_bootloader()
    {
        run_bootloader();
        wait_for_bootloader_exit();
    }

    void wait_for_bootloader_exit()
    {
        wait();
        bootloader_exited_.wait_for_notification();
    }

    void exit_bootloader()
    {
        wait();
        EXPECT_CALL(mock_, bootloader_reboot());
        expect_packet(":X19A28428N0111;");
        send_packet(":X1A428111N20A9;");
        wait();
    }

    void expect_startup_packets()
    {
        expect_packet(":X17050428N;");
        expect_packet(":X16101428N;");
        expect_packet(":X15011428N;");
        expect_packet(":X1446C428N;");
        expect_packet(":X10700428N;");
        expect_packet(":X10701428N05010101146C;");
        expect_packet(":X19100428N05010101146C;");
    }

    void proper_startup()
    {
        expect_boot(true);
        EXPECT_CALL(mock_, application_entry()).Times(0);
        expect_startup_packets();
        run_bootloader();
        wait();
        clear_expect(true);
    }

    void write_dg_at_offset(uint32_t offset, string payload)
    {
        // expect datagram ok
        expect_packet(":X19A28428N0321;");

        string packet = StringPrintf(":X1%c428321N2000%08" PRIx32 "EF",
            payload.size() > 1 ? 'B' : 'A', offset);
        if (!payload.empty())
        {
            packet += StringPrintf("%02x", payload[0]);
        }
        packet += ";";
        send_packet(packet);

        unsigned i = 1;
        while (i < payload.size())
        {
            packet = StringPrintf(
                ":X1%c428321N", i + 8 >= payload.size() ? 'D' : 'C');
            for (int j = 0; j < 8 && i < payload.size(); ++j, ++i) {
                packet += StringPrintf("%02x", payload[i]);
            }
            packet += ";";
            send_packet(packet);
        }
    }

    /** Sends a memory config write stream request fo rthe given offset, and
     * puts in expectations on responses.
     *
     * @param offset is an 8-character string with the hex address in
     * big-endian.*/
    void initiate_stream_write(string offset)
    {
        // expect datagram ok
        expect_packet(":X19A28428N0321;");
        // and expect response datagram
        expect_packet(StringPrintf(":X1A321428N2030%sEF;", offset.c_str()))
            .WillOnce(InvokeWithoutArgs([this]
                {
                    send_packet(":X19A28321N0428;");
                }));
        send_packet(StringPrintf(":X1A428321N2020%sEF1A;", offset.c_str()));
        wait();
        clear_expect(true);
    }

    /** Sends a stream setup request and expects correct response. */
    void setup_stream_request()
    {
        // Sends stream setup request.
        expect_packet(":X19868428N0321008080001A5A;");
        send_packet(":X19CC8321N0428008000001A;");
        wait();
        clear_expect(true);
    }

    string create_stream_packet(const string &bytes)
    {
        string packet = ":X1F428321N5A";
        for (unsigned i = 0; i < bytes.size(); ++i)
        {
            packet += StringPrintf("%02x", (uint8_t)bytes[i]);
        }
        packet += ";";
        return packet;
    }

    void start_block(unsigned int seed, size_t length)
    {
        current_block_ = get_block(seed, length);
        block_ofs_ = 0;
        while (block_ofs_ + 7 < current_block_.size())
        {
            send_packet(
                create_stream_packet(current_block_.substr(block_ofs_, 7)));
            block_ofs_ += 7;
        }
    }

    void finish_block()
    {
        send_packet(create_stream_packet(current_block_.substr(
            block_ofs_, current_block_.size() - block_ofs_)));
        // clear_expect(true);
    }

    string current_block_;
    unsigned block_ofs_;
};

TEST_F(BootloaderTest, CallsHardwareSetupAndNoEntry)
{
    expect_any_packet();
    {
        ::testing::InSequence seq;
        EXPECT_CALL(mock_, bootloader_hw_set_to_safe());
        EXPECT_CALL(mock_, bootloader_hw_init());
        EXPECT_CALL(mock_, request_bootloader()).WillOnce(Return(false));
    }
    // The checksum should fail, so no entry to the application!
    EXPECT_CALL(mock_, application_entry()).Times(0);
    EXPECT_FALSE(check_application_checksum());
    run_bootloader();
    exit_bootloader();
    wait_for_bootloader_exit();
}

TEST_F(BootloaderTest, StartAppIfChecksumOk)
{
    create_correct_checksum(3756);
    EXPECT_TRUE(check_application_checksum());
    expect_boot(false);
    EXPECT_CALL(mock_, application_entry()).Times(1);
    bootloader_entry();
}

TEST_F(BootloaderTest, NoStartAppIfButtonPressed)
{
    expect_any_packet();
    fill_flash_random(3756);
    create_correct_checksum(3756);
    EXPECT_TRUE(check_application_checksum());
    expect_boot(true);
    EXPECT_CALL(mock_, application_entry()).Times(0);
    run_bootloader();
    exit_bootloader();
}

TEST_F(BootloaderTest, NoStartAppIfChecksumTampered)
{
    expect_any_packet();
    fill_flash_random(3756);
    create_correct_checksum(3756);
    EXPECT_TRUE(check_application_checksum());
    expect_boot(false);
    virtual_flash[843] = 0xff;
    EXPECT_FALSE(check_application_checksum());
    EXPECT_CALL(mock_, application_entry()).Times(0);
    run_bootloader();
    exit_bootloader();
}

TEST_F(BootloaderTest, WelcomeMessageArrives)
{
    proper_startup();
    exit_bootloader();
}

TEST_F(BootloaderTest, Reset)
{
    proper_startup();

    wait();
    EXPECT_CALL(mock_, bootloader_reboot());
    expect_packet(":X19A28428N0111;");
    send_packet(":X1A428111N20A9;");
}

TEST_F(BootloaderTest, Unfreeze)
{
    proper_startup();

    wait();
    EXPECT_CALL(mock_, bootloader_reboot());
    expect_packet(":X19A28428N0111;");
    // Unfreeze on the proper space ID is equivalent to reboot.
    send_packet(":X1A428111N20A0EF;");
}

TEST_F(BootloaderTest, BadUnfreeze)
{
    proper_startup();

    wait();
    expect_packet(":X19A48428N01111010;");
    // Unfreeze for a wrong space number causes error response.
    send_packet(":X1A428111N20A0EE;");
    wait();

    exit_bootloader();
}

TEST_F(BootloaderTest, FreezeWillReboot)
{
    proper_startup();

    wait();
    // Freeze on the proper space ID will start the bootloader again. It will
    // not, however, call bootloader_reboot().
    expect_startup_packets();
    send_packet(":X1A428111N20A1EF;");

    exit_bootloader();
}

TEST_F(BootloaderTest, PIPReply)
{
    proper_startup();
    // No stream support in reply.
    expect_packet(":X19668428N0321500010000000;");
    send_packet(":X19828321N0428;");
    wait();
    Mock::VerifyAndClear(&canBus_);

    exit_bootloader();
}

TEST_F(BootloaderTest, StartWriteAtOffsetZero1)
{
    print_all_packets();
    proper_startup();
    
    wait();
    send_packet(":X1B428321N200000000000EF30;");

    exit_bootloader();
}

TEST_F(BootloaderTest, StartWriteAtOffsetZero)
{
    print_all_packets();
    proper_startup();
    
    string payload = "0123456";
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, WriteOneByte)
{
    print_all_packets();
    proper_startup();
    
    string payload = "0";
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, WriteNineBytes)
{
    print_all_packets();
    proper_startup();
    
    string payload = "123456789";
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, WriteElevenBytes)
{
    print_all_packets();
    proper_startup();
    
    string payload = "12345678901";
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, WriteThreeBlocks)
{
    print_all_packets();
    proper_startup();
    
    string payload = "12345678901234567";
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, WriteOne64ByteBlock)
{
    print_all_packets();
    proper_startup();
    
    string payload;
    for (int i = 0; i < 64; ++i) payload.push_back('a' + i % 10);
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, WriteThree64ByteBlock)
{
    print_all_packets();
    proper_startup();
    
    string payload;
    for (int i = 0; i < 64; ++i) payload.push_back('a' + i % 10);
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, payload, payload.size()));
    write_dg_at_offset(0, payload);

    wait();

    payload.clear();
    for (int i = 0; i < 64; ++i) payload.push_back('f' + i % 10);
    EXPECT_CALL(mock_, write_flash(64, payload, payload.size()));
    write_dg_at_offset(64, payload);

    wait();

    payload = "0123456789012345";
    EXPECT_CALL(mock_, write_flash(128, payload, payload.size()));
    write_dg_at_offset(128, payload);

    exit_bootloader();
}

TEST_F(BootloaderTest, DISABLED_WriteABlock)
{
    print_all_packets();
    proper_startup();

    initiate_stream_write("00000000");
    setup_stream_request();

    string data;
    for (int i = 0; i < 256; i++)
    {
        data.push_back(i & 0xff);
    }
    unsigned ofs = 0;
    expect_packet(":X19888428N03211A5A0000;");
    while (ofs + 7 < data.size())
    {
        send_packet(create_stream_packet(data.substr(ofs, 7)));
        wait();
        ofs += 7;
    }
    EXPECT_CALL(mock_, erase_flash_page(0));
    EXPECT_CALL(mock_, write_flash(0, data, 256));
    expect_packet(":X19888428N03211A5A0000;");
    send_packet(create_stream_packet(data.substr(ofs, data.size() - ofs)));
    wait();
    EXPECT_EQ(data, string((char *)virtual_flash, 256));
    exit_bootloader();
}

TEST_F(BootloaderTest, DISABLED_WriteTwoPages)
{
    proper_startup();
    initiate_stream_write("00000000");
    setup_stream_request();

    string all_data;

    expect_packet(":X19888428N03211A5A0000;").Times(16);
    for (int i = 0; i < 8; ++i)
    {
        start_block(42 * i, 256);
        wait();
        if (i == 0)
        {
            EXPECT_CALL(mock_, erase_flash_page(0));
        }
        else if (i == 4)
        {
            EXPECT_CALL(mock_, erase_flash_page(1024));
        }
        EXPECT_CALL(mock_, write_flash(i * 256, current_block_, 256));
        finish_block();
        wait();
        Mock::VerifyAndClear(&mock_);
        all_data += current_block_;
    }

    EXPECT_EQ(all_data, string((char *)virtual_flash, 2048));
    exit_bootloader();
}

TEST_F(BootloaderTest, DISABLED_FinishStream)
{
    proper_startup();
    initiate_stream_write("00000000");
    setup_stream_request();

    string all_data;

    expect_packet(":X19888428N03211A5A0000;").Times(12);
    for (int i = 0; i < 6; ++i)
    {
        start_block(42 * i, 256);
        wait();
        if (i == 0)
        {
            EXPECT_CALL(mock_, erase_flash_page(0));
        }
        else if (i == 4)
        {
            EXPECT_CALL(mock_, erase_flash_page(1024));
        }
        EXPECT_CALL(mock_, write_flash(i * 256, current_block_, 256));
        finish_block();
        wait();
        Mock::VerifyAndClear(&mock_);
        all_data += current_block_;
    }

    // Partial block
    expect_packet(":X19888428N03211A5A0000;").Times(1);
    start_block(42 * 9, 178);
    wait();
    finish_block();
    wait();
    EXPECT_CALL(mock_, write_flash(6 * 256, current_block_, 178));
    send_packet(":X198A8321N04281A5A0000;");
    all_data += current_block_;
    wait();

    EXPECT_EQ(all_data, string((char *)virtual_flash, 6 * 256 + 178));
    exit_bootloader();
}

TEST_F(BootloaderTest, DISABLED_MultiStream)
{
    proper_startup();
    initiate_stream_write("00000000");
    setup_stream_request();

    string all_data;

    expect_packet(":X19888428N03211A5A0000;").Times(16);
    for (int i = 0; i < 8; ++i)
    {
        start_block(42 * i, 256);
        wait();
        if (i == 0)
        {
            EXPECT_CALL(mock_, erase_flash_page(0));
        }
        else if (i == 4)
        {
            EXPECT_CALL(mock_, erase_flash_page(1024));
        }
        EXPECT_CALL(mock_, write_flash(i * 256, current_block_, 256));
        finish_block();
        wait();
        Mock::VerifyAndClear(&mock_);
        all_data += current_block_;
    }

    // End of stream.
    send_packet(":X198A8321N04281A5A0000;");
    wait();

    initiate_stream_write(StringPrintf("%08x", 2048));
    setup_stream_request();

    expect_packet(":X19888428N03211A5A0000;").Times(16);
    for (int i = 0; i < 8; ++i)
    {
        start_block(45 * i, 256);
        wait();
        if (i == 0)
        {
            EXPECT_CALL(mock_, erase_flash_page(2048));
        }
        else if (i == 4)
        {
            EXPECT_CALL(mock_, erase_flash_page(3072));
        }
        EXPECT_CALL(mock_, write_flash(2048 + i * 256, current_block_, 256));
        finish_block();
        wait();
        Mock::VerifyAndClear(&mock_);
        all_data += current_block_;
    }

    // End of stream.
    send_packet(":X198A8321N04281A5A0000;");
    wait();

    EXPECT_EQ(all_data, string((char *)virtual_flash, 4096));
    exit_bootloader();
}

class BootloaderClientTest : public AsyncDatagramTest,
                             protected BootloaderTestBase
{
protected:
    BootloaderClientTest()
        : client_(node_, &datagram_support_, ifCan_.get())
    {
        mainBufferPool->alloc(&request_);
        request_->data()->response = &response_;
    }

    ~BootloaderClientTest()
    {
        if (request_)
            request_->unref();
        wait_for_main_executor();
    }

    void send()
    {
        request_->set_done(bn_.reset(&n_));
        client_.send(request_);
        request_ = nullptr;
    }

    void startup()
    {
        expect_boot(true);
        EXPECT_CALL(mock_, application_entry()).Times(0);
        expect_packet(":X19100428N05010101146C;");
        run_bootloader();
        while (true) {
            {
                AtomicHolder h(&g_bootloader_lock);
                if (!g_bootloader_busy) break;
            }
            usleep(100);
        }
        wait(); // Sees all generated packets fly by.
    }

    void add_send_expectations(const string &s, unsigned offset = 0)
    {
        testing::InSequence seq;
        for (unsigned i = 0;
             i < (s.size() + sendBlockSize_ - 1) / sendBlockSize_; i++)
        {
            if ((i * sendBlockSize_) % 1024 == 0)
            {
                EXPECT_CALL(
                    mock_, erase_flash_page(i * sendBlockSize_ + offset));
            }
            string expected = s.substr(i * sendBlockSize_, sendBlockSize_);
            EXPECT_CALL(mock_, write_flash(i * sendBlockSize_ + offset,
                                   expected, expected.size()));
        }
        EXPECT_CALL(mock_, bootloader_reboot());
    }

    void wait_for_bootloader_exit()
    {
        wait();
        bootloader_exited_.wait_for_notification();
    }

    void exit_bootloader()
    {
        EXPECT_CALL(mock_, bootloader_reboot());
        expect_packet(":X19A28428N0111;");
        send_packet(":X1A428111N20A9;");
    }

    unsigned sendBlockSize_ = 64;
    BootloaderClient client_;
    Buffer<BootloaderRequest> *request_;
    BootloaderResponse response_;
};

TEST_F(BootloaderClientTest, CreateDestroy)
{
}

TEST_F(BootloaderClientTest, WriteSomeDataNoBootloader)
{
    ScopedOverride ov(&DATAGRAM_RESPONSE_TIMEOUT_NSEC, MSEC_TO_NSEC(100));
    ScopedOverride ov2(&PIP_CLIENT_TIMEOUT_NSEC, MSEC_TO_NSEC(300));
    print_all_packets();
    request_->data()->dst.alias = 0x428;
    request_->data()->memory_space = 0xEF;
    request_->data()->offset = 0;
    request_->data()->request_reboot = 0;
    request_->data()->data = get_block(42, 3500);
    send();
    n_.wait_for_notification();
    EXPECT_NE(0, response_.error_code);
    EXPECT_NE("", response_.error_details);
}

TEST_F(BootloaderClientTest, WriteSmallData)
{
    // print_all_packets();
    expect_any_packet();
    startup();
    expect_packet(":X19100428N05010101146C;");

    request_->data()->dst.id = 0x05010101146C;
    request_->data()->memory_space = 0xEF;
    request_->data()->offset = 0;
    // This test case also causes the bootloader to reboot inside once.
    request_->data()->request_reboot = 1;
    string s = get_block(42, 349);
    request_->data()->data = s;
    add_send_expectations(s);
    send();
    n_.wait_for_notification();
    EXPECT_EQ(0, response_.error_code);
    EXPECT_EQ("", response_.error_details);

    EXPECT_EQ(s, string((char *)virtual_flash, s.size()));

    wait_for_bootloader_exit();
}

TEST_F(BootloaderClientTest, WriteSomeData)
{
    // print_all_packets();
    expect_any_packet();
    startup();
    request_->data()->dst.alias = 0x428;
    request_->data()->memory_space = 0xEF;
    request_->data()->offset = 0;
    request_->data()->request_reboot = 0;
    string s = get_block(42, 3500);
    request_->data()->data = s;
    add_send_expectations(s);
    send();
    n_.wait_for_notification();
    EXPECT_EQ(0, response_.error_code);
    EXPECT_EQ("", response_.error_details);

    EXPECT_EQ(s, string((char *)virtual_flash, s.size()));
    wait_for_bootloader_exit();
}

TEST_F(BootloaderClientTest, WriteAtOffset)
{
    // print_all_packets();
    expect_any_packet();
    startup();
    request_->data()->dst.alias = 0x428;
    request_->data()->memory_space = 0xEF;
    request_->data()->offset = 3 * 1024;
    request_->data()->request_reboot = 0;
    string s = get_block(42, 3500);
    request_->data()->data = s;
    add_send_expectations(s, 3 * 1024);
    send();
    n_.wait_for_notification();
    EXPECT_EQ(0, response_.error_code);
    EXPECT_EQ("", response_.error_details);

    EXPECT_EQ(s, string((char *)&virtual_flash[3 * 1024], s.size()));
    wait_for_bootloader_exit();
}

TEST_F(BootloaderClientTest, FailOnSpaceId)
{
    // print_all_packets();
    expect_any_packet();
    startup();
    request_->data()->dst.alias = 0x428;
    request_->data()->memory_space = 0xF1;
    request_->data()->offset = 3 * 1024;
    request_->data()->request_reboot = 0;
    string s = get_block(42, 100);
    request_->data()->data = s;
    send();
    n_.wait_for_notification();
    EXPECT_NE(0, response_.error_code);
    /// @TODO: the stream test has a different expectation here. why?
    EXPECT_EQ(MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN, response_.error_code);
    EXPECT_EQ(DatagramDefs::PERMANENT_ERROR,
        response_.error_code & DatagramDefs::PERMANENT_ERROR);
    EXPECT_THAT(
        response_.error_details, ::testing::HasSubstr("Write rejected"));

    exit_bootloader();
    wait_for_bootloader_exit();
}

TEST_F(BootloaderClientTest, FindByNodeId)
{
    // print_all_packets();
    expect_any_packet();
    startup();
    request_->data()->dst.id = 0x05010101146C;
    request_->data()->memory_space = 0xEF;
    request_->data()->offset = 0;
    request_->data()->request_reboot = 0;
    string s = get_block(42, 349);
    request_->data()->data = s;
    add_send_expectations(s);
    send();
    n_.wait_for_notification();
    EXPECT_EQ(0, response_.error_code);
    EXPECT_EQ("", response_.error_details);

    EXPECT_EQ(s, string((char *)virtual_flash, s.size()));
    wait_for_bootloader_exit();
}

} // namespace
} // namespace openlcb
