#include "utils/async_if_test_helper.hxx"

#include "openlcb/BroadcastTimeServer.hxx"
#include "os/FakeClock.hxx"

#if 0
#define PRINT_ALL_PACKETS() print_all_packets()
#else
#define PRINT_ALL_PACKETS()
#endif

// test helper
::testing::AssertionResult IsBetweenInclusive(int val, int a, int b)
{
    if((val >= a) && (val <= b))
        return ::testing::AssertionSuccess();
    else
        return ::testing::AssertionFailure()
               << val << " is outside the range " << a << " to " << b;
}

namespace openlcb
{

class BroadcastTimeServerTest : public AsyncNodeTest
{
protected:
    BroadcastTimeServerTest()
    {
        PRINT_ALL_PACKETS();

        ::testing::Sequence s1;

        // consumer/producer identify ranges
        expect_packet(":X1952422AN010100000100FFFF;").InSequence(s1);
        expect_packet(":X194A422AN0101000001008000;").InSequence(s1);

        // sync sequence
        expect_packet(":X1954422AN010100000100F001;").InSequence(s1);
        expect_packet(":X1954422AN0101000001004000;").InSequence(s1);
        expect_packet(":X1954422AN01010000010037B2;").InSequence(s1);
        expect_packet(":X1954422AN0101000001002101;").InSequence(s1);
        expect_packet(":X1954422AN0101000001000000;").InSequence(s1);

        server_ = new BroadcastTimeServer(
            node_, BroadcastTimeDefs::DEFAULT_FAST_CLOCK_ID);

        send_packet(":X19970001N;");
        wait_for_event_thread();


        server_->update_subscribe_add(
            std::bind(&BroadcastTimeServerTest::update_callback, this));

        clear_expect(true);
    }

    ~BroadcastTimeServerTest()
    {
        server_->shutdown();
        wait();
        while (!server_->is_shutdown())
        {
            usleep(10000);
            wait();
        }
        twait();

        delete server_;
    }

    /// Helper function for sleeping.
    /// @param clk fake clock or nullptr if no fake clock exists
    /// @param len_msec how long to sleep
    /// @param step_msec what granularity to use for sleeping wiht fake clock.
    void sleep_helper(FakeClock *clk, unsigned len_msec,
        unsigned step_msec = 50)
    {
        if (clk)
        {
            for (unsigned i = 0; i < len_msec; i += step_msec)
            {
                clk->advance(MSEC_TO_NSEC(step_msec));
                wait();
            }
        }
        else
        {
            usleep(MSEC_TO_USEC(len_msec));
        }
    }

    /// Performs the sleep sequence needed for the server to output the sync
    /// events.
    /// @param clk if not null, uses fake clock to advance.
    /// @param step_msec how big steps should we advance the fake clock.
    void sync_sleep(FakeClock *clk = nullptr, unsigned step_msec = 50)
    {
        // Sleep 3.2 seconds.
        sleep_helper(clk, 3200, step_msec);
    }

    MOCK_METHOD0(update_callback, void());

    BroadcastTimeServer *server_;
};

TEST_F(BroadcastTimeServerTest, Create)
{
    // time is not setup, clock is not running, expect 0 as default
    EXPECT_EQ(server_->time(), 0);
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(server_->day_of_year(), 0);
};

TEST_F(BroadcastTimeServerTest, Time)
{
    expect_any_packet();
    EXPECT_CALL(*this, update_callback()).Times(AtLeast(0));

    // positive rate
    server_->set_rate_quarters(2000);
    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    wait_for_event_thread();

    EXPECT_EQ(server_->time(), 0);
    server_->start();
    usleep(123456);
    EXPECT_EQ(server_->time(), 62);

    // negative rate
    server_->stop();
    server_->set_rate_quarters(-2000);
    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    wait_for_event_thread();

    EXPECT_EQ(server_->time(), 59);
    server_->start();
    usleep(123456);
    EXPECT_EQ(server_->time(), -3);
}

TEST_F(BroadcastTimeServerTest, FastSecToRealNsecPeriod)
{
    long long real_nsec;
    bool result;

    result = server_->fast_sec_to_real_nsec_period(2000, 60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period(-2000, 60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, -120000000LL);

    result = server_->fast_sec_to_real_nsec_period(2000, -60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, -120000000LL);

    result = server_->fast_sec_to_real_nsec_period(-2000, -60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    // boundary check
    result = server_->fast_sec_to_real_nsec_period(0, -60, &real_nsec);
    EXPECT_FALSE(result);
    result = server_->fast_sec_to_real_nsec_period(2048, -60, &real_nsec);
    EXPECT_FALSE(result);
    result = server_->fast_sec_to_real_nsec_period(-2049, -60, &real_nsec);
    EXPECT_FALSE(result);
}

TEST_F(BroadcastTimeServerTest, RealNsecToFastSecPeriod)
{
    time_t fast_sec;
    bool result;

    result = server_->real_nsec_to_fast_sec_period(2000, 1000000000LL,
                                                   &fast_sec);
    EXPECT_TRUE(result);
    EXPECT_EQ(fast_sec, 500);

    result = server_->real_nsec_to_fast_sec_period(-2000, 1000000000LL,
                                                   &fast_sec);
    EXPECT_TRUE(result);
    EXPECT_EQ(fast_sec, -500);

    result = server_->real_nsec_to_fast_sec_period(-2000, -1000000000LL,
                                                   &fast_sec);
    EXPECT_TRUE(result);
    EXPECT_EQ(fast_sec, 500);

    result = server_->real_nsec_to_fast_sec_period(2000, -1000000000LL,
                                                   &fast_sec);
    EXPECT_TRUE(result);
    EXPECT_EQ(fast_sec, -500);

    result = server_->real_nsec_to_fast_sec_period(0, -1000000000LL,
                                                   &fast_sec);
    EXPECT_FALSE(result);
    result = server_->real_nsec_to_fast_sec_period(2048, -1000000000LL,
                                                   &fast_sec);
    EXPECT_FALSE(result);
    result = server_->real_nsec_to_fast_sec_period(-2049, -1000000000LL,
                                                   &fast_sec);
    EXPECT_FALSE(result);
}

TEST_F(BroadcastTimeServerTest, FastSecToRealNsecPeriodAbs)
{
    long long real_nsec;
    bool result;

    expect_any_packet();
    EXPECT_CALL(*this, update_callback()).Times(AtLeast(0));

    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    server_->set_rate_quarters(2000);
    wait_for_event_thread();

    result = server_->fast_sec_to_real_nsec_period_abs(60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);
}

TEST_F(BroadcastTimeServerTest, RealNsecUntilFastTimeAbs)
{
    long long real_nsec;
    bool result;

    expect_any_packet();
    EXPECT_CALL(*this, update_callback()).Times(AtLeast(0));

    // positive rate
    server_->set_rate_quarters(2000);
    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    wait_for_event_thread();

    result = server_->fast_sec_to_real_nsec_period_abs(60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    // now start the clock
    server_->start();
    usleep(123456);

    result = server_->fast_sec_to_real_nsec_period_abs(60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    // negative rate
    server_->stop();
    server_->set_rate_quarters(-2000);
    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    wait_for_event_thread();

    result = server_->fast_sec_to_real_nsec_period_abs(60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(1, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 2000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-1, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 2000000LL);

    // now start the clock
    server_->start();
    usleep(123456);

    result = server_->fast_sec_to_real_nsec_period_abs(60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-60, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 120000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(1, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 2000000LL);

    result = server_->fast_sec_to_real_nsec_period_abs(-1, &real_nsec);
    EXPECT_TRUE(result);
    EXPECT_EQ(real_nsec, 2000000LL);

}

TEST_F(BroadcastTimeServerTest, SleepTest)
{
    FakeClock clk;
    long long t1 = os_get_time_monotonic();
    sync_sleep(&clk);
    long long t2 = os_get_time_monotonic();
    EXPECT_NEAR(t2-t1, MSEC_TO_NSEC(3200), USEC_TO_NSEC(1));
};

TEST_F(BroadcastTimeServerTest, Query)
{
    FakeClock clk;
    ::testing::Sequence s1;

    send_packet(":X195B4001N010100000100F000;"); // query
    wait();

    clear_expect(true);
    // The server only responds a bit later in case multiple queries arrive.
    
    // sync response
    expect_packet(":X1954422AN010100000100F001;").InSequence(s1);
    expect_packet(":X1954422AN0101000001004000;").InSequence(s1);
    expect_packet(":X1954422AN01010000010037B2;").InSequence(s1);
    expect_packet(":X1954422AN0101000001002101;").InSequence(s1);
    expect_packet(":X1954422AN0101000001000000;").InSequence(s1);

    clk.advance(MSEC_TO_NSEC(400));
    wait();

    // time is not setup, clock is not running, expect 0 as default
    EXPECT_EQ(server_->time(), 0);
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(server_->day_of_year(), 0);
};

TEST_F(BroadcastTimeServerTest, StartSetTime)
{
    FakeClock clk;
    ::testing::Sequence s1, s2;

    // set events
    expect_packet(":X195B422AN0101000001008000;").InSequence(s1);
    expect_packet(":X195B422AN010100000100A101;").InSequence(s1);
    expect_packet(":X195B422AN010100000100B7B2;").InSequence(s1);
    expect_packet(":X195B422AN010100000100C7D0;").InSequence(s1);

    // report events
    expect_packet(":X195B422AN0101000001000000;").InSequence(s1);
    expect_packet(":X195B422AN0101000001002101;").InSequence(s1);
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s1);
    expect_packet(":X195B422AN01010000010047D0;").InSequence(s1);
    EXPECT_CALL(*this, update_callback()).Times(4);

    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    server_->set_rate_quarters(2000);
    wait_for_event_thread();

    clear_expect(true);

    // start
    expect_packet(":X195B422AN010100000100F002;").InSequence(s2);

    // sync sequence
    expect_packet(":X1954422AN010100000100F002;").InSequence(s2);
    expect_packet(":X1954422AN01010000010047D0;").InSequence(s2);
    expect_packet(":X1954422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X1954422AN0101000001002101;").InSequence(s2);
    expect_packet(":X1954422AN0101000001000019;").InSequence(s2);
    expect_packet(":X195B422AN010100000100001A;").InSequence(s2);

    // callbacks on clock update
    EXPECT_CALL(*this, update_callback()).Times(1);

    LOG(INFO, "start server");
    server_->start();
    wait();
    LOG(INFO, "exec wait done");
    
    // Time for the sync timeout. There are two sleeps there in order to send
    // out two minute events, so we need to sleep twice too.
    clk.advance(MSEC_TO_NSEC(3000));
    wait();
    clk.advance(MSEC_TO_NSEC(200));
    wait();
    
    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 1599, 1602));
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(server_->day_of_year(), 0);
};

TEST_F(BroadcastTimeServerTest, DateRolloverForward)
{
    FakeClock clk;
    ::testing::Sequence s1, s2;

    // set events
    expect_packet(":X195B422AN010100000100973B;").InSequence(s1);
    expect_packet(":X195B422AN010100000100A101;").InSequence(s1);
    expect_packet(":X195B422AN010100000100B7B2;").InSequence(s1);
    expect_packet(":X195B422AN010100000100C7D0;").InSequence(s1);

    // report events
    expect_packet(":X195B422AN010100000100173B;").InSequence(s1);
    expect_packet(":X195B422AN0101000001002101;").InSequence(s1);
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s1);
    expect_packet(":X195B422AN01010000010047D0;").InSequence(s1);

    EXPECT_CALL(*this, update_callback()).Times(4);

    server_->set_time(23, 59);
    server_->set_date(1, 1);
    server_->set_year(1970);
    server_->set_rate_quarters(2000);
    wait_for_event_thread();

    clear_expect(true);

    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 86340, 86340));
    
    // start
    expect_packet(":X195B422AN010100000100F002;").InSequence(s2);

    // date rollover
    expect_packet(":X195B422AN010100000100F003;").InSequence(s2);
    expect_packet(":X195B422AN0101000001000000;").InSequence(s2);

    // sync sequence
    expect_packet(":X1954422AN010100000100F002;").InSequence(s2);
    expect_packet(":X1954422AN01010000010047D0;").InSequence(s2);
    expect_packet(":X1954422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X1954422AN0101000001002102;").InSequence(s2);
    expect_packet(":X1954422AN0101000001000018;").InSequence(s2);

    // date rollover continued
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X195B422AN0101000001002102;").InSequence(s2);

    // sync sequence continued (might come before date rollover continued)
    expect_packet(":X195B422AN0101000001000019;");

    EXPECT_CALL(*this, update_callback()).Times(1);

    server_->start();

    // allow time for the sync timeout
    
    /// @todo this does not pass when using more than one msec of granularity
    /// for the fake clock advances. That suggests there is an off by one bug
    /// somewhere. The reported time is one tick lower than how much the
    /// faketime advanced.
    sync_sleep(&clk, 1);

    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 87940, 87941));
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::FRIDAY);
    EXPECT_EQ(server_->day_of_year(), 1);
};

TEST_F(BroadcastTimeServerTest, DateRolloverForwardOnTopOfSync)
{
    FakeClock clk;
    ::testing::Sequence s1, s2, s3;

    // set events
    expect_packet(":X195B422AN0101000001009739;").InSequence(s1);
    expect_packet(":X195B422AN010100000100A101;").InSequence(s1);
    expect_packet(":X195B422AN010100000100B7B2;").InSequence(s1);
    expect_packet(":X195B422AN010100000100C7D0;").InSequence(s1);

    // report events
    expect_packet(":X195B422AN0101000001001739;").InSequence(s1);
    expect_packet(":X195B422AN0101000001002101;").InSequence(s1);
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s1);
    expect_packet(":X195B422AN01010000010047D0;").InSequence(s1);

    EXPECT_CALL(*this, update_callback()).Times(4);

    server_->set_time(23, 57);
    server_->set_date(1, 1);
    server_->set_year(1970);
    server_->set_rate_quarters(2000);
    wait_for_event_thread();

    clear_expect(true);

    // start
    expect_packet(":X195B422AN010100000100F002;").InSequence(s2);

    // date rollover
    expect_packet(":X195B422AN010100000100F003;").InSequence(s3);
    expect_packet(":X195B422AN0101000001000000;").InSequence(s3);

    // sync seqeunce
    expect_packet(":X1954422AN010100000100F002;").InSequence(s2);
    expect_packet(":X1954422AN01010000010047D0;").InSequence(s2);
    expect_packet(":X1954422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X1954422AN0101000001002102;").InSequence(s2);
    expect_packet(":X1954422AN0101000001000016;").InSequence(s2);
    expect_packet(":X195B422AN0101000001000017;").InSequence(s2);

    // date rollover continued
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s3);
    expect_packet(":X195B422AN0101000001002102;").InSequence(s3);

    // callbacks on clock update
    EXPECT_CALL(*this, update_callback()).Times(1);

    server_->start();

    // allow time for the sync timeout
    sync_sleep(&clk, 1);
    wait_for_event_thread();

    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 87820, 87821));
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::FRIDAY);
    EXPECT_EQ(server_->day_of_year(), 1);

    // Clears out timer from queue.
    clk.advance(MSEC_TO_NSEC(200));
    wait();
};
#if 1
TEST_F(BroadcastTimeServerTest, DateRolloverForwardAllEventBasedSetup)
{
    FakeClock clk;
    ::testing::Sequence s1, s2;

    // report events
    expect_packet(":X195B422AN010100000100173B;").InSequence(s1);
    expect_packet(":X195B422AN0101000001002101;").InSequence(s1);
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s1);
    expect_packet(":X195B422AN01010000010047D0;").InSequence(s1);
    EXPECT_CALL(*this, update_callback()).Times(4);

    send_packet(":X195B4001N010100000100973B;"); // set time 23, 59
    send_packet(":X195B4001N010100000100A101;"); // set date 1, 1
    send_packet(":X195B4001N010100000100B7B2;"); // set year 1970
    send_packet(":X195B4001N010100000100C7D0;"); // set rate 2000

    wait_for_event_thread();

    clear_expect(true);

    // start, no expectation

    // date rollover
    expect_packet(":X195B422AN010100000100F003;");
    expect_packet(":X195B422AN0101000001000000;");

    // sync seqeunce
    expect_packet(":X1954422AN010100000100F002;");
    expect_packet(":X1954422AN01010000010047D0;");
    expect_packet(":X1954422AN01010000010037B2;");
    expect_packet(":X1954422AN0101000001002102;");
    expect_packet(":X1954422AN0101000001000018;");

    // date rollover continued
    expect_packet(":X195B422AN01010000010037B2;");
    expect_packet(":X195B422AN0101000001002102;");

    // sync sequence continued (might come before date rollover continued)
    expect_packet(":X195B422AN0101000001000019;");

    EXPECT_CALL(*this, update_callback()).Times(1);

    send_packet(":X195B4001N010100000100F002;"); // start

    // allow time for the sync timeout
    sync_sleep(&clk, 1);
    //usleep(3200000);
    wait_for_event_thread();

    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 87940, 87941));
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::FRIDAY);
    EXPECT_EQ(server_->day_of_year(), 1);
};
#endif
TEST_F(BroadcastTimeServerTest, DateRolloverBackward)
{
    FakeClock clk;
    ::testing::Sequence s1, s2;

    // set events
    expect_packet(":X195B422AN010100000100C830;").InSequence(s1);
    expect_packet(":X195B422AN0101000001008000;").InSequence(s1);
    expect_packet(":X195B422AN010100000100A102;").InSequence(s1);
    expect_packet(":X195B422AN010100000100B7B2;").InSequence(s1);

    // report events
    expect_packet(":X195B422AN0101000001004830;").InSequence(s1);
    expect_packet(":X195B422AN0101000001000000;").InSequence(s1);
    expect_packet(":X195B422AN0101000001002102;").InSequence(s1);
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s1);
    EXPECT_CALL(*this, update_callback()).Times(4);

    server_->set_rate_quarters(-2000);
    server_->set_time(0, 0);
    server_->set_date(1, 2);
    server_->set_year(1970);
    wait_for_event_thread();

    clear_expect(true);

    // start
    expect_packet(":X195B422AN010100000100F002;").InSequence(s2);

    // date rollover
    expect_packet(":X195B422AN010100000100F003;").InSequence(s2);
    expect_packet(":X195B422AN010100000100173B;").InSequence(s2);

    // sync seqeunce
    expect_packet(":X1954422AN010100000100F002;").InSequence(s2);
    expect_packet(":X1954422AN0101000001004830;").InSequence(s2);
    expect_packet(":X1954422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X1954422AN0101000001002101;").InSequence(s2);
    expect_packet(":X1954422AN0101000001001723;").InSequence(s2);

    // date rollover continued
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X195B422AN0101000001002101;").InSequence(s2);

    // sync sequence continued (might come before date rollover continued)
    expect_packet(":X195B422AN0101000001001722;");

    EXPECT_CALL(*this, update_callback()).Times(1);

    server_->start();

    // allow time for the sync timeout
    sync_sleep(&clk, 1);
    wait_for_event_thread();

    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 84857, 84860));
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(server_->day_of_year(), 0);
};

TEST_F(BroadcastTimeServerTest, Subscribe)
{
    FakeClock clk;
    ::testing::Sequence s1, s2;

    // set events
    expect_packet(":X195B422AN0101000001008000;").InSequence(s1);
    expect_packet(":X195B422AN010100000100A101;").InSequence(s1);
    expect_packet(":X195B422AN010100000100B7B2;").InSequence(s1);
    expect_packet(":X195B422AN010100000100C7D0;").InSequence(s1);

    // report events
    expect_packet(":X195B422AN0101000001000000;").InSequence(s1);
    expect_packet(":X195B422AN0101000001002101;").InSequence(s1);
    expect_packet(":X195B422AN01010000010037B2;").InSequence(s1);
    expect_packet(":X195B422AN01010000010047D0;").InSequence(s1);
    EXPECT_CALL(*this, update_callback()).Times(4);

    server_->set_time(0, 0);
    server_->set_date(1, 1);
    server_->set_year(1970);
    server_->set_rate_quarters(2000);
    wait_for_event_thread();

    clear_expect(true);
    clear_expect(true);

    // start
    expect_packet(":X195B422AN010100000100F002;").InSequence(s2);

    // sync seqeunce
    expect_packet(":X1954422AN010100000100F002;").InSequence(s2);
    expect_packet(":X1954422AN01010000010047D0;").InSequence(s2);
    expect_packet(":X1954422AN01010000010037B2;").InSequence(s2);
    expect_packet(":X1954422AN0101000001002101;").InSequence(s2);
    expect_packet(":X1954422AN0101000001000019;").InSequence(s2);
    expect_packet(":X195B422AN010100000100001A;").InSequence(s2);

    // callbacks on clock update
    EXPECT_CALL(*this, update_callback()).Times(1);

    server_->start();

    // allow time for the sync timeout
    sync_sleep(&clk, 1);

    // subscribe to some times
    clear_expect(true);
    expect_packet(":X195B422AN0101000001000032;").InSequence(s2);
    expect_packet(":X195B422AN010100000100003A;").InSequence(s2);
    expect_packet(":X195B422AN010100000100003B;").InSequence(s2);
    expect_packet(":X195B422AN0101000001000100;").InSequence(s2);

    send_packet(":X194C7001N0101000001000032;"); // subscribe to 00:50
    send_packet(":X194C7001N010100000100003A;"); // subscribe to 00:58
    send_packet(":X194C7001N010100000100003B;"); // subscribe to 00:59
    send_packet(":X194C7001N0101000001000100;"); // subscribe to 01:00
    sleep_helper(&clk, 4100, 1);

    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(server_->time(), 3650, 3651));
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(server_->day_of_year(), 0);
};

} // namespace openlcb
