#include "utils/async_if_test_helper.hxx"

#include "openlcb/EventHandler.hxx"
#include "openlcb/EventHandlerTemplates.hxx"

namespace openlcb {

static const uint64_t kEventBase = 0x05010101FFFF0000ULL;

WriteHelper write_helper;

class BitEventPcTest : public AsyncNodeTest {
 protected:
  BitEventPcTest()
      : storage_(0),
        bit_(node_, kEventBase, kEventBase + 1, &storage_, 1),
        pc_(&bit_),
        bit2_(node_, kEventBase + 2, kEventBase + 3, &storage_, 2),
        pc2_(&bit2_) {}

  uint8_t storage_;
  MemoryBit<uint8_t> bit_;
  BitEventPC pc_;
  MemoryBit<uint8_t> bit2_;
  BitEventPC pc2_;
};

TEST_F(BitEventPcTest, SimpleOnOff) {
  storage_ = 0;
  send_packet(":X195B4001N05010101FFFF0000;");
  wait_for_event_thread();
  EXPECT_EQ(1, storage_);

  send_packet(":X195B4001N05010101FFFF0000;");
  wait_for_event_thread();
  EXPECT_EQ(1, storage_);

  send_packet(":X195B4001N05010101FFFF0001;");
  wait_for_event_thread();
  EXPECT_EQ(0, storage_);

  send_packet(":X195B4001N05010101FFFF0002;");
  wait_for_event_thread();
  EXPECT_EQ(2, storage_);

  send_packet(":X195B4001N05010101FFFF0002;");
  wait_for_event_thread();
  EXPECT_EQ(2, storage_);

  send_packet(":X195B4001N05010101FFFF0003;");
  wait_for_event_thread();
  EXPECT_EQ(0, storage_);
}

TEST_F(BitEventPcTest, GlobalIdentify) {
  storage_ = 1;
  expect_packet(":X194C522AN05010101FFFF0001;");
  expect_packet(":X194C422AN05010101FFFF0000;");
  expect_packet(":X194C422AN05010101FFFF0003;");
  expect_packet(":X194C522AN05010101FFFF0002;");
  expect_packet(":X1954522AN05010101FFFF0001;");
  expect_packet(":X1954422AN05010101FFFF0000;");
  expect_packet(":X1954422AN05010101FFFF0003;");
  expect_packet(":X1954522AN05010101FFFF0002;");
  send_packet(":X19970001N;");
  wait_for_event_thread(); Mock::VerifyAndClear(&canBus_);

  storage_ = 2;
  expect_packet(":X194C522AN05010101FFFF0000;");
  expect_packet(":X194C422AN05010101FFFF0001;");
  expect_packet(":X194C422AN05010101FFFF0002;");
  expect_packet(":X194C522AN05010101FFFF0003;");
  expect_packet(":X1954522AN05010101FFFF0000;");
  expect_packet(":X1954422AN05010101FFFF0001;");
  expect_packet(":X1954422AN05010101FFFF0002;");
  expect_packet(":X1954522AN05010101FFFF0003;");
  send_packet(":X19970001N;");
  wait_for_event_thread(); Mock::VerifyAndClear(&canBus_);
}

TEST_F(BitEventPcTest, IdentifyPc) {
  storage_ = 1;
  send_packet_and_expect_response(":X198F4001N05010101FFFF0000;",
                              ":X194C422AN05010101FFFF0000;");
  send_packet_and_expect_response(":X198F4001N05010101FFFF0001;",
                              ":X194C522AN05010101FFFF0001;");
  send_packet_and_expect_response(":X198F4001N05010101FFFF0002;",
                              ":X194C522AN05010101FFFF0002;");
  send_packet_and_expect_response(":X198F4001N05010101FFFF0003;",
                              ":X194C422AN05010101FFFF0003;");
}

class NetworkInitializedBitTest : public AsyncNodeTest {
protected:

    NetworkInitializedBit bit_{node_, kEventBase, kEventBase+1, false};
    BitEventPC pc_{&bit_};
    NetworkInitializedBit bit2_{node_, kEventBase, kEventBase+1, true};
    BitEventPC pc2_{&bit2_};
};

TEST_F(NetworkInitializedBitTest, create) {}

TEST_F(NetworkInitializedBitTest, UninitializedState) {
    // We have not converged yet.
    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_TRUE(bit2_.get_local_state());

    EXPECT_FALSE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());
}

TEST_F(NetworkInitializedBitTest, InitialIdentifyUnknown) {
    expect_packet(":X194C722AN05010101FFFF0000;").Times(2);
    send_packet(":X198F4001N05010101FFFF0000;");
    wait();

    expect_packet(":X194C722AN05010101FFFF0001;").Times(2);
    send_packet(":X198F4001N05010101FFFF0001;");
    wait();

    expect_packet(":X1954722AN05010101FFFF0000;").Times(2);
    send_packet(":X19914001N05010101FFFF0000;");
    wait();

    expect_packet(":X1954722AN05010101FFFF0001;").Times(2);
    send_packet(":X19914001N05010101FFFF0001;");
    wait();

    EXPECT_FALSE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());
}

TEST_F(NetworkInitializedBitTest, InitialGlobalIdentifyUnknown) {
    expect_packet(":X194C722AN05010101FFFF0000;").Times(2);
    expect_packet(":X194C722AN05010101FFFF0001;").Times(2);
    expect_packet(":X1954722AN05010101FFFF0000;").Times(2);
    expect_packet(":X1954722AN05010101FFFF0001;").Times(2);
    send_packet(":X19970001N;");
    wait();

    EXPECT_FALSE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());
}

TEST_F(NetworkInitializedBitTest, LocalSetToExport) {
    bit_.set_state(true);
    EXPECT_TRUE(bit_.get_local_state());
    EXPECT_TRUE(bit_.is_network_state_known());
    bit_.set_state(false);
    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_TRUE(bit_.is_network_state_known());
    // Since we haven't communicated to the bus yet, the other object has not
    // converged.
    EXPECT_TRUE(bit2_.get_local_state());
    EXPECT_FALSE(bit2_.is_network_state_known());

    // Now let's communicate to the network.
    expect_packet(":X195B422AN05010101FFFF0001;");
    pc_.SendEventReport(&write_helper, get_notifiable());
    wait_for_event_thread(); Mock::VerifyAndClear(&canBus_);
    wait_for_notification();

    // Everything has converged.
    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_TRUE(bit2_.is_network_state_known());
    
    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_FALSE(bit2_.get_local_state());

    // Now we get definite answers to the identify queries.
    expect_packet(":X194C522AN05010101FFFF0000;").Times(2);
    expect_packet(":X194C422AN05010101FFFF0001;").Times(2);
    expect_packet(":X1954522AN05010101FFFF0000;").Times(2);
    expect_packet(":X1954422AN05010101FFFF0001;").Times(2);
    send_packet(":X19970001N;");
    wait();
}

TEST_F(NetworkInitializedBitTest, LocalSetToQueryResponse) {
    bit_.set_state(false);
    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_TRUE(bit2_.get_local_state());
    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());

    // Now let's make a query come in that will be answered by bit1.
    expect_packet(":X1954722AN05010101FFFF0000;");
    expect_packet(":X1954522AN05010101FFFF0000;");
    send_packet(":X19914001N05010101FFFF0000;");
    wait();

    // Everything has converged.
    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_TRUE(bit2_.is_network_state_known());
    
    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_FALSE(bit2_.get_local_state());
}

TEST_F(NetworkInitializedBitTest, QueryWithRemoteResponse) {
    EXPECT_FALSE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());
    
    // Send out a query.
    expect_packet(":X1991422AN05010101FFFF0000;");
    pc_.SendQueryProducer(&write_helper, get_notifiable());
    wait_for_notification();
    wait();

    // Response comes back with state==false from someone else on the network.
    send_packet(":X19545001N05010101FFFF0000;");
    wait();
    
    // Everything has converged.
    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_TRUE(bit2_.is_network_state_known());
    
    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_FALSE(bit2_.get_local_state());
}

TEST_F(NetworkInitializedBitTest, Toggle) {
    EXPECT_FALSE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());

    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_TRUE(bit2_.get_local_state());
    EXPECT_EQ(EventState::UNKNOWN, bit_.get_current_state());
    EXPECT_EQ(EventState::UNKNOWN, bit2_.get_current_state());

    bit_.toggle_state();

    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_FALSE(bit2_.is_network_state_known());

    EXPECT_TRUE(bit_.get_local_state());
    EXPECT_TRUE(bit2_.get_local_state());

    EXPECT_EQ(EventState::VALID, bit_.get_current_state());
    EXPECT_EQ(EventState::UNKNOWN, bit2_.get_current_state());

    bit2_.toggle_state();
    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_TRUE(bit2_.is_network_state_known());

    EXPECT_TRUE(bit_.get_local_state());
    EXPECT_FALSE(bit2_.get_local_state());

    EXPECT_EQ(EventState::VALID, bit_.get_current_state());
    EXPECT_EQ(EventState::INVALID, bit2_.get_current_state());

    bit_.toggle_state();
    bit2_.toggle_state();

    EXPECT_TRUE(bit_.is_network_state_known());
    EXPECT_TRUE(bit2_.is_network_state_known());

    EXPECT_FALSE(bit_.get_local_state());
    EXPECT_TRUE(bit2_.get_local_state());

    EXPECT_EQ(EventState::INVALID, bit_.get_current_state());
    EXPECT_EQ(EventState::VALID, bit2_.get_current_state());
}
    

}  // namespace openlcb
