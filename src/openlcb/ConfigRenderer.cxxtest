/** \copyright
 * Copyright (c) 2015, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file ConfigRenderer.cxxtest
 *
 * Unittests for the CDI rendering utilities.
 *
 * @author Balazs Racz
 * @date 6 June 2015
 */

#include "utils/test_main.hxx"

#include "openlcb/ConfigRenderer.hxx"
#include "openlcb/ConfigEntry.hxx"
#include "openlcb/ConfigRepresentation.hxx"
#include "openlcb/SimpleNodeInfoMockUserFile.hxx"

const char *const openlcb::SNIP_DYNAMIC_FILENAME =
    "/dev/null";


extern const openlcb::SimpleNodeStaticValues openlcb::SNIP_STATIC_DATA = {
    4, "Manuf", "XXmodel", "NHWversion", "1.42"};


namespace openlcb
{
namespace
{

TEST(ConfigRenderer, AtomWithoutOptions)
{
    AtomConfigRenderer rnd("int", 3);
    string s;
    rnd.render_cdi(&s, AtomConfigOptions());
    EXPECT_EQ("<int size='3'>\n</int>\n", s);
}

TEST(ConfigRenderer, AtomWithName)
{
    using Name = AtomConfigOptions::Name;
    AtomConfigRenderer rnd("int", 3);
    string s;
    rnd.render_cdi(&s, AtomConfigOptions(Name("foo bar")));
    EXPECT_EQ("<int size='3'>\n<name>foo bar</name>\n</int>\n", s);
}

TEST(ConfigRenderer, AtomWithDescription)
{
    using Description = AtomConfigOptions::Description;
    AtomConfigRenderer rnd("int", 3);
    string s;
    rnd.render_cdi(
        &s, AtomConfigOptions(Description("some long string description")));
    EXPECT_EQ("<int size='3'>\n<description>some long string "
              "description</description>\n</int>\n",
        s);
}

TEST(ConfigRenderer, AtomFull)
{
    using Name = AtomConfigOptions::Name;
    using Description = AtomConfigOptions::Description;
    AtomConfigRenderer rnd("int", 3);
    string s;
    rnd.render_cdi(
        &s, AtomConfigOptions(
                Description("some long string description"), Name("xxxy")));
    EXPECT_EQ(
        "<int size='3'>\n<name>xxxy</name>\n"
        "<description>some long string description</description>\n</int>\n",
        s);
}

TEST(ConfigRenderer, AtomNoSize)
{
    using Name = AtomConfigOptions::Name;
    auto rnd = EventConfigEntry(13).config_renderer();
    string s;
    rnd.render_cdi(&s, AtomConfigOptions(Name("fffoo")));
    EXPECT_EQ("<eventid>\n<name>fffoo</name>\n</eventid>\n", s);
}

TEST(ConfigRenderer, IntWithMax)
{
    using Name = AtomConfigOptions::Name;
    using Max = NumericConfigOptions::Max;
    auto rnd = NumericConfigEntry<uint8_t>(13).config_renderer();
    string s;
    rnd.render_cdi(&s, NumericConfigOptions(Name("fffoo"), Max(21)));
    EXPECT_EQ("<int size='1'>\n<name>fffoo</name>\n<max>21</max>\n</int>\n", s);
}

CDI_GROUP(TestGroup, Name("testgroup"), Description("test group desc"),
          RepName("foorep"), FixedSize(6));
CDI_GROUP_ENTRY(e1, Uint8ConfigEntry, Name("e1"));
CDI_GROUP_ENTRY(e2, Uint16ConfigEntry, Description("e2"));
CDI_GROUP_END();

CDI_GROUP(OtherTestGroup, Name("testgroup"), Description("test group desc"),
    RepName("foorep"), Hidden(true));
CDI_GROUP_ENTRY(e1, Uint8ConfigEntry, Name("e1"));
CDI_GROUP_ENTRY(e2, Uint16ConfigEntry, Description("e2"));
CDI_GROUP_END();

CDI_GROUP(OtherGroup);
CDI_GROUP_END();

static const char TEST_MAP_VALUES[] = R"(
<relation><property>0</property><value>0.125 sec</value></relation>
<relation><property>1</property><value>0.25 sec</value></relation>
<relation><property>2</property><value>0.35 sec</value></relation>
<relation><property>3</property><value>0.5 sec</value></relation>
)";

CDI_GROUP(TestNodeConfig, Name("node_config"));
CDI_GROUP_ENTRY(version, Uint8ConfigEntry, Name("Version"));
CDI_GROUP_ENTRY(test_short, Uint16ConfigEntry, MapValues(TEST_MAP_VALUES));
CDI_GROUP_ENTRY(ogrp, OtherGroup);
CDI_GROUP_ENTRY(test64, Uint64ConfigEntry, Name("64"), Min(12), Max(34));
CDI_GROUP_ENTRY(hidden, TestGroup, Hidden(true));
CDI_GROUP_ENTRY(hidden2, OtherTestGroup);
CDI_GROUP_ENTRY(test32, Uint32ConfigEntry, Default(18));
using TestRepeat = RepeatedGroup<TestGroup, 3>;
CDI_GROUP_ENTRY(testgroup, TestRepeat, Name("testgrouprept"));
CDI_GROUP_ENTRY(last, Uint8ConfigEntry);
CDI_GROUP_END();

TEST(ComplexGroupRender, RenderOk)
{
    const char kExpectedTestNodeCdi[] =
        R"(<group>
<name>node_config</name>
<int size='1'>
<name>Version</name>
</int>
<int size='2'>
<map>
<relation><property>0</property><value>0.125 sec</value></relation>
<relation><property>1</property><value>0.25 sec</value></relation>
<relation><property>2</property><value>0.35 sec</value></relation>
<relation><property>3</property><value>0.5 sec</value></relation>
</map>
</int>
<group>
</group>
<int size='8'>
<name>64</name>
<min>12</min>
<max>34</max>
</int>
<group offset='6'/>
<group offset='3'/>
<int size='4'>
<default>18</default>
</int>
<group replication='3'>
<name>testgrouprept</name>
<description>test group desc</description>
<repname>foorep</repname>
<int size='1'>
<name>e1</name>
</int>
<int size='2'>
<description>e2</description>
</int>
<group offset='3'/>
</group>
<int size='1'>
</int>
</group>
)";
    string s;
    TestNodeConfig cfg(0);
    cfg.config_renderer().render_cdi(&s);
    EXPECT_EQ(kExpectedTestNodeCdi, s);
}


CDI_GROUP(TestNodeConfigWithHiddenRepeatedGroup, Name("node_config"));
CDI_GROUP_ENTRY(version, Uint8ConfigEntry, Name("Version"));
CDI_GROUP_ENTRY(hiddengroup, TestGroup, Hidden(true));
using TestRepeat = RepeatedGroup<TestGroup, 3>;
CDI_GROUP_ENTRY(testgroup, TestRepeat, Hidden(true));
CDI_GROUP_ENTRY(last, Uint8ConfigEntry);
CDI_GROUP_END();

TEST(ComplexGroupRender, HiddenRepeatedGroupRender)
{
    const char kExpectedTestNodeCdi[] =
        R"(<group>
<name>node_config</name>
<int size='1'>
<name>Version</name>
</int>
<group offset='6'/>
<group offset='18'/>
<int size='1'>
</int>
</group>
)";
    string s;
    TestNodeConfigWithHiddenRepeatedGroup cfg(0);
    cfg.config_renderer().render_cdi(&s);
    EXPECT_EQ(kExpectedTestNodeCdi, s);
}


CDI_GROUP(UserIdentificationGroup);
CDI_GROUP_ENTRY(version, Uint8ConfigEntry);
CDI_GROUP_ENTRY(user_name, StringConfigEntry<63>);
CDI_GROUP_ENTRY(user_description, StringConfigEntry<64>);
CDI_GROUP_END();

TEST(StringIdentRender, RenderOk)
{
    const char kExpectedTestNodeCdi[] =
        R"(<group>
<int size='1'>
</int>
<string size='63'>
</string>
<string size='64'>
</string>
</group>
)";
    UserIdentificationGroup cfg(0);
    string s;
    cfg.config_renderer().render_cdi(&s);
    EXPECT_EQ(kExpectedTestNodeCdi, s);
}

CDI_GROUP(TestSegment, Name("testseg"), Description("test seg desc"),
          Segment(17), FixedSize(3));
CDI_GROUP_ENTRY(e1, Uint8ConfigEntry, Name("e1"));
CDI_GROUP_ENTRY(e2, Uint16ConfigEntry, Description("e2"));
CDI_GROUP_END();

CDI_GROUP(ThirdSegment);
CDI_GROUP_ENTRY(first, Uint8ConfigEntry);
CDI_GROUP_END();

CDI_GROUP(TestCdi1, MainCdi());
CDI_GROUP_ENTRY(testseg, TestSegment);
CDI_GROUP_ENTRY(seg3, ThirdSegment, Segment(13), Offset(142), Name("Foo"));
CDI_GROUP_END();

TEST(CdiRender, Render)
{
    string s;
    TestCdi1 cfg(0);
    cfg.config_renderer().render_cdi(&s);
    const char kExpectedTestNodeCdi[] = "<?xml version=\"1.0\"?>" R"data(
<cdi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://openlcb.org/schema/cdi/1/1/cdi.xsd">
<segment space='17'>
<name>testseg</name>
<description>test seg desc</description>
<int size='1'>
<name>e1</name>
</int>
<int size='2'>
<description>e2</description>
</int>
</segment>
<segment space='13' origin='142'>
<name>Foo</name>
<int size='1'>
</int>
</segment>
</cdi>
)data";
    EXPECT_EQ(kExpectedTestNodeCdi, s);
    EXPECT_EQ(1u, cfg.testseg().e2().offset());
}

CDI_GROUP(OtherSegment, Name("testseg"), Description("test seg desc"),
    Segment(12), Offset(33));
CDI_GROUP_ENTRY(e1, Uint8ConfigEntry, Name("e1"));
CDI_GROUP_ENTRY(e2, Uint16ConfigEntry, Description("e2"));
CDI_GROUP_END();


CDI_GROUP(TestCdi2, MainCdi());
CDI_GROUP_ENTRY(ident, Identification);
CDI_GROUP_ENTRY(acdi, Acdi);
CDI_GROUP_ENTRY(userinfo, UserInfoSegment);
CDI_GROUP_ENTRY(testseg, OtherSegment);
CDI_GROUP_END();

TEST(CdiRender, RenderIdent)
{
    string s;
    TestCdi2 cfg(0);
    cfg.config_renderer().render_cdi(&s);
    const char kExpectedTestNodeCdi[] = "<?xml version=\"1.0\"?>" R"data(
<cdi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://openlcb.org/schema/cdi/1/1/cdi.xsd">
<identification>
<manufacturer>Manuf</manufacturer>
<model>XXmodel</model>
<hardwareVersion>NHWversion</hardwareVersion>
<softwareVersion>1.42</softwareVersion>
</identification>
<acdi/>
<segment space='251' origin='1'>
<string size='63'>
<name>User Name</name>
<description>This name will appear in network browsers for the current node.</description>
</string>
<string size='64'>
<name>User Description</name>
<description>This description will appear in network browsers for the current node.</description>
</string>
</segment>
<segment space='12' origin='33'>
<name>testseg</name>
<description>test seg desc</description>
<int size='1'>
<name>e1</name>
</int>
<int size='2'>
<description>e2</description>
</int>
</segment>
</cdi>
)data";
    EXPECT_EQ(kExpectedTestNodeCdi, s);
    EXPECT_EQ(34u, cfg.testseg().e2().offset());
}

} // namespace
} // namespace openlcb
