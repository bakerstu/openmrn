#include "utils/async_traction_test_helper.hxx"
#include "openlcb/TractionTestTrain.hxx"
#include "openlcb/TractionCvSpace.hxx"
#include "openlcb/MemoryConfig.hxx"
#include "openlcb/DatagramCan.hxx"
#include "dcc/PacketFlowInterface.hxx"
#include "dcc/RailcomHub.hxx"

using ::testing::ElementsAre;

namespace openlcb
{

extern Pool *const g_incoming_datagram_allocator = mainBufferPool;

class MockTrackIf : public dcc::PacketFlowInterface
{
public:
    MOCK_METHOD2(packet,
                 void(const vector<uint8_t> &payload, uintptr_t feedback_key));
    void send(Buffer<dcc::Packet> *b, unsigned prio) OVERRIDE
    {
        vector<uint8_t> payload;
        payload.assign(b->data()->payload,
                       b->data()->payload + b->data()->dlc - 1);
        this->packet(payload, b->data()->feedback_key);
    }
};

class TractionCvTestBase : public TractionTest
{
protected:
    TractionCvTestBase()
    {
        run_x([this]() {
            ifCan_->local_aliases()->add(0x0601000000AFULL, 0x272U);
        });
        expect_packet(":X19100272N0601000000AF;");
    }

    ~TractionCvTestBase()
    {
        wait();
    }
};

class TractionCvTest : public TractionCvTestBase
{
protected:
    enum
    {
        TRAIN_NODE_ALIAS = 0x272,
        TRAIN_NODE_ID = 0x0601000000AF
    };

    TractionCvTest()
    {
    }

    ~TractionCvTest()
    {
        wait();
    }

    uintptr_t expected_feedback_key()
    {
        return (uintptr_t)(&cv_space_);
    }

    void send_railcom_response(uintptr_t feedback_key,
                               const vector<uint8_t> &ch2_data)
    {
        auto *b = railcom_hub_.alloc();
        memset((void*)b->data(), 0, sizeof(*b->data()));
        b->data()->feedbackKey = feedback_key;
        b->data()->ch2Size = ch2_data.size();
        memcpy(b->data()->ch2Data, &ch2_data[0], ch2_data.size());
        railcom_hub_.send(b);
    }

    LoggingTrain train_impl_{175};
    TrainNodeForProxy train_node_{&trainService_, &train_impl_};
    CanDatagramService datagram_support_{ifCan_.get(), 10, 2};
    MemoryConfigHandler memory_config_handler_{&datagram_support_, nullptr, 3};
    dcc::RailcomHubFlow railcom_hub_{&g_service};
    StrictMock<MockTrackIf> track_if_;
    TractionCvSpace cv_space_{&memory_config_handler_, &track_if_,
                              &railcom_hub_,           0xEF};
};

TEST_F(TractionCvTest, CreateDestroy)
{
}

TEST_F(TractionCvTest, NonTractionNodeGetsRejected)
{
    send_packet_and_expect_response(":X1A22A883N204000000037EF01;",
                                    ":X19A4822AN08831081;");
}

TEST_F(TractionCvTest, SingleCvRead)
{
    print_all_packets();
    expect_packet(":X19A28272N088380;");
    EXPECT_CALL(track_if_, packet(ElementsAre(0xC0, 0xAF, 0b11100100, 0x37, 0),
                                  expected_feedback_key())).Times(1);
    send_packet(":X1A272883N204000000037EF01;");
    wait();
    Mock::VerifyAndClear(&track_if_);
    expect_packet(":X1A883272N205000000037EFC5;");
    send_railcom_response(expected_feedback_key(), {0b10100101, 0b10100110});
    wait();
    send_packet(":X19A28883N027200;");
    wait();
}

TEST_F(TractionCvTest, SingleCvBusyRetry)
{
    print_all_packets();
    expect_packet(":X19A28272N088380;");
    EXPECT_CALL(track_if_, packet(ElementsAre(0xC0, 0xAF, 0b11100100, 0x37, 0),
                                  expected_feedback_key()));
    send_packet(":X1A272883N204000000037EF01;");
    wait();
    EXPECT_CALL(track_if_, packet(ElementsAre(0xC0, 0xAF, 0b11100100, 0x37, 0),
                                  expected_feedback_key()));
    send_railcom_response(expected_feedback_key(), {0b11100001});
    wait();
    expect_packet(":X1A883272N205000000037EFC5;");
    send_railcom_response(expected_feedback_key(), {0b10100101, 0b10100110});
    wait();
    send_packet(":X19A28883N027200;");
    wait();
}

TEST_F(TractionCvTest, SingleCvWrite)
{
    print_all_packets();
    expect_packet(":X19A28272N088380;");
    EXPECT_CALL(track_if_, packet(ElementsAre(0xC0, 0xAF, 0b11101100, 0x37, 0x5A),
                                  expected_feedback_key())).Times(1);
    send_packet(":X1A272883N200000000037EF5A;");
    wait();
    expect_packet(":X1A883272N201000000037EF;");
    send_railcom_response(expected_feedback_key(), {0b10100101, 0b10100110});
    wait();
    send_packet(":X19A28883N027200;");
    wait();
}

TEST_F(TractionCvTest, IndirectWrite)
{
    print_all_packets();
    send_packet(":X1B272883N20007F000000EF00;");
    expect_packet(":X19A28272N088380;");
    expect_packet(":X1A883272N20107F000000EF;");
    send_packet(":X1D272883N000038;"); // note we write CV 38 ...
    wait();
    send_packet(":X19A28883N027200;");

    EXPECT_CALL(
        // ... to get wire 37
        track_if_, packet(ElementsAre(0xC0, 0xAF, 0b11101100, 0x37, 0x5A),
                          expected_feedback_key()))
        .Times(1);

    expect_packet(":X19A28272N088380;");
    send_packet(":X1A272883N20007F000004EF5A;");
    wait();
    expect_packet(":X1A883272N20107F000004EF;");
    send_railcom_response(expected_feedback_key(), {0b10100101, 0b10100110});
    wait();
    send_packet(":X19A28883N027200;");
    wait();
}

TEST_F(TractionCvTest, IndirectRead)
{
    print_all_packets();

    // Send index.
    send_packet(":X1B272883N20007F000000EF00;");
    expect_packet(":X19A28272N088380;");
    expect_packet(":X1A883272N20107F000000EF;");
    // note we read cv 38 ...
    send_packet(":X1D272883N000038;");
    wait();
    send_packet(":X19A28883N027200;");

    // Send read
    expect_packet(":X19A28272N088380;");
    // ... to get wire 37
    EXPECT_CALL(track_if_, packet(ElementsAre(0xC0, 0xAF, 0b11100100, 0x37, 0),
                                  expected_feedback_key())).Times(1);
    send_packet(":X1A272883N20407F000004EF01;");
    wait();
    expect_packet(":X1A883272N20507F000004EFC5;");
    send_railcom_response(expected_feedback_key(), {0b10100101, 0b10100110});
    wait();
    send_packet(":X19A28883N027200;");
    wait();
}

} // namespace openlcb
