/** \copyright
 * Copyright (c) 2017, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file MemoryConfigClient.cxxtest
 *
 * Unit tests for Memory Config Client
 *
 * @author Balazs Racz
 * @date 4 Feb 2017
 */

#include "openlcb/MemoryConfigClient.hxx"

#include "openlcb/ConfigUpdateFlow.hxx"
#include "openlcb/DatagramCan.hxx"
#include "os/FakeClock.hxx"
#include "utils/ConfigUpdateListener.hxx"

#include "utils/async_datagram_test_helper.hxx"

#include <array>

namespace openlcb
{

static const NodeID TWO_NODE_ID = 0x02010d0000ddULL;

class MockMemorySpaceTimeout : public ReadWriteMemoryBlock
{
public:
    MockMemorySpaceTimeout(void *data, address_t len)
        : ReadWriteMemoryBlock(data, len)
    {
    }

    MOCK_METHOD0(get_read_timeout, DatagramDefs::Flag());
    MOCK_METHOD0(get_write_timeout, DatagramDefs::Flag());

    MOCK_METHOD5(write, size_t(address_t destination, const uint8_t* data,
                               size_t len, errorcode_t* error, Notifiable*));
    MOCK_METHOD5(read, size_t(address_t source, uint8_t* dst, size_t len,
                              errorcode_t* error, Notifiable*));
};

MATCHER_P(NotifyCapture, done, "Capture notifiable for later use")
{
    *done = arg;
    return true;
}

class MemoryConfigClientTest : public AsyncNodeTest
{
public:
    static const MemorySpace::errorcode_t ERROR_AGAIN;

    MemoryConfigClientTest()
    {
        EXPECT_CALL(canBus_, mwrite(":X10701FF2N02010D0000DD;")).Times(1);
        EXPECT_CALL(canBus_, mwrite(":X19100FF2N02010D0000DD;")).Times(1);
        eb_.release_block();
        run_x([this](){ifTwo_.alias_allocator()->TEST_add_allocated_alias(0xFF2);});
        wait();
        memCfg_.registry()->insert(node_, 0x51, &srvSpace_);
        memCfg_.registry()->insert(node_, 0x52, &tSpace_);

        for (unsigned i = 0; i < dataContents_.size(); ++i) {
            dataContents_[i] = i*23;
        }
        init_data_contents2();
    }

    ~MemoryConfigClientTest() {
        wait();
    }

    void init_data_contents2()
    {
        for (unsigned i = 0; i < dataContents2_.size(); ++i) {
            dataContents2_[i] = i*23;
        }

    }

    /** Helper function for testing flow invocations. */
    template <typename... Args>
    BufferPtr<MemoryConfigClientRequest> invoke_client_no_block(Args &&... args)
    {
        BufferPtr<MemoryConfigClientRequest> b(clientTwo_.alloc());
        b->data()->reset(std::forward<Args>(args)...);
        b->data()->done.reset(&n_);
        clientTwo_.send(b->ref());
        wait();
        return b;
    }

    /// Fill in the payload from a read.
    void FillPayload(MemorySpace::address_t offset, uint8_t* dst, size_t len)
    {
        for (size_t i = 0; i < len && (i + offset) < dataContents2_.size(); ++i)
        {
            dst[i] = dataContents2_[i + offset];
        }
    }

    /// Consume the payload from a write.
    void AcceptPayload(
        MemorySpace::address_t offset, const uint8_t* src, size_t len)
    {
        for (size_t i = 0; i < len && (i + offset) < dataContents2_.size(); ++i)
        {
            dataContents2_[i + offset] = src[i];
        }
    }


    BlockExecutor eb_{&g_executor};

    IfCan ifTwo_{&g_executor, &can_hub0, local_alias_cache_size,
        remote_alias_cache_size, local_node_count};
    AddAliasAllocator alloc_{TWO_NODE_ID, &ifTwo_};
    DefaultNode nodeTwo_{&ifTwo_, TWO_NODE_ID};

    CanDatagramService dgService_{ifCan_.get(), 10, 2};
    CanDatagramService dgServiceTwo_{&ifTwo_, 10, 2};

    MemoryConfigHandler memCfg_{&dgService_, node_, 3};
    MemoryConfigHandler memCfgTwo_{&dgServiceTwo_, &nodeTwo_, 3};

    std::array<uint8_t, 231> dataContents_;
    std::array<uint8_t, 24> dataContents2_;
    ReadWriteMemoryBlock srvSpace_{&dataContents_[0], (unsigned)dataContents_.size()};
    StrictMock<MockMemorySpaceTimeout> tSpace_{&dataContents2_[0], (unsigned)dataContents2_.size()};

    MemoryConfigClient clientTwo_{&nodeTwo_, &memCfgTwo_};

    NodeHandle dstThree_{NodeAlias(0x499)};
    SyncNotifiable n_;
};

// This little bit of "magic" helps work around a undefined reference linker
// error that was occurring.
const MemorySpace::errorcode_t MemoryConfigClientTest::ERROR_AGAIN =
    MemorySpace::ERROR_AGAIN;

struct GlobalMock : public Singleton<GlobalMock>
{
    MOCK_METHOD0(reboot, void());
    MOCK_METHOD0(factory_reset, void());
};

extern "C" void reboot()
{
    GlobalMock::instance()->reboot();
}

struct FactoryResetListener : public DefaultConfigUpdateListener
{
    void factory_reset(int fd) override
    {
        GlobalMock::instance()->factory_reset();
    }

    UpdateAction apply_configuration(
        int fd, bool initial_load, BarrierNotifiable *done)
    {
        done->notify();
        return UPDATED;
    }
};

TEST_F(MemoryConfigClientTest, create)
{
}

TEST_F(MemoryConfigClientTest, readTimeout)
{
    using testing::DoAll;
    using testing::WithArgs;
    using testing::SetArgPointee;
    using testing::Sequence;

    Notifiable *done;
    FakeClock clock;
    Sequence s1;


    //
    // Pass back timeout "none". Don't actually wait to timeout.
    //
    expect_any_packet();
    EXPECT_CALL(tSpace_, get_read_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_NONE));
    EXPECT_CALL(tSpace_, read(0, _, 64, _, _))
        .WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::FillPayload)),
            SetArgPointee<3>(MemoryConfigDefs::ERROR_OUT_OF_BOUNDS),
            Return(24)));
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::READ,
                         NodeHandle(TEST_NODE_ID), 0x52);
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents2_.size(), b->data()->payload.size());
    EXPECT_EQ(0, 
        memcmp(&dataContents2_[0], b->data()->payload.data(),
            dataContents2_.size()));
    testing::Mock::VerifyAndClearExpectations(&tSpace_);


    //
    // Pass back timeout "none". Force a timeout (3 seconds).
    //
    expect_any_packet();
    EXPECT_CALL(tSpace_, get_read_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_NONE));
    EXPECT_CALL(tSpace_, read(0, _, 64, _, NotifyCapture(&done)))
        .WillOnce(DoAll(
            SetArgPointee<3>(ERROR_AGAIN),
            Return(0)));
    b = invoke_client_no_block(
        MemoryConfigClientRequest::READ, NodeHandle(TEST_NODE_ID), 0x52);
    wait();
    clock.advance(MSEC_TO_NSEC(2900));
    wait();
    EXPECT_FALSE(clientTwo_.is_waiting());
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    clock.advance(MSEC_TO_NSEC(400));
    wait();
    EXPECT_EQ(Defs::OPENMRN_TIMEOUT, b->data()->resultCode);
    ASSERT_EQ(0U, b->data()->payload.size());
    EXPECT_TRUE(clientTwo_.is_waiting());
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
    expect_any_packet();
    // The code here shows that the memory config handler (on the server side) 
    // does not recover from a memory space timing out and never calls `done`
    // notifiable.
    EXPECT_CALL(tSpace_, read(0, _, 64, _, _))
        .InSequence(s1).WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::FillPayload)),
            Return(24)));
    EXPECT_CALL(tSpace_, read(24, _, 64 - 24, _, _))
        .InSequence(s1).WillOnce(DoAll(
            SetArgPointee<3>(MemoryConfigDefs::ERROR_OUT_OF_BOUNDS),
            Return(0)));
    done->notify();
    wait();
    ASSERT_EQ(0U, b->data()->payload.size());
    testing::Mock::VerifyAndClearExpectations(&tSpace_);


    //
    // Pass back timeout "16 seconds". Wait 15 seconds to reply.
    //
    expect_any_packet();
    EXPECT_CALL(tSpace_, get_read_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_16));
    EXPECT_CALL(tSpace_, read(0, _, 64, _, NotifyCapture(&done)))
        .WillOnce(DoAll(
            SetArgPointee<3>(ERROR_AGAIN),
            Return(0)));
    b = invoke_client_no_block(
        MemoryConfigClientRequest::READ, NodeHandle(TEST_NODE_ID), 0x52);
    wait();
    clock.advance(SEC_TO_NSEC(15));
    wait();
    ASSERT_EQ(0U, b->data()->payload.size());
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
    expect_any_packet();
    EXPECT_CALL(tSpace_, read(0, _, 64, _, _))
        .InSequence(s1).WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::FillPayload)),
            Return(24)));
    EXPECT_CALL(tSpace_, read(24, _, 64 - 24, _, _))
        .InSequence(s1).WillOnce(DoAll(
            SetArgPointee<3>(MemoryConfigDefs::ERROR_OUT_OF_BOUNDS),
            Return(0)));
    done->notify();
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents2_.size(), b->data()->payload.size());
    EXPECT_EQ(0,
        memcmp(&dataContents2_[0], b->data()->payload.data(),
            dataContents2_.size()));
    testing::Mock::VerifyAndClearExpectations(&tSpace_);


    //
    // Pass back timeout "16 seconds". Force a timeout.
    //
    expect_any_packet();
    EXPECT_CALL(tSpace_, get_read_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_NONE));
    EXPECT_CALL(tSpace_, read(0, _, 64, _, NotifyCapture(&done)))
        .WillOnce(DoAll(
            SetArgPointee<3>(ERROR_AGAIN),
            Return(0)));
    b = invoke_client_no_block(
        MemoryConfigClientRequest::READ, NodeHandle(TEST_NODE_ID), 0x52);
    wait();
    clock.advance(MSEC_TO_NSEC(16200));
    wait();
    EXPECT_EQ(Defs::OPENMRN_TIMEOUT, b->data()->resultCode);
    ASSERT_EQ(0U, b->data()->payload.size());
    EXPECT_TRUE(clientTwo_.is_waiting());
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
    expect_any_packet();
    EXPECT_CALL(tSpace_, read(0, _, 64, _, _))
        .InSequence(s1).WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::FillPayload)),
            Return(24)));
    EXPECT_CALL(tSpace_, read(24, _, 64 - 24, _, _))
        .InSequence(s1).WillOnce(DoAll(
            SetArgPointee<3>(MemoryConfigDefs::ERROR_OUT_OF_BOUNDS),
            Return(0)));
    done->notify();
    wait();
    ASSERT_EQ(0U, b->data()->payload.size());
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
}

TEST_F(MemoryConfigClientTest, writeTimeout)
{
    using testing::DoAll;
    using testing::WithArgs;
    using testing::SetArgPointee;

    Notifiable *done;
    FakeClock clock;

    // Initialize test data.
    string test_payload;
    for (size_t i = 0; i < dataContents2_.size(); ++i)
    {
        test_payload.push_back(i + 56);
    }
    EXPECT_NE(0,
        memcmp(&dataContents_[34], test_payload.data(), test_payload.size()));


    //
    // Pass back timeout "none". Don't actually wait to timeout.
    //
    expect_any_packet();
    EXPECT_CALL(tSpace_, get_write_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_NONE));
    EXPECT_CALL(tSpace_, write(0, _, test_payload.size(), _, _))
        .WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::AcceptPayload)),
            Return(test_payload.size())));
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::WRITE,
        NodeHandle(TEST_NODE_ID), 0x52, 0, test_payload);
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents2_.size(), b->data()->payload.size());
    EXPECT_EQ(0,
        memcmp(&dataContents2_[0], test_payload.data(), test_payload.size()));
    testing::Mock::VerifyAndClearExpectations(&tSpace_);


    //
    // Pass back timeout "none". Force a timeout (3 seconds).
    //
    expect_any_packet();
    init_data_contents2();
    EXPECT_CALL(tSpace_, get_write_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_NONE));
    EXPECT_CALL(
        tSpace_, write(0, _, test_payload.size(), _, NotifyCapture(&done)))
            .WillOnce(DoAll(SetArgPointee<3>(ERROR_AGAIN), Return(0)));
    b = invoke_client_no_block(MemoryConfigClientRequest::WRITE,
        NodeHandle(TEST_NODE_ID), 0x52, 0, test_payload);
    wait();
    clock.advance(MSEC_TO_NSEC(2900));
    wait();
    EXPECT_FALSE(clientTwo_.is_waiting());
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    clock.advance(MSEC_TO_NSEC(400));
    wait();
    EXPECT_EQ(Defs::OPENMRN_TIMEOUT, b->data()->resultCode);
    EXPECT_NE(0,
        memcmp(&dataContents2_[0], test_payload.data(), test_payload.size()));
    EXPECT_TRUE(clientTwo_.is_waiting());
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
    EXPECT_NE(0,
        memcmp(&dataContents2_[0], test_payload.data(), test_payload.size()));
    expect_any_packet();
    EXPECT_CALL(tSpace_,
        write(0, _, test_payload.size(), _, _))
        .WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::AcceptPayload)),
            Return(test_payload.size())));
    done->notify();
    wait();
    testing::Mock::VerifyAndClearExpectations(&tSpace_);

    //
    // Pass back timeout "32 seconds". Wait 31 seconds to reply.
    //
    expect_any_packet();
    EXPECT_CALL(tSpace_, get_write_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_32));
    EXPECT_CALL(tSpace_,
        write(0, _, test_payload.size(), _, NotifyCapture(&done)))
        .WillOnce(DoAll(SetArgPointee<3>(ERROR_AGAIN), Return(0)));
    b = invoke_client_no_block(MemoryConfigClientRequest::WRITE,
        NodeHandle(TEST_NODE_ID), 0x52, 0, test_payload);
    wait();
    clock.advance(SEC_TO_NSEC(15));
    wait();
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
    expect_any_packet();
    EXPECT_CALL(tSpace_,
        write(0, _, test_payload.size(), _, _))
        .WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::AcceptPayload)),
            Return(test_payload.size())));
    done->notify();
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents2_.size(), b->data()->payload.size());
    EXPECT_EQ(0,
        memcmp(&dataContents2_[0], test_payload.data(), test_payload.size()));
    testing::Mock::VerifyAndClearExpectations(&tSpace_);


    //
    // Pass back timeout "32 seconds". Force a timeout.
    //
    expect_any_packet();
    init_data_contents2();
    EXPECT_CALL(tSpace_, get_write_timeout())
        .WillRepeatedly(Return(DatagramDefs::TIMEOUT_32));
    EXPECT_CALL(
        tSpace_, write(0, _, test_payload.size(), _, NotifyCapture(&done)))
            .WillOnce(DoAll(SetArgPointee<3>(ERROR_AGAIN), Return(0)));
    b = invoke_client_no_block(MemoryConfigClientRequest::WRITE,
        NodeHandle(TEST_NODE_ID), 0x52, 0, test_payload);
    wait();
    clock.advance(MSEC_TO_NSEC(32200));
    wait();
    EXPECT_EQ(Defs::OPENMRN_TIMEOUT, b->data()->resultCode);
    EXPECT_TRUE(
        memcmp(&dataContents2_[0], test_payload.data(), test_payload.size()));
    EXPECT_TRUE(clientTwo_.is_waiting());
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
    EXPECT_NE(0,
        memcmp(&dataContents2_[0], test_payload.data(), test_payload.size()));
    expect_any_packet();
    EXPECT_CALL(tSpace_,
        write(0, _, test_payload.size(), _, _))
        .WillOnce(DoAll(WithArgs<0, 1, 2>(
                Invoke(this, &MemoryConfigClientTest::AcceptPayload)),
            Return(test_payload.size())));
    done->notify();
    wait();
    testing::Mock::VerifyAndClearExpectations(&tSpace_);
}

TEST_F(MemoryConfigClientTest, readall)
{
    expect_any_packet();
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::READ,
                         NodeHandle(TEST_NODE_ID), 0x51);
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents_.size(), b->data()->payload.size());
    EXPECT_EQ(0, memcmp(&dataContents_[0], b->data()->payload.data(), dataContents_.size()));
}

TEST_F(MemoryConfigClientTest, readpart)
{
    expect_any_packet();
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::READ_PART,
        NodeHandle(TEST_NODE_ID), 0x51, 34, 73);
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(73u, b->data()->payload.size());
    EXPECT_EQ(0, memcmp(&dataContents_[34], b->data()->payload.data(),
                     b->data()->payload.size()));
}

TEST_F(MemoryConfigClientTest, readsmallpart)
{
    expect_any_packet();
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::READ_PART,
        NodeHandle(TEST_NODE_ID), 0x51, 34, 14);
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(14u, b->data()->payload.size());
    EXPECT_EQ(0, memcmp(&dataContents_[34], b->data()->payload.data(),
                     b->data()->payload.size()));
}

// Tests using the MemoryConfigClient to write a payload of more than one
// datagram.
TEST_F(MemoryConfigClientTest, writelarge)
{
    expect_any_packet();
    string test_payload;
    for (int i = 56; i < 56 + 75; ++i)
    {
        test_payload.push_back(i);
    }
    EXPECT_NE(0,
        memcmp(&dataContents_[34], test_payload.data(), test_payload.size()));
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::WRITE,
        NodeHandle(TEST_NODE_ID), 0x51, 34, test_payload);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0,
        memcmp(&dataContents_[34], test_payload.data(), test_payload.size()));
}

// Tests using the MemoryConfigClient to write a payload that fits into one
// datagram.
TEST_F(MemoryConfigClientTest, writesmall)
{
    expect_any_packet();
    string test_payload;
    for (int i = 56; i < 56 + 13; ++i)
    {
        test_payload.push_back(i);
    }
    EXPECT_NE(0,
        memcmp(&dataContents_[34], test_payload.data(), test_payload.size()));
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::WRITE,
        NodeHandle(TEST_NODE_ID), 0x51, 34, test_payload);
    EXPECT_EQ(0, b->data()->resultCode);
    EXPECT_EQ(0,
        memcmp(&dataContents_[34], test_payload.data(), test_payload.size()));
}

TEST_F(MemoryConfigClientTest, unsolicited)
{
    expect_any_packet();
    // Tests that we don't crash if no client is registered and an unsolicited
    // response packet shows up.
    send_packet(":1AFF2123N2050112233;");
    wait();
}

TEST_F(MemoryConfigClientTest, reboot_normal)
{
    twait();
    expect_packet(":X1A499FF2N20A9;");
    auto b =
        invoke_client_no_block(MemoryConfigClientRequest::REBOOT, dstThree_);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    send_packet(":X19A28499N0FF2;");
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_TRUE(b->data()->done.is_done());
}

TEST_F(MemoryConfigClientTest, reboot_timeout)
{
    ScopedOverride ov(&DATAGRAM_RESPONSE_TIMEOUT_NSEC, MSEC_TO_NSEC(100));
    twait();
    expect_packet(":X1A499FF2N20A9;");
    auto b =
        invoke_client_no_block(MemoryConfigClientRequest::REBOOT, dstThree_);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    n_.wait_for_notification();
    ASSERT_TRUE(b->data()->done.is_done());
    EXPECT_EQ(MemoryConfigClient::TIMEOUT, b->data()->resultCode);
}

TEST_F(MemoryConfigClientTest, reboot_reboot)
{
    twait();
    expect_packet(":X1A499FF2N20A9;");
    auto b =
        invoke_client_no_block(MemoryConfigClientRequest::REBOOT, dstThree_);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    send_packet(":X19100499N050101011400;");
    wait(); // we purposefully do not do timed wait here; the init complete
            // message should terminate the timeout timer.
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_TRUE(b->data()->done.is_done());
}

TEST_F(MemoryConfigClientTest, update_complete)
{
    twait();
    expect_packet(":X1A499FF2N20A8;");
    auto b = invoke_client_no_block(
        MemoryConfigClientRequest::UPDATE_COMPLETE, dstThree_);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    send_packet(":X19A28499N0FF2;");
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_TRUE(b->data()->done.is_done());
}

TEST_F(MemoryConfigClientTest, freeze)
{
    twait();
    expect_packet(":X1A499FF2N20A1EA;");
    auto b = invoke_client_no_block(
        MemoryConfigClientRequest::FREEZE, dstThree_, 0xEA);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    send_packet(":X19A28499N0FF2;");
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_TRUE(b->data()->done.is_done());
}

TEST_F(MemoryConfigClientTest, unfreeze)
{
    twait();
    expect_packet(":X1A499FF2N20A0EA;");
    auto b = invoke_client_no_block(
        MemoryConfigClientRequest::UNFREEZE, dstThree_, 0xEA);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);
    send_packet(":X19A28499N0FF2;");
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_TRUE(b->data()->done.is_done());
}

TEST_F(MemoryConfigClientTest, WriteNoReplyPending)
{
    print_all_packets();
    expect_any_packet();
    string test_payload;
    for (int i = 56; i < 56 + 13; ++i)
    {
        test_payload.push_back(i);
    }

    auto b = invoke_client_no_block(MemoryConfigClientRequest::WRITE,
        dstThree_, 0x53, 34, test_payload);
    b->data()->resultCode = 0xAAAA;
    wait();
    send_packet(":X19A28499N0FF200;");
    wait();
    EXPECT_EQ(0, b->data()->resultCode);
}

class FactoryResetTest : public MemoryConfigClientTest
{
protected:
    FactoryResetTest()
    {
        updateFlow_.TEST_set_fd(23);
        eb_.release_block();
        twait();
    }

    ~FactoryResetTest()
    {
        twait();
    }

    StrictMock<GlobalMock> mock_;
    BlockExecutor eb_ {ifCan_->executor()};
    ConfigUpdateFlow updateFlow_ {ifCan_.get()};
    FactoryResetListener l_;
}; // FactoryResetTest

TEST_F(FactoryResetTest, create)
{
}

// Sends a factory reset command to a target represented with a node ID.
TEST_F(FactoryResetTest, send_with_id)
{
    print_all_packets();
    expect_any_packet();
    ::testing::InSequence seq;
    EXPECT_CALL(mock_, factory_reset());
    EXPECT_CALL(mock_, reboot());
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::FACTORY_RESET,
        NodeHandle(TEST_NODE_ID));
    EXPECT_EQ(0, b->data()->resultCode);
}

// Sends a factory reset command to a target represented with a node alias
// only, no ID.
TEST_F(FactoryResetTest, send_with_alias)
{
    print_all_packets();
    expect_any_packet();
    ::testing::InSequence seq;
    EXPECT_CALL(mock_, factory_reset());
    EXPECT_CALL(mock_, reboot());
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::FACTORY_RESET,
        NodeHandle(NodeAlias(0x22A)));
    EXPECT_EQ(0, b->data()->resultCode);
}

// Sends a factory reset command to a the local node.
TEST_F(FactoryResetTest, do_local)
{
    print_all_packets();
    expect_any_packet();
    ::testing::InSequence seq;
    EXPECT_CALL(mock_, factory_reset());
    EXPECT_CALL(mock_, reboot());
    auto b = invoke_flow(&clientTwo_, MemoryConfigClientRequest::FACTORY_RESET,
        NodeHandle(TWO_NODE_ID));
    EXPECT_EQ(0, b->data()->resultCode);
}

// Sends a factory reset command to a remote node by alias, with expectations
// on each packet.
TEST_F(FactoryResetTest, send_alias_lookup)
{
    print_all_packets();
    ::testing::InSequence seq;
    expect_packet(":X19488FF2N0499;"); // looking for dstThree_ node
    auto b = invoke_client_no_block(
        MemoryConfigClientRequest::FACTORY_RESET, dstThree_);
    wait();
    clear_expect(true);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);

    send_packet_and_expect_response( //
        ":X19170499N010203040506;",  //
        ":X1A499FF2N20AA010203040506;");
    clear_expect(true);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);

    // Reject with an error.
    send_packet(":X19A48499N0FF21234;");
    twait();

    EXPECT_EQ(0x1234, b->data()->resultCode);

    EXPECT_CALL(mock_, factory_reset()).Times(0);
    EXPECT_CALL(mock_, reboot()).Times(0);
}

// Sends a factory reset command to a remote node by alias, when there is
// already a cache entry for that remote alias.
TEST_F(FactoryResetTest, cached_alias)
{
    print_all_packets();
    ::testing::InSequence seq;
    // AMD frame to prefill cache.
    send_packet(":X10701499N010203040506;");
    wait();
    // Datagram sent straight away
    expect_packet(":X1A499FF2N20AA010203040506;");
    auto b = invoke_client_no_block(
        MemoryConfigClientRequest::FACTORY_RESET, dstThree_);
    wait();
    clear_expect(true);
    EXPECT_EQ(MemoryConfigClient::OPERATION_PENDING, b->data()->resultCode);

    // Accept with no response pending
    send_packet(":X19A28499N0FF200;");
    twait();

    EXPECT_EQ(0, b->data()->resultCode);

    EXPECT_CALL(mock_, factory_reset()).Times(0);
    EXPECT_CALL(mock_, reboot()).Times(0);
}

TEST_F(MemoryConfigClientTest, factory_reset)
{
}

class MemoryConfigLocalClientTest : public AsyncDatagramTest {
protected:
    ~MemoryConfigLocalClientTest() {
        wait();
    }

    MemoryConfigHandler memCfg_{&datagram_support_, node_, 3};

    std::array<uint8_t, 231> dataContents_;
    ReadWriteMemoryBlock srvSpace_{&dataContents_[0], (unsigned)dataContents_.size()};

    MemoryConfigClient client_{node_, &memCfg_};
};

TEST_F(MemoryConfigLocalClientTest, readfromlocal)
{
    // In this test we read from the local node, to test that the
    // service-client interaction is without any deadlock.
    memCfg_.registry()->insert(node_, 0x52, &srvSpace_);

    expect_any_packet();
    auto b = invoke_flow(&client_, MemoryConfigClientRequest::READ,
                         NodeHandle(node_->node_id()), 0x52);
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents_.size(), b->data()->payload.size());
    EXPECT_EQ(0, memcmp(&dataContents_[0], b->data()->payload.data(), dataContents_.size()));
}

TEST_F(MemoryConfigLocalClientTest, readfromlocalspecialspace)
{
    // In this test we read from the local node, to test that the
    // service-client interaction is without any deadlock. We use a special
    // space number (0xFD to 0xFF) to regression test a bug in the request
    // routing. The bug was that responses for those space numbers were not
    // routed to the client.
    memCfg_.registry()->insert(
        node_, MemoryConfigDefs::SPACE_CONFIG, &srvSpace_);

    expect_any_packet();
    auto b = invoke_flow(&client_, MemoryConfigClientRequest::READ,
        NodeHandle(node_->node_id()), MemoryConfigDefs::SPACE_CONFIG);
    EXPECT_EQ(0, b->data()->resultCode);
    ASSERT_EQ(dataContents_.size(), b->data()->payload.size());
    EXPECT_EQ(0, memcmp(&dataContents_[0], b->data()->payload.data(),
                     dataContents_.size()));
}

} // namespace openlcb
