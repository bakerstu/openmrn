#include "utils/test_main.hxx"

#include "dcc/Packet.hxx"
#include "dcc/Loco.hxx"
#include "dcc/UpdateLoop.hxx"
#include "utils/Crc.hxx"

using ::testing::AtLeast;
using ::testing::ElementsAre;
using ::testing::Mock;
using ::testing::SaveArg;
using ::testing::StrictMock;
using ::testing::_;

namespace dcc
{

class PacketTest : public ::testing::Test
{
protected:
    vector<uint8_t> get_packet()
    {
        return vector<uint8_t>(pkt_.payload + 0, pkt_.payload + pkt_.dlc);
    }

    /// @return true if pkt_ has correct checksum.
    bool check_checksum()
    {
        uint8_t p = 0;
        for (unsigned i = 0; i < pkt_.dlc; i++)
        {
            p ^= pkt_.payload[i];
        }
        return p == 0;
    }

    /// @return true if pkt_ has correct CRC8.
    bool check_crc()
    {
        Crc8DallasMaxim m;
        for (int i = 0; i < pkt_.dlc - 1; i++)
        {
            m.update256(pkt_.payload[i]);
        }
        return m.get() == 0;
    }
    
    vector<uint8_t> packet(const std::initializer_list<int> &data)
    {
        vector<uint8_t> v;
        for (int b : data)
        {
            v.push_back(b & 0xff);
        }
        return v;
    }

    Packet pkt_;
};

TEST_F(PacketTest, ChecksumRegular)
{
    pkt_.dlc = 3;
    pkt_.payload[0] = 0xA0;
    pkt_.payload[1] = 0x53;
    pkt_.payload[2] = 0x0F;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(4, pkt_.dlc);
    EXPECT_EQ(0xFC, pkt_.payload[3]);
}

TEST_F(PacketTest, ChecksumEmpty)
{
    pkt_.dlc = 0;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(1, pkt_.dlc);
    EXPECT_EQ(0, pkt_.payload[3]);
}

TEST_F(PacketTest, ChecksumFF)
{
    pkt_.dlc = 3;
    pkt_.payload[0] = 0xFF;
    pkt_.payload[1] = 0xFF;
    pkt_.payload[2] = 0xFF;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(4, pkt_.dlc);
    EXPECT_EQ(0xFF, pkt_.payload[3]);
}

TEST_F(PacketTest, ChecksumLogon)
{
    pkt_.clear();
    pkt_.payload[pkt_.dlc++] = 254;
    pkt_.payload[pkt_.dlc++] = 0x01;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(3, pkt_.dlc);
    EXPECT_EQ(255, pkt_.payload[2]);

    pkt_.clear();
    pkt_.payload[pkt_.dlc++] = 253;
    pkt_.payload[pkt_.dlc++] = 0x00;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(3, pkt_.dlc);
    EXPECT_EQ(253, pkt_.payload[2]);

    pkt_.clear();
    pkt_.payload[pkt_.dlc++] = 253;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(6, pkt_.dlc);
    EXPECT_EQ(253, pkt_.payload[5]);

    pkt_.clear();
    pkt_.payload[pkt_.dlc++] = 254;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(6, pkt_.dlc);
    EXPECT_EQ(254, pkt_.payload[5]);
}

TEST_F(PacketTest, CrcLogon)
{
    pkt_.clear();
    pkt_.payload[pkt_.dlc++] = 253;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(8, pkt_.dlc);
    EXPECT_EQ(0x40, pkt_.payload[6]);
    EXPECT_EQ(253 ^ 0xaa ^ 0x40, pkt_.payload[7]);

    pkt_.clear();
    pkt_.payload[pkt_.dlc++] = 254;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.payload[pkt_.dlc++] = 0xaa;
    pkt_.add_dcc_checksum();
    EXPECT_EQ(8, pkt_.dlc);
    EXPECT_EQ(0x19, pkt_.payload[6]);
    EXPECT_EQ(254 ^ 0xaa ^ 0x19, pkt_.payload[7]);
}


TEST_F(PacketTest, DccSpeed28)
{
    pkt_.set_dcc_speed28(DccShortAddress(55), true, 6);
    EXPECT_THAT(get_packet(), ElementsAre(0b00110111, 0b01110100, 0b01000011));
}

TEST_F(PacketTest, DccSpeed28_zero)
{
    pkt_.set_dcc_speed28(DccShortAddress(55), true, 0);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100000, _));
}

TEST_F(PacketTest, DccSpeed28_reversezero)
{
    pkt_.set_dcc_speed28(DccShortAddress(55), false, 0);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01000000, _));
}

TEST_F(PacketTest, DccSpeed28_estop)
{
    pkt_.set_dcc_speed28(DccShortAddress(55), true, Packet::EMERGENCY_STOP);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100001, _));
}

TEST_F(PacketTest, DccSpeed28_estop_longa)
{
    pkt_.set_dcc_speed28(DccLongAddress(3721), true, Packet::EMERGENCY_STOP);
    EXPECT_THAT(get_packet(), ElementsAre(0xCE, 0x89, 0b01100001, _));
}

TEST_F(PacketTest, DccSpeed28_step123)
{
    pkt_.set_dcc_speed28(DccShortAddress(55), true, 1);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100010, _));

    pkt_.set_dcc_speed28(DccShortAddress(55), true, 2);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01110010, _));

    pkt_.set_dcc_speed28(DccShortAddress(55), true, 3);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100011, _));
}

TEST_F(PacketTest, DccIdle)
{
    pkt_.set_dcc_idle();
    EXPECT_THAT(get_packet(), ElementsAre(0xff, 0, 0xff));
}

TEST_F(PacketTest, DccReset)
{
    pkt_.set_dcc_reset_all_decoders();
    EXPECT_THAT(get_packet(), ElementsAre(0, 0, 0));
}

TEST_F(PacketTest, Fn0)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function0_4(0b10110);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10001011, _));
}

TEST_F(PacketTest, Fn0_light)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function0_4(0b10111);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10011011, _));
}

TEST_F(PacketTest, Fn5)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function5_8(0b1101);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10111101, _));
}

TEST_F(PacketTest, Fn9)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function9_12(0b0110);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10100110, _));
}

TEST_F(PacketTest, Fn13)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function13_20(0x55);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011110, 0x55, _));
}

TEST_F(PacketTest, Fn20)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function21_28(0xAA);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011111, 0xAA, _));
}

TEST_F(PacketTest, Fn29)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function_hi(29, 0x5A);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011000, 0x5A, _));
}

TEST_F(PacketTest, Fn37)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function_hi(37, 0x11);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011001, 0x11, _));
}

TEST_F(PacketTest, Fn45)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function_hi(45, 0x11);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011010, 0x11, _));
}

TEST_F(PacketTest, Fn53)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function_hi(53, 0x11);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011011, 0x11, _));
}

TEST_F(PacketTest, Fn61)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_function_hi(61, 0x11);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011100, 0x11, _));
}

TEST_F(PacketTest, BinaryStateShort)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_binary_state(61, true);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011101, 61 | 0x80, _));
}

TEST_F(PacketTest, BinaryStateShortOff)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_binary_state(127, false);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011101, 127, _));
}

TEST_F(PacketTest, BinaryStateLongOn)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_binary_state(16 * 256 + 61, true);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11000000, 61 + 0x80, 16, _));
}

TEST_F(PacketTest, BinaryStateLongOff)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_binary_state(16 * 256 + 61, false);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11000000, 61, 16, _));
}

TEST_F(PacketTest, AnalogFunction)
{
    pkt_.add_dcc_address(DccShortAddress(55));
    pkt_.add_dcc_analog_function(17, 99);
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b00111101, 17, 99, _));
}

TEST_F(PacketTest, DccBasicAccyOn)
{
    pkt_.add_dcc_basic_accessory(3542, true);
    // 3542 = 0b 1101 1101 0110
    uint8_t b1 = 0b10111010;
    uint8_t b2 = 0b10011110;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, b1 ^ b2));

    pkt_.clear();
    pkt_.add_dcc_basic_accessory(3542, false);
    // 3542 = 0b 1101 1101 0110
    b1 = 0b10111010;
    b2 = 0b10010110;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, b1 ^ b2));
}

TEST(DefsTest, AccyAddress)
{
    for (unsigned user = 1; user <= 2048; ++user)
    {
        SCOPED_TRACE(user);
        // Inversion should be OK.
        EXPECT_EQ(user,
            Defs::accy_address_binary_to_user(
                Defs::accy_address_user_to_binary(user)));
    }
    for (unsigned binary = 0; binary <= 2047; ++binary)
    {
        SCOPED_TRACE(binary);
        // Inversion should be OK.
        EXPECT_EQ(binary,
            Defs::accy_address_user_to_binary(
                Defs::accy_address_binary_to_user(binary)));
    }
    // First address is 4.
    EXPECT_EQ(4u, Defs::accy_address_user_to_binary(1));
    // This address gets translated to the former broadcast address.
    EXPECT_EQ(2047u, Defs::accy_address_user_to_binary(2044));
    // Rollover at 2045
    EXPECT_EQ(0u, Defs::accy_address_user_to_binary(2045));
    // Highest address is 2048
    EXPECT_EQ(3u, Defs::accy_address_user_to_binary(2048));
}

TEST_F(PacketTest, DccBasicAccyPom)
{
    pkt_.add_dcc_accy_address(true, Defs::accy_address_user_to_binary(3));
    pkt_.set_dcc_basic_accy_params(false, true);
    pkt_.add_dcc_pom_write1(11, 6);
    EXPECT_THAT(get_packet(),
        ElementsAre(0b10000001, 0b11111100, 0b11101100, 0b00001011, 0b00000110,
            0b10011100));
}

TEST_F(PacketTest, DccExtAccySet)
{
    pkt_.add_dcc_ext_accessory(1733, 0x5a);
    // 1733 = 0x6c5 = 0b 110 1100 0101
    uint8_t b1 = 0b10110001;
    uint8_t b2 = 0b00010011;
    uint8_t b3 = 0x5a;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, b3, b1 ^ b2 ^ b3));

    pkt_.clear();
    pkt_.add_dcc_ext_accessory(1733, 0x80);
    b3 = 0x80;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, b3, b1 ^ b2 ^ b3));
}


TEST_F(PacketTest, SvcProgDirectByte)
{
    pkt_.set_dcc_svc_verify_byte(651, 0x55);
    // 651 = 0b10 10001011
    uint8_t b1 = 0b01110110;
    uint8_t b2 = 0b10001011;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, 0x55, b1 ^ b2 ^ 0x55));

    pkt_.set_dcc_svc_write_byte(651, 0x55);
    b1 = 0b01111110;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, 0x55, b1 ^ b2 ^ 0x55));
}

TEST_F(PacketTest, SvcProgDirectBit)
{
    pkt_.set_dcc_svc_verify_bit(651, 5, true);
    // 651 = 0b10 10001011
    uint8_t b1 = 0b01111010;
    uint8_t b2 = 0b10001011;
    uint8_t b3 = 0b11101101;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, b3, b1 ^ b2 ^ b3));

    pkt_.set_dcc_svc_write_bit(651, 5, false);
    b3 = 0b11110101;
    EXPECT_THAT(get_packet(), ElementsAre(b1, b2, b3, b1 ^ b2 ^ b3));
}

TEST_F(PacketTest, SvcProgPagedWrite)
{
    pkt_.set_dcc_svc_paged_set_page();
    EXPECT_THAT(get_packet(), ElementsAre(0b01111101, 0b00000001, 0b01111100));
    EXPECT_TRUE(pkt_.packet_header.send_long_preamble);
    EXPECT_TRUE(check_checksum());

    pkt_.set_dcc_svc_paged_write_reg(3, 0xaa);
    EXPECT_THAT(get_packet(), ElementsAre(0b01111011, 0xaa, _));
    EXPECT_TRUE(check_checksum());
}

TEST_F(PacketTest, SvcProgPagedVerify)
{
    pkt_.set_dcc_svc_paged_set_page(55);
    EXPECT_THAT(get_packet(), ElementsAre(0b01111101, 55, _));
    EXPECT_TRUE(pkt_.packet_header.send_long_preamble);
    EXPECT_TRUE(check_checksum());

    pkt_.set_dcc_svc_paged_verify_reg(0, 0x34);
    EXPECT_THAT(get_packet(), ElementsAre(0b01110000, 0x34, _));
    EXPECT_TRUE(pkt_.packet_header.send_long_preamble);
    EXPECT_TRUE(check_checksum());
}

TEST_F(PacketTest, LogonEnable)
{
    pkt_.set_dcc_logon_enable(Defs::LogonEnableParam::LOCO, 0x55aa, 0x31);
    EXPECT_THAT(get_packet(), ElementsAre(254, 0b11111101, 0x55, 0xaa, 0x31, _));
    EXPECT_TRUE(check_checksum());
}

TEST_F(PacketTest, SelectInfo)
{
    constexpr uint64_t decoder_id = 0x39944332211ull;
    pkt_.set_dcc_select_shortinfo(decoder_id);
    EXPECT_THAT(get_packet(),
        ElementsAre(
            254, 0b11010000 | 0x3, 0x99, 0x44, 0x33, 0x22, 0x11, 0xff, _, _));
    EXPECT_TRUE(check_crc());
    EXPECT_TRUE(check_checksum());
}

TEST_F(PacketTest, LogonAssign)
{
    constexpr uint64_t decoder_id = 0x39944332211ull;
    pkt_.set_dcc_logon_assign(decoder_id, 0x8233);
    // There are too many bytes here to use elementsare, this is the longer
    // syntax.
    ::testing::Matcher<uint8_t> exp[] = {
        254, 0b11100000 | 0x3, 0x99, 0x44, 0x33, 0x22, 0x11, 0x42, 0x33, _, _};
    EXPECT_THAT(get_packet(), ::testing::ElementsAreArray(exp));
    EXPECT_TRUE(check_crc());
    EXPECT_TRUE(check_checksum());
}

TEST_F(PacketTest, MMOld)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), false);
    pkt_.add_mm_speed(7);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001100, 0b00000011));
}

TEST_F(PacketTest, MMOldLight)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(7);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b00000011));
}

TEST_F(PacketTest, MMOldStop)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(0);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b00000000));

    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(1);
    // Speed step 1 = binary 10.
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b00110000));
}

TEST_F(PacketTest, MMOldMax)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(14);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11111111));

    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(20);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11111111));
}

TEST_F(PacketTest, MMOldReverse)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(Packet::CHANGE_DIR);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11000000));
}

TEST_F(PacketTest, MMOldEStop)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_speed(Packet::EMERGENCY_STOP);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11000000));
}

TEST_F(PacketTest, MMNew)
{
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_new_speed(false, 6);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11101101));

    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), false);
    pkt_.add_mm_new_speed(true, 7);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001100, 0b00010010));
}

TEST_F(PacketTest, MMNewFn)
{
    //Loco #34, function ON, speed -4, aux. function f1 ON and f2,f3,f4 OFF.
    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_new_fn(1, true, 4);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11011001));

    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_new_fn(2, false, 4);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b10001100));

    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_new_fn(3, false, 4);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b10011100));

    pkt_.start_mm_packet();
    pkt_.add_mm_address(MMAddress(34), true);
    pkt_.add_mm_new_fn(4, false, 4);
    EXPECT_THAT(get_packet(), ElementsAre(0b11, 0b10001111, 0b11011100));
}

class MockUpdateLoop;
MockUpdateLoop *g_update_loop = nullptr;

class MockUpdateLoop
{
public:
    MockUpdateLoop()
    {
        HASSERT(!g_update_loop);
        g_update_loop = this;
    }
    ~MockUpdateLoop()
    {
        g_update_loop = nullptr;
    }
    MOCK_METHOD2(send_update, void(PacketSource *source, unsigned code));
    MOCK_METHOD1(register_source, void(PacketSource *source));
    MOCK_METHOD1(unregister_source, void(PacketSource *source));
};

void packet_processor_notify_update(PacketSource *source, unsigned code)
{
    HASSERT(g_update_loop);
    g_update_loop->send_update(source, code);
}

bool packet_processor_add_refresh_source(PacketSource *source, unsigned priority)
{
    HASSERT(g_update_loop);
    g_update_loop->register_source(source);
    return true;
}

void packet_processor_remove_refresh_source(PacketSource *source)
{
    HASSERT(g_update_loop);
    g_update_loop->unregister_source(source);
}

class Train28Test : public PacketTest
{
protected:
    Train28Test()
        : code_(0)
        , regExpect_(&loop_, &train_)
        , train_(DccShortAddress(55))
    {
    }

    ~Train28Test()
    {
        EXPECT_CALL(loop_, unregister_source(&train_));
    }

    /// Requests a refresh packet from the train.
    void do_refresh()
    {
        new (&pkt_) Packet();
        train_.get_next_packet(0, &pkt_);
    }

    /// Requests the packet from the train that the last code was generated
    /// for.
    void do_callback()
    {
        Mock::VerifyAndClear(&loop_);
        new (&pkt_) Packet();
        train_.get_next_packet(code_, &pkt_);
        code_ = 0;
    }

    unsigned code_;
    StrictMock<MockUpdateLoop> loop_;
    // We use a constructor trick here to expect the registration expectation
    // at the right time.
    struct AddRegisterExpect
    {
        AddRegisterExpect(StrictMock<MockUpdateLoop> *l, Dcc28Train *t)
        {
            EXPECT_CALL(*l, register_source(t));
        }
    } regExpect_;
    Dcc28Train train_;
};

TEST_F(Train28Test, DefaultPacket)
{
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100000, _));
}

TEST_F(Train28Test, SetSpeed)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_speed(SpeedType(37.5));
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01101011, _));
}

TEST_F(Train28Test, MaxSpeed)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    SpeedType s;
    s.set_mph(128);
    train_.set_speed(s);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01111111, _));
}

TEST_F(Train28Test, BelowMaxSpeed)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    SpeedType s;
    s.set_mph(121.42);
    train_.set_speed(s);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01101111, _));
}

TEST_F(Train28Test, MinSpeed)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    SpeedType s;
    // Even the smallest nonzero velocity should set the train in motion.
    s.set_mph(0.001);
    train_.set_speed(s);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100010, _));
    // We expecet the given speed to be represented very accurately in the
    // returned value.
    SpeedType ss = train_.get_speed();
    EXPECT_NEAR(0.001, ss.mph(), 1e-3);

    EXPECT_CALL(loop_, send_update(&train_, _));
    s.set_mph(1.37);
    train_.set_speed(s);
    ss = train_.get_speed();
    EXPECT_NEAR(1.37, ss.mph(), 1e-3);
}

TEST_F(Train28Test, ZeroSpeed)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).Times(2).WillRepeatedly(
        SaveArg<1>(&code_));
    SpeedType s;
    // Even the smallest nonzero velocity should set the train in motion.
    s.set_mph(0.001);
    train_.set_speed(s);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100010, _));

    s.set_mph(0);
    train_.set_speed(s);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100000, _));
}

/// Verifies that the train correctly remembers that it was commanded to estop.
TEST_F(Train28Test, EstopSaved)
{
    SpeedType s;
    s.set_mph(128);
    code_ = 0;
    EXPECT_CALL(loop_, send_update(&train_, _))
        .WillRepeatedly(SaveArg<1>(&code_));

    // First make the train move.
    train_.set_speed(s);
    EXPECT_EQ(DccTrainUpdateCode::SPEED, code_);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01111111, _));
    EXPECT_FALSE(train_.get_emergencystop());
    EXPECT_NEAR(128, train_.get_speed().mph(), 0.1);

    // Then estop the train.
    EXPECT_FALSE(train_.get_emergencystop());
    train_.set_emergencystop();
    EXPECT_EQ(DccTrainUpdateCode::ESTOP, code_);
    EXPECT_TRUE(train_.get_emergencystop());
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01100001, _));
    // Checks that the train knows it's estopped and the speed is reported as
    // zero.
    EXPECT_TRUE(train_.get_emergencystop());
    EXPECT_NEAR(0, train_.get_speed().mph(), 0.1);

    // Move the train again.
    s = 37.5;
    train_.set_speed(s);
    EXPECT_EQ(DccTrainUpdateCode::SPEED, code_);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01101011, _));
    EXPECT_FALSE(train_.get_emergencystop());
    EXPECT_NEAR(37.5, train_.get_speed().speed(), 0.1);
}

TEST_F(Train28Test, RefreshLoop)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).Times(AtLeast(1));
    train_.set_speed(SpeedType(-37.5));
    for (int i : {0, 3, 7, 9, 12, 15, 16, 20, 23, 25, 26})
    {
        train_.set_fn(i, 1);
    }
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01001011, _));
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10010100, _));
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10110100, _));
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10101001, _));

    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b01001011, _));
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10010100, _));
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10110100, _));
    do_refresh();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10101001, _));
}

TEST_F(Train28Test, Function0)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(3, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10000100, _));
}

TEST_F(Train28Test, Function5)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(6, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10110010, _));
}

TEST_F(Train28Test, Function9)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(11, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b10100100, _));
}

TEST_F(Train28Test, Function13)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(13, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011110, 1, _));
}

TEST_F(Train28Test, Function28)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(28, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011111, 0x80, _));
}

TEST_F(Train28Test, Function47)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(47, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011010, 0b100, _));
}

TEST_F(Train28Test, Function68)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    train_.set_fn(68, 1);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b11011100, 0x80, _));
}

TEST_F(Train28Test, AllFunctions)
{
    for (int a = 0; a <= 68; ++a)
    {
        EXPECT_CALL(loop_, send_update(&train_, _))
            .WillOnce(SaveArg<1>(&code_));
        train_.set_fn(a, 1);
        do_callback();
        auto old_p = get_packet();

        EXPECT_CALL(loop_, send_update(&train_, _))
            .WillOnce(SaveArg<1>(&code_));
        train_.set_fn(a, 0);
        do_callback();
        auto new_p = get_packet();
        EXPECT_NE(old_p, new_p);
    }
}

TEST_F(Train28Test, isSmall)
{
#if UINTPTR_MAX > UINT_MAX
    EXPECT_EQ(24U, sizeof(train_));
#else
    EXPECT_EQ(16U, sizeof(train_));
#endif
    // 4 bytes of function bits   // 3
    // 4 bytes of virtual method table
    // 2 bytes of old speed // 1
    // almost 2 bytes of address // 2
    // 6 bits of speed and direction
    // 3 bits of refresh loop state
    // 1 bit of directionChanged_
    // and that takes us over 12 bytes.

    // with more code we could go down to 12 bytes by dropping speed-and-dir
    // and always recomputing it from previous-speed. The rest of the state
    // bits would fit into the cracks.
}

class Train128Test : public PacketTest
{
protected:
    Train128Test()
        : code_(0)
        , regExpect_(&loop_, &train_)
        , train_(DccShortAddress(55))
    {
    }

    ~Train128Test()
    {
        EXPECT_CALL(loop_, unregister_source(&train_));
    }

    /// Requests a refresh packet from the train.
    void do_refresh()
    {
        new (&pkt_) Packet();
        train_.get_next_packet(0, &pkt_);
    }

    /// Requests the packet from the train that the last code was generated
    /// for.
    void do_callback()
    {
        Mock::VerifyAndClear(&loop_);
        new (&pkt_) Packet();
        train_.get_next_packet(code_, &pkt_);
        code_ = 0;
    }

    unsigned code_;
    StrictMock<MockUpdateLoop> loop_;
    // We use a constructor trick here to expect the registration expectation
    // at the right time.
    struct AddRegisterExpect
    {
        AddRegisterExpect(StrictMock<MockUpdateLoop> *l, Dcc128Train *t)
        {
            EXPECT_CALL(*l, register_source(t));
        }
    } regExpect_;
    Dcc128Train train_;
};

/// Tests that all reverse speed steps are correctly generated to the track.
TEST_F(Train128Test, SetSpeedReverse)
{
    for (int mph = 1; mph <= 126; mph++)
    {
        string ss = StringPrintf("mph=%d", mph);
        SCOPED_TRACE(ss);
        EXPECT_CALL(loop_, send_update(&train_, _))
            .WillOnce(SaveArg<1>(&code_));
        SpeedType s;
        s.set_mph(mph);
        s.reverse();
        auto w = s.get_wire();
        s.set_wire(w);
        train_.set_speed(s);
        do_callback();
        EXPECT_THAT(get_packet(), ElementsAre(55, 0b00111111, mph + 1, _));
    }
}

/// Tests that all forward speed steps are correctly generated to the track.
TEST_F(Train128Test, SetSpeedForward)
{
    for (int mph = 1; mph <= 126; mph++)
    {
        string ss = StringPrintf("mph=%d", mph);
        SCOPED_TRACE(ss);
        EXPECT_CALL(loop_, send_update(&train_, _))
            .WillOnce(SaveArg<1>(&code_));
        SpeedType s;
        s.set_mph(mph);
        auto w = s.get_wire();
        s.set_wire(w);
        train_.set_speed(s);
        do_callback();
        EXPECT_THAT(
            get_packet(), ElementsAre(55, 0b00111111, 0x80 | (mph + 1), _));
    }
}

TEST_F(Train128Test, MaxSpeed)
{
    EXPECT_CALL(loop_, send_update(&train_, _)).WillOnce(SaveArg<1>(&code_));
    SpeedType s;
    s.set_mph(128);
    s.reverse();
    train_.set_speed(s);
    do_callback();
    EXPECT_THAT(get_packet(), ElementsAre(55, 0b00111111, 0x7F, _));
}

} // namespace dcc
