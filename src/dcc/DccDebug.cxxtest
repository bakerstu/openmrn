#include "utils/test_main.hxx"

#include "dcc/DccDebug.hxx"
#include "dcc/Packet.hxx"

namespace dcc
{
namespace
{

TEST(DccDebug, Idle)
{
    EXPECT_EQ(
        "[dcc] Idle packet", packet_to_string(Packet(Packet::DCC_IDLE())));
}

TEST(DccDebug, BroadcastEstop)
{
    Packet pkt;
    pkt.set_dcc_speed14(
        DccShortAddress(0), true, false, Packet::EMERGENCY_STOP);
    EXPECT_EQ("[dcc] Broadcast SPD F E-STOP", packet_to_string(pkt));
}

TEST(DccDebug, ShortAddressEstop)
{
    Packet pkt;
    pkt.set_dcc_speed14(
        DccShortAddress(42), true, false, Packet::EMERGENCY_STOP);
    EXPECT_EQ("[dcc] Short Address 42 SPD F E-STOP", packet_to_string(pkt));
}

TEST(DccDebug, LongAddressEstop)
{
    Packet pkt;
    pkt.set_dcc_speed14(
        DccLongAddress(842), true, false, Packet::EMERGENCY_STOP);
    EXPECT_EQ("[dcc] Long Address 842 SPD F E-STOP", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed14(
        DccLongAddress(42), true, false, Packet::EMERGENCY_STOP);
    EXPECT_EQ("[dcc] Long Address 42 SPD F E-STOP", packet_to_string(pkt));
}

TEST(DccDebug, Speed28_0)
{
    Packet pkt;
    pkt.set_dcc_speed28(DccShortAddress(42), true, 0);
    EXPECT_EQ("[dcc] Short Address 42 SPD F 0", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed28(DccShortAddress(42), false, 0);
    EXPECT_EQ("[dcc] Short Address 42 SPD R 0", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed28(DccLongAddress(42), false, 0);
    EXPECT_EQ("[dcc] Long Address 42 SPD R 0", packet_to_string(pkt));
}

TEST(DccDebug, Speed28_1)
{
    Packet pkt;
    pkt.set_dcc_speed28(DccShortAddress(42), true, 1);
    EXPECT_EQ("[dcc] Short Address 42 SPD F 1", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed28(DccShortAddress(42), false, 1);
    EXPECT_EQ("[dcc] Short Address 42 SPD R 1", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed28(DccLongAddress(42), false, 1);
    EXPECT_EQ("[dcc] Long Address 42 SPD R 1", packet_to_string(pkt));
}

TEST(DccDebug, Speed28_others)
{
    Packet pkt;
    pkt.set_dcc_speed28(DccShortAddress(42), true, 13);
    EXPECT_EQ("[dcc] Short Address 42 SPD F 13", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed28(DccShortAddress(42), false, 28);
    EXPECT_EQ("[dcc] Short Address 42 SPD R 28", packet_to_string(pkt));
    pkt.clear();
    pkt.set_dcc_speed28(DccLongAddress(42), false, 28);
    EXPECT_EQ("[dcc] Long Address 42 SPD R 28", packet_to_string(pkt));
}

TEST(DccDebug, F0_4)
{
    Packet pkt;
    pkt.add_dcc_address(DccShortAddress(3));
    pkt.add_dcc_function0_4(0b10111);
    EXPECT_EQ("[dcc] Short Address 3 F[0-4]=11101", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_address(DccShortAddress(3));
    pkt.add_dcc_function0_4(0b10110);
    EXPECT_EQ("[dcc] Short Address 3 F[0-4]=01101", packet_to_string(pkt));
}

TEST(DccDebug, F5_8)
{
    Packet pkt;
    pkt.add_dcc_address(DccShortAddress(3));
    pkt.add_dcc_function5_8(0b1011);
    EXPECT_EQ("[dcc] Short Address 3 F[5-8]=1101", packet_to_string(pkt));
}

TEST(DccDebug, F9_12)
{
    Packet pkt;
    pkt.add_dcc_address(DccShortAddress(3));
    pkt.add_dcc_function9_12(0b1101);
    EXPECT_EQ("[dcc] Short Address 3 F[9-12]=1011", packet_to_string(pkt));
}

TEST(DccDebug, F13_20)
{
    Packet pkt;
    pkt.add_dcc_address(DccShortAddress(3));
    pkt.add_dcc_function13_20(0b10010110);
    EXPECT_EQ("[dcc] Short Address 3 F[13-20]=01101001", packet_to_string(pkt));
}

TEST(DccDebug, F21_28)
{
    Packet pkt;
    pkt.add_dcc_address(DccShortAddress(3));
    pkt.add_dcc_function21_28(0b10010110);
    EXPECT_EQ("[dcc] Short Address 3 F[21-28]=01101001", packet_to_string(pkt));
}

TEST(DccDebug, Accy)
{
    Packet pkt;
    pkt.add_dcc_basic_accessory(0, false);
    EXPECT_EQ("[dcc] Accy 0 deactivate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(1, false);
    EXPECT_EQ("[dcc] Accy 1 deactivate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(2, false);
    EXPECT_EQ("[dcc] Accy 2 deactivate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(3, true);
    EXPECT_EQ("[dcc] Accy 3 activate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(33, false);
    EXPECT_EQ("[dcc] Accy 33 deactivate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(1023, false);
    EXPECT_EQ("[dcc] Accy 1023 deactivate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(1024, false);
    EXPECT_EQ("[dcc] Accy 1024 deactivate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(2044, true);
    EXPECT_EQ("[dcc] Accy 2044 activate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(2043, true);
    EXPECT_EQ("[dcc] Accy 2043 activate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(2042, true);
    EXPECT_EQ("[dcc] Accy 2042 activate", packet_to_string(pkt));
    pkt.clear();
    pkt.add_dcc_basic_accessory(4095, true);
    EXPECT_EQ("[dcc] Accy 4095 activate", packet_to_string(pkt));
    pkt.clear();
}

TEST(DccDebug, marklin)
{
    Packet pkt;
    pkt.start_mm_packet();
    pkt.add_mm_address(MMAddress(13), true);
    pkt.add_mm_speed(2);
    EXPECT_EQ("[marklin][repeat 2 times][03 f3 f0]", packet_to_string(pkt));
}

} // namespace
} // namespace dcc
