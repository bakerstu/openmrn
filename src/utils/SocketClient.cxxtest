/** @copyright
 * Copyright (c) 2017, Stuart W Baker
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * @file SimpleQueue.cxxtest
 * Unit tests for SocketClient.
 *
 * @author Stuart Baker
 * @date 20 March 2017
 */

#include "utils/SocketClient.hxx"

#include "os/MDNS.hxx"
#include "os/OS.hxx"
#include "utils/async_if_test_helper.hxx"
#include "utils/socket_listener.hxx"

#define LISTEN_PORT 12247

using namespace std::placeholders;

Executor<1> g_connect_executor("connect_thread", 0, 2000);
Executor<1> g_mdns_executor("mdns_thread", 0, 2000);

class SocketClientTest : public openlcb::AsyncNodeTest
{
public:
    MOCK_METHOD2(connect_callback, void(int fd, Notifiable *on_exit));

    MOCK_METHOD2(status_callback, void(SocketClientParams::LogMessage, string));

    MOCK_METHOD2(last_callback, void(string, int));

protected:
    SocketClientTest()
    {
        wait();
        sl_.reset(new SocketListener(LISTEN_PORT, accept_callback));
        while (!sl_->is_started())
        {
            usleep(10000);
        }
    }

    ~SocketClientTest()
    {
        if (sc_)
        {
            sc_->shutdown();
        }
        sl_->shutdown();
    }

    static void accept_callback(int fd)
    {
        printf("accept_callback\n");
    }

    std::unique_ptr<SocketListener> sl_;
    std::unique_ptr<SocketClient> sc_;
};

TEST_F(SocketClientTest, create)
{
}

TEST_F(SocketClientTest, connect_mdns_not_published_no_fallback)
{
    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor,
        SocketClientParams::from_static_and_mdns("", 0, "_openlcbtest._tcp"),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    EXPECT_CALL(*this, connect_callback(_, sc_.get())).Times(0);

    usleep(10000);
    wait();
    usleep(10000);
    wait();
}

TEST_F(SocketClientTest, connect_host)
{
    EXPECT_CALL(*this, connect_callback(_, _)).Times(1);

    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor,
        SocketClientParams::from_static("127.0.0.1", LISTEN_PORT),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    usleep(10000);
    wait();
    usleep(10000);
    wait();
}

TEST_F(SocketClientTest, connect_mdns_not_published)
{
    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor,
        SocketClientParams::from_static_and_mdns("127.0.0.1", LISTEN_PORT,
                                   "_openlcbtest._tcp"),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    EXPECT_CALL(*this, connect_callback(_, sc_.get())).Times(1);

    usleep(10000);
    wait();
    usleep(10000);
    wait();
}

TEST_F(SocketClientTest, connect_mdns)
{
    LOG(INFO, "create");
    std::unique_ptr<MDNS> mdns(new MDNS());
    LOG(INFO, "publish");
    mdns->publish("openmrn_service", "_openlcbtest._tcp", LISTEN_PORT);
    LOG(INFO, "commit");
    mdns->commit();

    LOG(INFO, "waiting for export to take hold");
    sleep(1);

    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor,
        SocketClientParams::from_static_and_mdns("", 0, "_openlcbtest._tcp"),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));
    EXPECT_CALL(*this, connect_callback(_, sc_.get())).Times(1);

    usleep(10000);
    wait();
    usleep(10000);
    wait();
}

class LocalTestSocketClientParams : public EmptySocketClientParams
{
public:
    LocalTestSocketClientParams(SocketClientTest *parent)
        : parent_(parent)
    {
    }

    string manual_host_name() override
    {
        return "127.0.0.1";
    }

    /// @return port number to use for manual connection.
    int manual_port() override
    {
        return LISTEN_PORT;
    }

    bool disallow_local() override
    {
        return true;
    }

    void log_message(LogMessage id, const string &arg) override
    {
        parent_->status_callback(id, arg);
    }

private:
    SocketClientTest *parent_;
};

TEST_F(SocketClientTest, connect_host_disallow_local)
{
    EXPECT_CALL(*this, status_callback(SocketClientParams::CONNECT_MANUAL, _))
        .Times(AtLeast(1));
    EXPECT_CALL(
        *this, status_callback(SocketClientParams::CONNECT_FAILED_SELF, _))
        .Times(AtLeast(1));
    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor,
        std::make_unique<LocalTestSocketClientParams>(this),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    EXPECT_CALL(*this, connect_callback(_, sc_.get())).Times(0);

    usleep(40000);
    wait();
    usleep(40000);
    wait();
}

class TestSocketClientParams : public EmptySocketClientParams
{
public:
    TestSocketClientParams(SocketClientTest *parent)
        : parent_(parent)
    {
    }

    string manual_host_name() override
    {
        return manualHostName_;
    }

    int manual_port() override
    {
        return manualPort_;
    }

    string mdns_service_name() override
    {
        return mdnsServiceName_;
    }

    SearchMode search_mode() override
    {
        return (SearchMode)searchMode_;
    }

    void log_message(LogMessage id, const string &arg) override
    {
        OSMutexLock h(&lock_);
        parent_->status_callback(id, arg);
    }

    bool enable_last() override
    {
        return enableLast_;
    }

    void set_last(const char *hostname, int port) override
    {
        OSMutexLock h(&lock_);
        parent_->last_callback(hostname, port);
    }

    string last_host_name() override
    {
        return lastHostName_;
    }

    int last_port() override
    {
        return lastPort_;
    }

    bool one_shot() override
    {
        return oneShot_;
    }
    
    SocketClientTest *parent_;
    int searchMode_{AUTO_MANUAL};
    bool enableLast_{true};
    string manualHostName_;
    int manualPort_{-1};
    string mdnsServiceName_;
    string lastHostName_;
    int lastPort_{-1};
    bool oneShot_{false};

    OSMutex lock_;
};

TEST_F(SocketClientTest, test_sequence)
{
    ::testing::InSequence seq;
    auto p = std::make_unique<TestSocketClientParams>(this);
    p->lastHostName_ = "127.0.0.2";
    p->lastPort_ = LISTEN_PORT + 1; // should fail hopefully.
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->manualHostName_ = "127.0.0.3";
    p->manualPort_ = LISTEN_PORT;
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_RE, "127.0.0.2:12248"));
    EXPECT_CALL(*this, status_callback(SocketClientParams::MDNS_SEARCH,
                           "_nonexist823467284._tcp"));
    EXPECT_CALL(*this, status_callback(SocketClientParams::MDNS_NOT_FOUND, _));
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_MANUAL, "127.0.0.3:12247"));
    EXPECT_CALL(*this, last_callback("127.0.0.3", 12247));
    EXPECT_CALL(*this, connect_callback(_, _));

    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor, std::move(p),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    while (!sc_->is_connected())
    {
        usleep(40000);
        wait();
    }
}

TEST_F(SocketClientTest, test_other_sequence)
{
    ::testing::InSequence seq;
    auto p = std::make_unique<TestSocketClientParams>(this);
    p->lastHostName_ = "127.0.0.2";
    p->lastPort_ = LISTEN_PORT + 1; // should fail hopefully.
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->manualHostName_ = "127.0.0.3";
    p->manualPort_ = LISTEN_PORT;
    p->searchMode_ = SocketClientParams::MANUAL_ONLY;
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_RE, "127.0.0.2:12248"));
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_MANUAL, "127.0.0.3:12247"));
    EXPECT_CALL(*this, last_callback("127.0.0.3", 12247));
    EXPECT_CALL(*this, connect_callback(_, _));

    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_mdns_executor, std::move(p),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    while (!sc_->is_connected())
    {
        usleep(40000);
        wait();
    }
}

TEST_F(SocketClientTest, test_third_sequence)
{
    ::testing::InSequence seq;
    auto p = std::make_unique<TestSocketClientParams>(this);
    p->lastHostName_ = "127.0.0.2";
    p->lastPort_ = LISTEN_PORT;
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->manualHostName_ = "127.0.0.3";
    p->manualPort_ = LISTEN_PORT;
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_RE, "127.0.0.2:12247"));
    EXPECT_CALL(*this, last_callback("127.0.0.2", 12247));
    EXPECT_CALL(*this, connect_callback(_, _));

    // same executor for mdns and connect, so we will never get to mdns.
    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_connect_executor, std::move(p),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    while (!sc_->is_connected())
    {
        usleep(40000);
        wait();
    }

    ::testing::Mock::VerifyAndClearExpectations(this);

    // try wakeup as well.
    p = std::make_unique<TestSocketClientParams>(this);
    p->lastHostName_ = "127.0.0.2";
    p->lastPort_ = LISTEN_PORT + 1;
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->manualHostName_ = "127.0.0.3";
    p->manualPort_ = LISTEN_PORT;
    sc_->reset_params(std::move(p));

    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_RE, "127.0.0.2:12248"));
    EXPECT_CALL(*this, status_callback(SocketClientParams::MDNS_SEARCH,
                           "_nonexist823467284._tcp"));
    EXPECT_CALL(*this, status_callback(SocketClientParams::MDNS_NOT_FOUND, _));
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_MANUAL, "127.0.0.3:12247"));
    EXPECT_CALL(*this, last_callback("127.0.0.3", 12247));
    EXPECT_CALL(*this, connect_callback(_, _));

    sc_->notify();
    wait();
    while (!sc_->is_connected())
    {
        usleep(40000);
        wait();
    }
}

TEST_F(SocketClientTest, test_fourth_sequence)
{
    ::testing::InSequence seq;
    auto p = std::make_unique<TestSocketClientParams>(this);
    p->lastHostName_ = "127.0.0.2";
    p->lastPort_ = LISTEN_PORT + 1;
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->manualHostName_ = "127.0.0.3";
    p->manualPort_ = LISTEN_PORT;
    p->searchMode_ = SocketClientParams::MANUAL_AUTO;
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_RE, "127.0.0.2:12248"));
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_MANUAL, "127.0.0.3:12247"));
    EXPECT_CALL(*this, last_callback("127.0.0.3", 12247));
    EXPECT_CALL(*this, connect_callback(_, _));

    // same executor for mdns and connect, so we will never get to mdns.
    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_connect_executor, std::move(p),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    while (!sc_->is_connected())
    {
        usleep(40000);
        wait();
    }
}

TEST_F(SocketClientTest, one_shot)
{
    ::testing::InSequence seq;
    auto p = std::make_unique<TestSocketClientParams>(this);
    p->lastHostName_ = "127.0.0.2";
    p->lastPort_ = LISTEN_PORT + 1;
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->oneShot_ = true;
    p->searchMode_ = SocketClientParams::AUTO_MANUAL;
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_RE, "127.0.0.2:12248"));
    EXPECT_CALL(*this, status_callback(SocketClientParams::MDNS_SEARCH,
                           "_nonexist823467284._tcp"));
    EXPECT_CALL(*this, status_callback(SocketClientParams::MDNS_NOT_FOUND, _));
    EXPECT_CALL(
        *this, status_callback(SocketClientParams::CONNECT_FAILED_ONESHOT, _))
        .WillOnce(::testing::InvokeWithoutArgs(&n_, &SyncNotifiable::notify));

    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_connect_executor, std::move(p),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    n_.wait_for_notification();
    usleep(40000);
}


TEST_F(SocketClientTest, one_shot_success)
{
    ::testing::InSequence seq;
    auto p = std::make_unique<TestSocketClientParams>(this);
    p->manualHostName_ = "127.0.0.2";
    p->manualPort_ = LISTEN_PORT;
    p->mdnsServiceName_ = "_nonexist823467284._tcp";
    p->oneShot_ = true;
    p->searchMode_ = SocketClientParams::MANUAL_ONLY;
    EXPECT_CALL(*this,
        status_callback(SocketClientParams::CONNECT_MANUAL, "127.0.0.2:12247"));
    EXPECT_CALL(*this, last_callback("127.0.0.2", 12247));
    EXPECT_CALL(
        *this, connect_callback(_, _))
        .WillOnce(::testing::InvokeWithoutArgs(&n_, &SyncNotifiable::notify));

    sc_.reset(new SocketClient(node_->iface()->dispatcher()->service(),
        &g_connect_executor, &g_connect_executor, std::move(p),
        std::bind(&SocketClientTest::connect_callback, this, _1, _2)));

    n_.wait_for_notification();
    EXPECT_TRUE(sc_->is_connected());  // successful connection
    usleep(10000);

    // Now that we have the connect callback we shutdown the socket client. The
    // mock will verify that no other calls are happening.

    sc_->shutdown();
    EXPECT_FALSE(sc_->is_connected());
    EXPECT_TRUE(sc_->is_shutdown());
    usleep(10000);
}

