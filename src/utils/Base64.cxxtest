/** \copyright
 * Copyright (c) 2019, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file Base64.cxxtest
 *
 * Unit tests for base64 encoding and decoding
 *
 * @author Balazs Racz
 * @date 31 July 2019
 */

#include "utils/Base64.hxx"

#include "utils/test_main.hxx"

class Base64Test : public ::testing::Test
{
protected:
    void test_equivalence(string binary)
    {
        string msg = "While testing \"" + binary + "\"";
        SCOPED_TRACE(msg);

        string b64 = base64_encode(binary);
        EXPECT_EQ((binary.size() + 2) / 3 * 4, b64.size()) << "Size mismatch.";

        string msg2 = "Encoded as \"" + b64 + "\"";
        SCOPED_TRACE(msg2);

        string decoded = "asdasdaa";
        EXPECT_TRUE(base64_decode(b64, &decoded)) << "Decoding error";

        EXPECT_EQ(binary, decoded);
    }

    void test_canned(string b64, string binary)
    {
        SCOPED_TRACE(
            "While testing b64enc(\"" + binary + "\") == \"" + b64 + "\"");

        EXPECT_EQ(b64, base64_encode(binary));
        string decoded;
        EXPECT_TRUE(base64_decode(b64, &decoded));
        EXPECT_EQ(binary, decoded);
    }
};

TEST_F(Base64Test, canned_encoding)
{
    test_canned("YW55IGNhcm5hbCBwbGVhc3VyZS4=", "any carnal pleasure.");
    test_canned("YW55IGNhcm5hbCBwbGVhc3VyZQ==", "any carnal pleasure");
    test_canned("YW55IGNhcm5hbCBwbGVhc3Vy", "any carnal pleasur");
    test_canned("", "");
    test_canned("cGxlYXN1cmUu", "pleasure.");
    test_canned("bGVhc3VyZS4=", "leasure.");
    test_canned("ZWFzdXJlLg==", "easure.");
}

TEST_F(Base64Test, equiv)
{
    for (unsigned x = 0; x < 256; x++)
    {
        string b;
        b.push_back(x & 0xff);
        test_equivalence(b);
    }
}

TEST_F(Base64Test, random)
{
    string s;
    unsigned int seed = 673242;
    for (unsigned x = 0; x < 1024; x++)
    {
        s.push_back(rand_r(&seed) & 0xff);
    }
    for (int x = 1024; x >= 0; x--)
    {
        test_equivalence(s.substr(x));
    }
}

TEST_F(Base64Test, zeros)
{
    for (int x = 256; x >= 0; x--)
    {
        test_equivalence(string(x, 0));
    }
}

TEST_F(Base64Test, bad)
{
    string s;
    EXPECT_FALSE(base64_decode("*", &s));
    EXPECT_FALSE(base64_decode("YW55I*GNhcm5hbCB", &s));
}
