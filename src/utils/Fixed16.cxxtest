/** \copyright
 * Copyright (c) 2016, Balazs Racz
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file Fixed16.cxxtest
 *
 * Unit tests for the fixed-point arithmetic type.
 *
 * @author Balazs Racz
 * @date 19 Dec 2016
 */

#include "utils/test_main.hxx"
#include "utils/Fixed16.hxx"

using ::testing::FloatNear;

TEST(Fixed16Test, CreateRound)
{
    Fixed16 v1(13);
    EXPECT_EQ(13, v1.round());
    v1 = Fixed16(13, 0x7fff);
    EXPECT_EQ(13, v1.round());

    v1 = Fixed16(13, 0x8000);
    EXPECT_EQ(14, v1.round());

    v1 = Fixed16(13, 0xff00);
    EXPECT_EQ(14, v1.round());

    v1 = Fixed16(13, 0xffff);
    EXPECT_EQ(14, v1.round());
}

TEST(Fixed16Test, ToFloat)
{
    Fixed16 v1(13);
    union
    {
        float f;
        uint32_t fu;
    };
    f = v1.to_float();
    printf("orig 0x%04x sign %x exp %u (%d) mant %x\n", 13, fu >> 31,
        (fu >> 23) & 0xff, int((fu >> 23) & 0xff) - 127, fu & ((1 << 23) - 1));
    EXPECT_THAT(v1.to_float(), FloatNear(13.0, 1e-5));

    v1 = Fixed16(13, 0x8000);
    EXPECT_THAT(v1.to_float(), FloatNear(13.5, 1e-5));

    v1 = Fixed16(13, 0x0100); //
    EXPECT_THAT(v1.to_float(), FloatNear(13.00390625, 1e-5));

    v1 = Fixed16(13, 0xFFFF);
    EXPECT_THAT(v1.to_float(), FloatNear(14.0, 1e-4));

    v1 = Fixed16(32767);
    EXPECT_THAT(v1.to_float(), FloatNear(32767.0, 1e-5));

    v1 = Fixed16(32767, 0x8000);
    EXPECT_THAT(v1.to_float(), FloatNear(32767.5, 1e-5));

    v1 = Fixed16(0, 0x0100);
    EXPECT_THAT(v1.to_float(), FloatNear(0.00390625, 1e-5));

    v1 = Fixed16(0, 0);
    EXPECT_THAT(v1.to_float(), FloatNear(0, 1e-9));

    v1 = Fixed16(0, 0x0001);
    EXPECT_THAT(v1.to_float(), FloatNear(1.52588e-05, 1e-6));
}

TEST(Fixed16Test, FromDouble)
{
    Fixed16 v1(Fixed16::FROM_DOUBLE, 3.1415);
    EXPECT_THAT(v1.to_float(), FloatNear(3.1415, 1e-4));
    v1 = {Fixed16::FROM_DOUBLE, 158.9999};
    EXPECT_THAT(v1.to_float(), FloatNear(158.9999, 1e-4));
    // some difficult rounding situations
    v1 = {Fixed16::FROM_DOUBLE, -0.0001};
    EXPECT_THAT(v1.to_float(), FloatNear(-0.0001, 1.0/65535));
    v1 = {Fixed16::FROM_DOUBLE, 10.9999};
    EXPECT_THAT(v1.to_float(), FloatNear(10.9999, 1.0/65535));
    v1 = {Fixed16::FROM_DOUBLE, 4.4999};
    EXPECT_THAT(v1.to_float(), FloatNear(4.4999, 1.0/65535));
    v1 = {Fixed16::FROM_DOUBLE, -4.4999};
    EXPECT_THAT(v1.to_float(), FloatNear(-4.4999, 1.0/65535));
    v1 = {Fixed16::FROM_DOUBLE, -9.9999};
    EXPECT_THAT(v1.to_float(), FloatNear(-9.9999, 1.0/65535));
}

static constexpr Fixed16 v1 = {Fixed16::FROM_DOUBLE, 3.1415};
static constexpr Fixed16 v2 = {5, 0x8000};
    
TEST(Fixed16Test, Constexpr)
{
    EXPECT_THAT(v1.to_float(), FloatNear(3.1415, 1.0/65535));
    EXPECT_THAT(v2.to_float(), FloatNear(5.5, 1.0/65535));
}

TEST(Fixed16Test, Arithmetics)
{
    Fixed16 v1(13);
    EXPECT_EQ(13, v1.round());

    v1 += 4;
    EXPECT_EQ(17, v1.round());

    v1 -= 2;
    EXPECT_EQ(15, v1.round());

    v1 += Fixed16(0, 0x8000);
    EXPECT_EQ(16, v1.round());
    EXPECT_EQ(15, v1.trunc());

    v1 *= 2;
    EXPECT_EQ(31, v1.round());
    EXPECT_EQ(31, v1.trunc());
    EXPECT_EQ(0, v1.frac());

    v1 /= 2;
    EXPECT_THAT(v1.to_float(), FloatNear(15.5, 1e-3));
    EXPECT_EQ(15, v1.trunc());
    EXPECT_NEAR(0x8000, v1.frac(), 1);

    Fixed16 v2 = 1;
    v2 /= 2;
    v1 += v2;
    EXPECT_EQ(16, v1.round());
    EXPECT_THAT(v1.to_float(), FloatNear(16.0, 1e-5));

    v1 += Fixed16(1) / 2;
    EXPECT_EQ(16, v1.trunc());
    EXPECT_THAT(v1.to_float(), FloatNear(16.5, 1e-5));
}

TEST(Fixed16Test, ArithmeticsNegative)
{
    Fixed16 v1(13);
    v1 += -2;
    EXPECT_EQ(11, v1.round());

    v1 = -15;

    v1 += -2;
    EXPECT_EQ(-17, v1.round());

    v1 -= -2;
    EXPECT_EQ(-15, v1.round());

    v1 += 2;
    EXPECT_EQ(-13, v1.round());

    v1 *= 2;
    EXPECT_EQ(-26, v1.round());
}

TEST(Fixed16Test, TruncNegative)
{
    Fixed16 v1(Fixed16::FROM_DOUBLE, -7.5);
    EXPECT_EQ(-7, v1.trunc());
    EXPECT_EQ(0x8000, v1.frac());

    // Note that the exact half is rounded away from zero.
    EXPECT_EQ(-8, v1.round());

    v1 = {Fixed16::FROM_DOUBLE, 7.5};
    EXPECT_EQ(7, v1.trunc());
    EXPECT_EQ(0x8000, v1.frac());

    // Note that the exact half is rounded away from zero.
    EXPECT_EQ(8, v1.round());
}

TEST(Fixed16Test, Division)
{
    Fixed16 v1(256);
    v1 /= 3579;
    EXPECT_EQ(4687, v1.frac());

    Fixed16 multiplier = 256;
    Fixed16 diff = ((233<<4) - (2<<4));
    multiplier /= diff;
    EXPECT_EQ(4539, multiplier.frac());
    EXPECT_EQ(0, multiplier.trunc());
}

TEST(Fixed16Test, ShiftByDivision)
{
    Fixed16 v1(1);
    v1 /= 4;
    EXPECT_EQ(0, v1.trunc());
    EXPECT_EQ(0x4000, v1.frac());

    v1 = 0x5650;
    v1 /= 16;
    EXPECT_EQ(0x565, v1.trunc());
    EXPECT_EQ(0, v1.frac());

    v1 = 0x569F;
    v1 /= 256;
    EXPECT_EQ(0x56, v1.trunc());
    EXPECT_EQ(0x9F00, v1.frac());

    // Negative bit is also correctly handled.
    v1 = 0x569F;
    v1 /= -256;
    EXPECT_EQ(-0x56, v1.trunc());
    EXPECT_EQ(0x9F00, v1.frac());
}

TEST(Fixed16Test, DivisionPrecision)
{
    Fixed16 v1(31000); // close to largest representable integer
    Fixed16 v2(Fixed16::FROM_DOUBLE, 1.01754);
    EXPECT_EQ(1150, v2.frac());
    v1 /= v2;
    // - True result is 30465.6328
    // - Due to rounding while assigning v2, we are actually dividing
    // by 1.0175476
    // - Precise division result is then 30465.40503
    EXPECT_EQ(30465, v1.trunc());
    EXPECT_EQ((unsigned)(0.40503 * 65536), v1.frac());
    EXPECT_THAT(v1.to_float(), FloatNear(30465.40503, 1e-4));
    EXPECT_THAT(v1.to_float(), FloatNear(31000.0 / 1.0175476, 1e-4));
}

TEST(Fixed16Test, Sign)
{
    Fixed16 v1(13);
    EXPECT_TRUE(v1.is_positive());

    v1 /= -2;
    EXPECT_THAT(v1.to_float(), FloatNear(-6.5, 1e-4));
    EXPECT_FALSE(v1.is_positive());
    
    v1 *= 2;
    EXPECT_THAT(v1.to_float(), FloatNear(-13.0, 1e-4));
    EXPECT_FALSE(v1.is_positive());

    v1 += 15;
    EXPECT_THAT(v1.to_float(), FloatNear(2.0, 1e-4));
    EXPECT_TRUE(v1.is_positive());
    
    v1.negate();
    EXPECT_THAT(v1.to_float(), FloatNear(-2.0, 1e-4));
    EXPECT_FALSE(v1.is_positive());
}

TEST(Fixed16Test, SignedZero)
{
    Fixed16 v1(13);
    EXPECT_TRUE(v1.is_positive());

    v1 -= 13;
    EXPECT_THAT(v1.to_float(), FloatNear(0.0, 1e-10));
    EXPECT_TRUE(v1.is_positive());
    EXPECT_TRUE(std::copysign(1.0, v1.to_float()) > 0);

    v1.negate();
    EXPECT_THAT(v1.to_float(), FloatNear(0.0, 1e-10));
    EXPECT_FALSE(v1.is_positive());
    EXPECT_TRUE(std::copysign(1.0, v1.to_float()) < 0);
    
    EXPECT_EQ(0, v1.trunc());
    v1 -= 1;
    v1 += 1;
    // Adding and subtracting does not preserve the sign.
    EXPECT_TRUE(v1.is_positive());
}

TEST(Fixed16Test, Compare)
{
    // This array is sorted.
    Fixed16 arr[] = {
        {-32767, 0xffff},
        {-32767, 0x8000},
        {-32767, 1},
        {-32767, 0},
        {-32766, 0xffff},
        {-32766, 0x8000},
        {-32766, 1},
        {-32766, 0},
        {-1, 0xffff},
        {-1, 0x8000},
        {-1, 1},
        {-1, 0},
        {0, 0},
        {0, 1},
        {0, 0x8000},
        {0, 0xffff},
        {1, 0},
        {1, 1},
        {1, 0x8000},
        {1, 0xffff},
        {32767, 0},
        {32767, 1},
        {32767, 0x8000},
        {32767, 0xffff}
    }; 

    for (unsigned i = 0; i < ARRAYSIZE(arr); i++) {
        for (unsigned j = 0; j < i; j++) {
            string s = StringPrintf("i [%d] %d:%d k=%08x j [%d] %d:%d k=%08x",
                i, arr[i].trunc(), arr[i].frac(), arr[i].to_key(), j,
                arr[j].trunc(), arr[j].frac(), arr[j].to_key());
            SCOPED_TRACE(s);
            EXPECT_TRUE(arr[j] < arr[i]);
            EXPECT_TRUE(arr[j] <= arr[i]);
            EXPECT_FALSE(arr[j] > arr[i]);
            EXPECT_FALSE(arr[j] >= arr[i]);
            EXPECT_FALSE(arr[i] < arr[j]);
            EXPECT_FALSE(arr[i] <= arr[j]);
            EXPECT_TRUE(arr[i] > arr[j]);
            EXPECT_TRUE(arr[i] >= arr[j]);

            EXPECT_TRUE(arr[i] != arr[j]);
            EXPECT_FALSE(arr[i] == arr[j]);
        }
        EXPECT_FALSE(arr[i] < arr[i]);
        EXPECT_FALSE(arr[i] > arr[i]);
        EXPECT_TRUE(arr[i] <= arr[i]);
        EXPECT_TRUE(arr[i] >= arr[i]);

        EXPECT_TRUE(arr[i] == arr[i]);
        EXPECT_FALSE(arr[i] != arr[i]);
    }
}

/// Helper function to test mulpow2 operation. Computes base mulpow2 shift with
/// fixed16 and with double, and verifies that the results is within the given
/// relative precision form each other.
/// @param base left operand of mulpow2
/// @param shift right operand of mulpow2
/// @param precision relative precisoin of how close the FIxed16 computation
/// should be to the real result. Example 0.01 for 1% precision.
void mulpow2_test(double base, double shift, double precision)
{
    double result = base * pow(2.0, shift);
    string expl = StringPrintf("while computing %lg mulpow2 %lg", base, shift);
    SCOPED_TRACE(expl);
    Fixed16 fbase {Fixed16::FROM_DOUBLE, base};
    Fixed16 fshift {Fixed16::FROM_DOUBLE, shift};
    fbase.mulpow2(fshift);
    EXPECT_NEAR(result, fbase.to_float(), result * precision);
}

TEST(Fixed16Test, MulPow2)
{
    // General case is within 1% precision.
    mulpow2_test(13, 1.385, 0.01);
    mulpow2_test(13, -2.442, 0.01);

    // Integer shifts should work very well.
    mulpow2_test(1, 4, 0.00001);
    mulpow2_test(1.77429, 4, 0.00001);
    mulpow2_test(1, -4, 0.00001);
    mulpow2_test(1.77429, -4, 0.0001);

    // When the fractional part does not have a lot of binary digits, the
    // result should be pretty good too.
    mulpow2_test(30481, -12.5, 0.00001);
    mulpow2_test(4377, 2.375, 0.0001);
}

TEST(Fixed16Test, IntegerDivision)
{
    Fixed16 ohmsMin{505};
    Fixed16 ohmsMax{9495};
    Fixed16 ohmsMid{ohmsMin + ((ohmsMax - ohmsMin) / 2)};
    Fixed16 stepSizeLow{(ohmsMid - ohmsMin) / 127};
    Fixed16 stepSizeHigh{(ohmsMax - ohmsMid) / 127};

    EXPECT_NEAR(35.39, stepSizeLow.to_float(), 0.01);
}
