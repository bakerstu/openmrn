/** \copyright
 * Copyright (c) 2013, Stuart W Baker
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are  permitted provided that the following conditions are met:
 * 
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * \file BufferQueue.cxxtest
 * This file contains a unit test for classes in BufferQueue.hxx and
 * BufferQueue.cxx.
 *
 * @author Stuart W. Baker
 * @date 14 September 2013
 */

#include "gtest/gtest.h"
#include "utils/Buffer.hxx"
#include "utils/Queue.hxx"
#include "utils/test_main.hxx"
#include "executor/StateFlow.hxx"

TEST(QTest, insert_assert_2)
{
    Q q;
    
    struct Item : public QMember
    {
    };
    
    Item qm;
    Item qm2;
    q.insert(&qm);
    q.insert(&qm2);

    EXPECT_DEATH(q.insert(&qm), "next == nullptr");
}

TEST(QTest, insert_assert_1)
{
    Q q;
    
    struct Item : public QMember
    {
    };
    
    Item qm;
    q.insert(&qm);

    EXPECT_DEATH(q.insert(&qm), "item != tail");
}

TEST(QTest, all)
{
    Q q;
    
    struct Item : public QMember
    {
    };
    
    Item qm;
    q.insert(&qm);
    
    EXPECT_TRUE(q.pending(0) == 1);
    EXPECT_FALSE(q.empty(0));
}

TEST(BufferBaseTest, alloc)
{
    struct Item
    {
        uint32_t param1;
        uint16_t param2;
        uint16_t param3;
    };
    
    Buffer<Item> *buffer;
    mainBufferPool->alloc<Item>(&buffer);
    EXPECT_TRUE(buffer->references() == 1);
    EXPECT_TRUE(mainBufferPool->free_items() == 0);
    EXPECT_TRUE(mainBufferPool->free_items(sizeof(Buffer<Item>)) == 0);
    
    buffer->data()->param1 = 4;
    buffer->data()->param2 = 5;
    buffer->data()->param3 = 6;
    
    EXPECT_TRUE(buffer->ref() == buffer);
    EXPECT_TRUE(buffer->references() == 2);
    
    buffer->unref();
    EXPECT_TRUE(mainBufferPool->free_items() == 0);
    EXPECT_TRUE(mainBufferPool->free_items(sizeof(Buffer<Item>)) == 0);
    EXPECT_TRUE(buffer->references() == 1);
    buffer->unref();
    EXPECT_TRUE(mainBufferPool->free_items() == 1);
    EXPECT_TRUE(mainBufferPool->free_items(sizeof(Buffer<Item>)) == 1);
    EXPECT_TRUE(mainBufferPool->free_items(sizeof(Buffer<Item>) * 2) == 0);
}

class MockExecutable : public Executable
{
public:
    MOCK_METHOD0(run, void());
    
    MOCK_METHOD1(alloc_result, void(QMember *));
};

TEST(BufferBaseTest, alloc_async)
{
    struct Item
    {
        uint32_t param1;
        uint16_t param2;
        uint16_t param3;
    };
    
    class TrivialFlow : public StateFlowBase
    {
    public:
        TrivialFlow(Service *s)
            : StateFlowBase(s)
        {}
    };
    
    Service service(&g_executor);
    TrivialFlow flow(&service);
    
    mainBufferPool->alloc_async<Item>(&flow);
    wait_for_main_executor();
}

#if 0
///@TODO(stbaker): why is this disabled?
ACTION(unref_buffer)
{
    arg0->unref();
}
    
TEST(BufferBase, alloc_async_mock)
{
    struct Item
    {
        uint32_t param1;
        uint16_t param2;
        uint16_t param3;
    };
    
    testing::StrictMock<MockExecutable> h;
    
    EXPECT_CALL(h, alloc_result(testing::_))
        .WillOnce(testing::WithArg<0>(unref_buffer));

    mainBufferPool->alloc_async<Item>(&h);
}
#endif

DynamicPool *unalignedBufferPool = new DynamicPool(Bucket::init(5, 9, 0));

TEST(BufferBase, alloc_unaligned)
{
    struct Item
    {
        uint32_t param1;
        uint16_t param2;
        uint16_t param3;
    };
    
    Buffer<Item> *buffer;
    unalignedBufferPool->alloc<Item>(&buffer);
    EXPECT_TRUE(buffer->references() == 1);
    buffer->unref();
}

TEST(QList, all)
{
    struct Item : public QMember
    {
    };
    
    QList<3> q;
    Item a;
    Item b;
    Item c;
    Item d;
    
    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.next(2) == &a);
    EXPECT_TRUE(q.next(1) == &b);
    EXPECT_TRUE(q.next(0) == &c);
    EXPECT_TRUE(q.next(0) == &d);

    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.pending() == 4);
    EXPECT_TRUE(q.pending(2) == 1);
    EXPECT_TRUE(q.pending(1) == 1);
    EXPECT_TRUE(q.pending(0) == 2);
    EXPECT_FALSE(q.empty());
    EXPECT_FALSE(q.empty(2));
    EXPECT_FALSE(q.empty(1));
    EXPECT_FALSE(q.empty(0));
    
    QList<3>::Result result;
    result = q.next();
    EXPECT_TRUE(result.item == &c);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &d);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &b);
    EXPECT_TRUE(result.index == 1);
    result = q.next();
    EXPECT_TRUE(result.item == &a);
    EXPECT_TRUE(result.index == 2);

    EXPECT_TRUE(q.empty());
    EXPECT_TRUE(q.empty(2));
    EXPECT_TRUE(q.empty(1));
    EXPECT_TRUE(q.empty(0));

    result = q.next();
    EXPECT_TRUE(result.item == NULL);
}

TEST(QPriorityTest, all)
{
    struct Item : public QMember
    {
    };
    
    QList<5> q;
    Item a;
    Item b;
    Item c;
    Item d;
    
    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 1);
    q.insert(&d, 6);
    
    EXPECT_TRUE(q.next().item == &b);
    EXPECT_TRUE(q.next().item == &c);
    EXPECT_TRUE(q.next().item == &a);
    EXPECT_TRUE(q.next().item == &d);
    EXPECT_TRUE(q.next().item == NULL);

    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.next(2) == &a);
    EXPECT_TRUE(q.next(1) == &b);
    EXPECT_TRUE(q.next(0) == &c);
    EXPECT_TRUE(q.next(0) == &d);
    EXPECT_TRUE(q.next(0) == NULL);

    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.pending() == 4);
    EXPECT_TRUE(q.pending(2) == 1);
    EXPECT_TRUE(q.pending(1) == 1);
    EXPECT_TRUE(q.pending(0) == 2);
    EXPECT_FALSE(q.empty());
    EXPECT_FALSE(q.empty(2));
    EXPECT_FALSE(q.empty(1));
    EXPECT_FALSE(q.empty(0));
    
    auto result = q.next();
    EXPECT_TRUE(result.item == &c);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &d);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &b);
    EXPECT_TRUE(result.index == 1);
    result = q.next();
    EXPECT_TRUE(result.item == &a);
    EXPECT_TRUE(result.index == 2);

    EXPECT_TRUE(q.empty());
    EXPECT_TRUE(q.empty(2));
    EXPECT_TRUE(q.empty(1));
    EXPECT_TRUE(q.empty(0));

    result = q.next();
    EXPECT_TRUE(result.item == NULL);
}

TEST(QAsync, all)
{
    struct Item : public QMember
    {
    };
    
    QAsync q;
    Item a;
    Item b;
    Item c;
    Item d;
    
    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.next(2) == &a);
    EXPECT_TRUE(q.next(1) == &b);
    EXPECT_TRUE(q.next(0) == &c);
    EXPECT_TRUE(q.next(0) == &d);

    EXPECT_TRUE(q.empty());
    EXPECT_TRUE(q.empty(2));
    EXPECT_TRUE(q.empty(1));
    EXPECT_TRUE(q.empty(0));
    
    EXPECT_TRUE(q.pending(0) == 0);

    auto result = q.next();
    EXPECT_TRUE(result.item == NULL);


    class TrivialFlow : public StateFlowBase
    {
    public:
        TrivialFlow(Service *s)
            : StateFlowBase(s)
        {}
        
        
    };
    
    Service service(&g_executor);
    TrivialFlow flow(&service);
    TrivialFlow flow2(&service);
    
    q.next_async(&flow);
    EXPECT_TRUE(q.pending() == 0);
    EXPECT_TRUE(q.next().item == NULL);
    EXPECT_TRUE(q.empty());

    q.next_async(&flow2);
    EXPECT_TRUE(q.pending() == 0);
    EXPECT_TRUE(q.next().item == NULL);
    EXPECT_TRUE(q.empty());

    wait_for_main_executor();

    q.insert(&a, 2);
    wait_for_main_executor();
    q.insert(&b, 1);

    EXPECT_TRUE(q.empty());
    q.insert(&b, 1);
    EXPECT_TRUE(q.pending() == 1);
    q.next_async(&flow);
    EXPECT_TRUE(q.empty());

    wait_for_main_executor();
}

TEST(QListProtected, all)
{
    struct Item : public QMember
    {
    };
    
    QListProtected<3> q;
    Item a;
    Item b;
    Item c;
    Item d;
    
    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.next(2) == &a);
    EXPECT_TRUE(q.next(1) == &b);
    EXPECT_TRUE(q.next(0) == &c);
    EXPECT_TRUE(q.next(0) == &d);

    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.pending() == 4);
    EXPECT_TRUE(q.pending(2) == 1);
    EXPECT_TRUE(q.pending(1) == 1);
    EXPECT_TRUE(q.pending(0) == 2);
    EXPECT_FALSE(q.empty());
    EXPECT_FALSE(q.empty(2));
    EXPECT_FALSE(q.empty(1));
    EXPECT_FALSE(q.empty(0));
    
    QList<3>::Result result;
    result = q.next();
    EXPECT_TRUE(result.item == &c);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &d);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &b);
    EXPECT_TRUE(result.index == 1);
    result = q.next();
    EXPECT_TRUE(result.item == &a);
    EXPECT_TRUE(result.index == 2);

    EXPECT_TRUE(q.empty());
    EXPECT_TRUE(q.empty(2));
    EXPECT_TRUE(q.empty(1));
    EXPECT_TRUE(q.empty(0));

    result = q.next();
    EXPECT_TRUE(result.item == NULL);
}

struct Item : public QMember
{
};

Item global;

void *QListProtectedWait_thread(void *arg)
{
    QListProtectedWait<3>* q = static_cast<QListProtectedWait<3>*>(arg);
    
    q->insert(&global, 0);
    return NULL;
}

void *QListProtectedWait_signal_thread(void *arg)
{
    QListProtectedWait<3>* q = static_cast<QListProtectedWait<3>*>(arg);
    
    q->wakeup();
    return NULL;
}

void *QListProtectedWait_thread_timed(void *arg)
{
    QListProtectedWait<3>* q = static_cast<QListProtectedWait<3>*>(arg);
    
    q->insert(&global, 0);
    return NULL;
}

void *QListProtectedWait_signal_thread_timed(void *arg)
{
    QListProtectedWait<3>* q = static_cast<QListProtectedWait<3>*>(arg);
    
    q->wakeup();
    return NULL;
}

TEST(QListProtectedWait, all)
{
    QListProtectedWait<3> q;
    Item a;
    Item b;
    Item c;
    Item d;

    q.insert(&a, 2);
    q.insert(&b, 1);
    q.insert(&c, 0);
    q.insert(&d, 0);
    
    EXPECT_TRUE(q.pending() == 4);
    EXPECT_TRUE(q.pending(2) == 1);
    EXPECT_TRUE(q.pending(1) == 1);
    EXPECT_TRUE(q.pending(0) == 2);
    EXPECT_FALSE(q.empty());
    EXPECT_FALSE(q.empty(2));
    EXPECT_FALSE(q.empty(1));
    EXPECT_FALSE(q.empty(0));
    
    QList<3>::Result result;
    result = q.next();
    EXPECT_TRUE(result.item == &c);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &d);
    EXPECT_TRUE(result.index == 0);
    result = q.next();
    EXPECT_TRUE(result.item == &b);
    EXPECT_TRUE(result.index == 1);
    result = q.next();
    EXPECT_TRUE(result.item == &a);
    EXPECT_TRUE(result.index == 2);

    EXPECT_TRUE(q.empty());
    EXPECT_TRUE(q.empty(2));
    EXPECT_TRUE(q.empty(1));
    EXPECT_TRUE(q.empty(0));

    result = q.next();
    EXPECT_TRUE(result.item == NULL);

    new ExecuteOnMainExecutor(QListProtectedWait_thread, &q);
    result = q.wait();
    EXPECT_TRUE(result.item == &global);
    EXPECT_TRUE(result.index == 0);

    new ExecuteOnMainExecutor(QListProtectedWait_signal_thread, &q);
    result = q.wait();
    EXPECT_TRUE(result.item == NULL);
    EXPECT_TRUE(errno == EINTR);

    new ExecuteOnMainExecutor(QListProtectedWait_thread_timed, &q);
    result = q.timedwait(500000000);
    EXPECT_TRUE(result.item == &global);
    EXPECT_TRUE(result.index == 0);

    new ExecuteOnMainExecutor(QListProtectedWait_signal_thread_timed, &q);
    result = q.timedwait(500000000);
    EXPECT_TRUE(result.item == NULL);
    EXPECT_TRUE(errno == EINTR);

    result = q.timedwait(500000000);
    EXPECT_TRUE(result.item == NULL);
    EXPECT_TRUE(errno == ETIMEDOUT);
}

TEST(FixedPoolTest, all)
{
    class Item
    {
    public:
        Item()
        {
        }
        
        uint32_t data;
    };

    FixedPool pool(sizeof(Buffer<Item>), 4);
    
    EXPECT_TRUE(pool.free_items(sizeof(Buffer<Item>)) == 4);
    EXPECT_TRUE(pool.free_items(sizeof(Buffer<Item>) + 1) == 0);
    
    Buffer<Item> *buffer;
    Buffer<Item> *buffer_alt;
    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(pool.free_items() == 3);
    EXPECT_TRUE(buffer);
    EXPECT_TRUE(pool.valid(buffer));

    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(pool.free_items() == 2);
    EXPECT_TRUE(pool.valid(buffer));

    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(pool.free_items() == 1);
    EXPECT_TRUE(pool.valid(buffer));

    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(pool.free_items() == 0);
    EXPECT_TRUE(pool.valid(buffer));
    buffer_alt = buffer;
    
    /* put us past the end of the pool */
    ++buffer;
    EXPECT_FALSE(pool.valid(buffer));

    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(buffer == NULL);
    EXPECT_FALSE(pool.valid(buffer));
    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(buffer == NULL);
    EXPECT_FALSE(pool.valid(buffer));
    
    buffer_alt->unref();
    EXPECT_TRUE(pool.free_items() == 1);
    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(pool.free_items() == 0);
    EXPECT_TRUE(pool.valid(buffer));
}

TEST(FixedPoolTest, alloc_async)
{
    class Item
    {
    public:
        Item()
        {
        }
        
        uint32_t data;
    };

    FixedPool pool(sizeof(Buffer<Item>), 4);
    
    class TrivialFlow : public StateFlowBase
    {
    public:
        TrivialFlow(Service *s)
            : StateFlowBase(s)
        {}
        
        
    };
    
    Service service(&g_executor);
    TrivialFlow flow(&service);
    
    pool.alloc_async<Item>(&flow);
    wait_for_main_executor();
}

TEST(FixedPoolTest, alloc_async_wait)
{
    class Item
    {
    public:
        Item()
        {
        }
        
        uint32_t data;
    };

    FixedPool pool(sizeof(Buffer<Item>), 1);
    
    class TrivialFlow : public StateFlowBase
    {
    public:
        TrivialFlow(Service *s)
            : StateFlowBase(s)
        {}
        
        
    };
    
    Service service(&g_executor);
    TrivialFlow flow(&service);
    Buffer<Item> *buffer;
    
    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(buffer);
    buffer->unref();
    pool.alloc<Item>(&buffer);
    EXPECT_TRUE(buffer);
    
    pool.alloc_async<Item>(&flow);
    buffer->unref();
    wait_for_main_executor();
}
