#include "utils/test_main.hxx"

#include "traction_modem/MemorySpace.hxx"

#include "os/FakeClock.hxx"

namespace traction_modem
{

//
// Mock objects.
//
class MockRxFlow : public RxFlowInterface
{
public:
    MOCK_METHOD1(start, void(int));
    MOCK_METHOD3(register_handler,
        void(PacketFlowInterface*, Message::id_type, Message::id_type));
    MOCK_METHOD3(unregister_handler,
        void(PacketFlowInterface*, Message::id_type, Message::id_type));
};

class MockTxFlow : public TxFlowInterface
{
public:
    MOCK_METHOD1(start, void(int));
    MOCK_METHOD1(send_packet, void(Defs::Payload));
};

/// Test object for memory spaces.
class MemorySpaceTest : public ::testing::Test
{
protected:
    /// Constructor.
    MemorySpaceTest()
    {
        reset_data();
    }

    /// Destructor.
    ~MemorySpaceTest()
    {
    }

    /// Reset the data to known values.
    void reset_data()
    {
        for (unsigned i = 0; i < sizeof(data_); ++i)
        {
            data_[i] = 0x10 + i;
        }
    }

    /// Clear the data to all zero.
    void clear_data()
    {
        memset(data_, 0, sizeof(data_));
    }

    ::testing::StrictMock<MockRxFlow> mRxFlow_; ///< mock receive flow
    ::testing::StrictMock<MockTxFlow> mTxFlow_; ///< mock transmit flow
    uint8_t data_[8]; ///< test data
    static const uint8_t expectData_[8]; ///< expected test data.
    DispatchFlow<Buffer<Message>, 2> dispatcher_{&g_service}; ///< dispatcher
};

const uint8_t MemorySpaceTest::expectData_[8] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

static const MemorySpace::errorcode_t ERROR_AGAIN =
    openlcb::MemorySpace::ERROR_AGAIN;

TEST_F(MemorySpaceTest, Create)
{
    CvSpace cs(&g_service, &mTxFlow_, &mRxFlow_);
    FirmwareSpace fs(&g_service, &mTxFlow_, &mRxFlow_);

    EXPECT_FALSE(static_cast<openlcb::MemorySpace*>(&cs)->read_only());
    EXPECT_FALSE(static_cast<openlcb::MemorySpace*>(&fs)->read_only());

    EXPECT_EQ(1023U, static_cast<openlcb::MemorySpace*>(&cs)->max_address());
    EXPECT_EQ(
        UINT32_MAX, static_cast<openlcb::MemorySpace*>(&fs)->max_address());
}

TEST_F(MemorySpaceTest, CvRead)
{
    using ::testing::StartsWith;
    using namespace std::literals;

    CvSpace cs(&g_service, &mTxFlow_, &mRxFlow_);
    MemorySpace::errorcode_t error;
    SyncNotifiable done;
    FakeClock clock;

    //
    // Read with timeout.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_,
        unregister_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK))
        .Times(1);
    EXPECT_CALL(mRxFlow_,
        unregister_handler(&cs, Defs::RESP_MEM_W, Message::EXACT_MASK))
        .Times(1);
    clock.advance(MSEC_TO_NSEC(3200));
    done.wait_for_notification();
    EXPECT_EQ(0, memcmp(data_, expectData_, sizeof(data_)));
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::Defs::ERROR_OPENLCB_TIMEOUT, error);
    


    //
    // Read success.
    //
    clear_data();
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_,
        unregister_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK))
        .Times(1);
    dispatcher_.register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK);
    {
        auto *b = dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_R, 2 + 8);
        Defs::append_uint16(&b->data()->payload, openlcb::Defs::ERROR_CODE_OK);
        for (unsigned i = 0; i <sizeof(expectData_); ++i)
        {
            Defs::append_uint8(&b->data()->payload, expectData_[i]);
        }
        Defs::append_crc(&b->data()->payload);
        dispatcher_.send(b);
    }

    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(8U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(0, memcmp(data_, expectData_, sizeof(data_)));
    EXPECT_EQ(openlcb::Defs::ERROR_CODE_OK, error);
    
}

} // traction_modem