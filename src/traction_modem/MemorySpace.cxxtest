#include "utils/test_main.hxx"

#include "traction_modem/modem_test_helper.hxx"

#include "traction_modem/MemorySpace.hxx"

namespace traction_modem
{

/// Test object for memory spaces.
class MemorySpaceTest : public LinkTestBase
{
protected:
    /// Constructor.
    MemorySpaceTest()
        : LinkTestBase()
    {
        reset_data();
    }

    /// Destructor.
    ~MemorySpaceTest()
    {
    }

    /// Reset the data to known values.
    void reset_data()
    {
        for (unsigned i = 0; i < sizeof(dataLong_); ++i)
        {
            dataLong_[i] = 0x10 + i;
        }
    }

    /// Clear the data to all zero.
    void clear_data()
    {
        memset(dataLong_, 0, sizeof(dataLong_));
    }

    union
    {
        uint8_t data_[8]; ///< test data
        uint8_t dataLong_[8 + Defs::MAX_READ_DATA_LEN]; ///< test data long
    };
    static const uint8_t expectData_[8]; ///< expected test data.
};

const uint8_t MemorySpaceTest::expectData_[8] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

static const MemorySpace::errorcode_t ERROR_AGAIN =
    openlcb::MemorySpace::ERROR_AGAIN;

TEST_F(MemorySpaceTest, Create)
{
    CvSpace cs(&g_service, &link_);
    FirmwareSpace fs(&g_service, &link_);

    EXPECT_FALSE(static_cast<openlcb::MemorySpace*>(&cs)->read_only());
    EXPECT_FALSE(static_cast<openlcb::MemorySpace*>(&fs)->read_only());

    EXPECT_EQ((0x1U << 24) - 1,
        static_cast<openlcb::MemorySpace*>(&cs)->max_address());
    EXPECT_EQ(
        UINT32_MAX, static_cast<openlcb::MemorySpace*>(&fs)->max_address());
    do_link_up();
}

TEST_F(MemorySpaceTest, CvRead)
{
    using ::testing::StartsWith;
    using namespace std::literals;

    CvSpace cs(&g_service, &link_);
    MemorySpace::errorcode_t error;
    SyncNotifiable done;

    //
    // Read fail out of bounds.
    //
    error = 0;
    EXPECT_EQ(0U, cs.read((0x1 << 24), data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS, error);



    //
    // Read link down.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(0);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(0);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::Defs::ERROR_TEMPORARY, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);



    // Bring link up.
    do_link_up();



    //
    // Read link up with timeout.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    clk_advance(MSEC_TO_NSEC(3200));
    done.wait_for_notification();
    EXPECT_EQ(0, memcmp(data_, expectData_, sizeof(data_)));
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::Defs::ERROR_OPENLCB_TIMEOUT, error);

    

    //
    // Read unsupported space.
    //
    clear_data();
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_R, 2);
        Defs::append_uint16(&b->data()->payload,
            openlcb::MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_NE(0, memcmp(data_, expectData_, sizeof(data_)));
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN, error);



    //
    // Read link up success.
    //
    clear_data();
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_R, 2 + 8);
        Defs::append_uint16(&b->data()->payload, openlcb::Defs::ERROR_CODE_OK);
        for (unsigned i = 0; i < sizeof(expectData_); ++i)
        {
            Defs::append_uint8(&b->data()->payload, expectData_[i]);
        }
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(8U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(0, memcmp(data_, expectData_, sizeof(data_)));
    EXPECT_EQ(openlcb::Defs::ERROR_CODE_OK, error);



    //
    // Read link up success long data.
    //
    clear_data();
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x00"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, dataLong_, sizeof(dataLong_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_R, 2 + 256);
        Defs::append_uint16(&b->data()->payload, openlcb::Defs::ERROR_CODE_OK);
        for (unsigned i = 0; i < sizeof(expectData_); ++i)
        {
            Defs::append_uint8(&b->data()->payload, expectData_[i]);
        }
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(256U, cs.read(0, dataLong_, sizeof(dataLong_), &error, &done));
    EXPECT_EQ(0, memcmp(data_, expectData_, sizeof(data_)));
    EXPECT_EQ(openlcb::Defs::ERROR_CODE_OK, error);
    


    //
    // Read success, but with less than asked for data.
    //
    clear_data();
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_R, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x00\x00\x06\x00\x00\x00\x00\xF8\x08"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_R, 2 + 6);
        Defs::append_uint16(&b->data()->payload,
            openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS);
        for (unsigned i = 0; i < 6; ++i)
        {
            Defs::append_uint8(&b->data()->payload, expectData_[i]);
        }
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(6U, cs.read(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(0, memcmp(data_, expectData_, 6));
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS, error);
}

TEST_F(MemorySpaceTest, CvWrite)
{
    using ::testing::StartsWith;
    using namespace std::literals;

    CvSpace cs(&g_service, &link_);
    MemorySpace::errorcode_t error;
    SyncNotifiable done;

    //
    // Write fail out of bounds.
    //
    error = 0;
    EXPECT_EQ(0U, cs.write((0x1 << 24), data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS, error);



    //
    // Write link down.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_W, Message::EXACT_MASK)).Times(0);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x01\x00\x0D\x00\x00\x00\x00\xF8"s +
            "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
        .Times(0);
    error = 0;
    EXPECT_EQ(0U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::Defs::ERROR_TEMPORARY, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);



    // Bring link up.
    do_link_up();



    //
    // Write unsupported space.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_W, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x01\x00\x0D\x00\x00\x00\x00\xF8"s +
            "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_W, 4);
        Defs::append_uint16(&b->data()->payload,
            openlcb::MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN);
        Defs::append_uint16(&b->data()->payload, 0);
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(0U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN, error);



    //
    // Write success.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_W, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x01\x00\x0D\x00\x00\x00\x00\xF8"s +
            "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_W, 4);
        Defs::append_uint16(&b->data()->payload, openlcb::Defs::ERROR_CODE_OK);
        Defs::append_uint16(&b->data()->payload, 8);
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(8U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::Defs::ERROR_CODE_OK, error);
    


    //
    // Write success long data.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_W, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x01\x01\x05\x00\x00\x00\x00\xF8"s +
            "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.write(0, dataLong_, sizeof(dataLong_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_W, 4);
        Defs::append_uint16(&b->data()->payload, openlcb::Defs::ERROR_CODE_OK);
        Defs::append_uint16(&b->data()->payload, 256);
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(256U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::Defs::ERROR_CODE_OK, error);



    //
    // Write success, but with less than asked for data.
    //
    EXPECT_CALL(mRxFlow_,
        register_handler(&cs, Defs::RESP_MEM_W, Message::EXACT_MASK)).Times(1);
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith(
            "\x41\xd2\xc3\x7a\x10\x01\x00\x0D\x00\x00\x00\x00\xF8"s +
            "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
        .Times(1);
    error = 0;
    EXPECT_EQ(0U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(ERROR_AGAIN, error);
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mRxFlow_, unregister_handler_all(&cs)).Times(1);
    {
        auto *b = mRxFlow_.dispatcher_.alloc();
        Defs::prepare(&b->data()->payload, Defs::RESP_MEM_W, 4);
        Defs::append_uint16(&b->data()->payload,
            openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS);
        Defs::append_uint16(&b->data()->payload, 6);
        Defs::append_crc(&b->data()->payload);
        mRxFlow_.dispatcher_.send(b);
    }
    wait_for_main_executor();
    done.wait_for_notification();
    testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

    error = 0;
    EXPECT_EQ(6U, cs.write(0, data_, sizeof(data_), &error, &done));
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS, error);
}

TEST_F(MemorySpaceTest, FirmwareFreezeUnfreeze)
{
    using ::testing::StartsWith;
    using namespace std::literals;

    FirmwareSpace fs(&g_service, &link_);
    openlcb::MemorySpace *ms = static_cast<openlcb::MemorySpace *>(&fs);
    MemorySpace::errorcode_t error;
    SyncNotifiable done;

    do_link_up();

    //
    // Sunny day case.
    //
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith("\x41\xd2\xc3\x7a\x00\x02\x00\x01\x00"s))).Times(1);
    EXPECT_EQ(openlcb::Defs::ErrorCodes::ERROR_CODE_OK, ms->freeze());
    wait_for_main_executor();
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith("\x41\xd2\xc3\x7a\x00\x02\x00\x01\x02"s))).Times(1);
    EXPECT_EQ(openlcb::Defs::ErrorCodes::ERROR_CODE_OK, ms->unfreeze());
    wait_for_main_executor();
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);



    //
    // Some kind of error occurs in the write.
    //
    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith("\x41\xd2\xc3\x7a\x00\x02\x00\x01\x00"s))).Times(1);
    EXPECT_EQ(openlcb::Defs::ErrorCodes::ERROR_CODE_OK, ms->freeze());
    wait_for_main_executor();
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

    // Do the writes that return errors.
    {
        //
        // Write success, but with less than asked for data.
        //
        EXPECT_CALL(mRxFlow_,
            register_handler(&fs, Defs::RESP_MEM_W, Message::EXACT_MASK))
            .Times(1);
        EXPECT_CALL(mTxFlow_, send_packet(
            StartsWith(
                "\x41\xd2\xc3\x7a\x10\x01\x00\x0D\x00\x00\x00\x00\xEF"s +
                "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
            .Times(1);
        error = 0;
        EXPECT_EQ(0U, fs.write(0, data_, sizeof(data_), &error, &done));
        EXPECT_EQ(ERROR_AGAIN, error);
        testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
        testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

        EXPECT_CALL(mRxFlow_, unregister_handler_all(&fs)).Times(1);
        {
            auto *b = mRxFlow_.dispatcher_.alloc();
            Defs::prepare(&b->data()->payload, Defs::RESP_MEM_W, 4);
            Defs::append_uint16(&b->data()->payload,
                openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS);
            Defs::append_uint16(&b->data()->payload, 6);
            Defs::append_crc(&b->data()->payload);
            mRxFlow_.dispatcher_.send(b);
        }
        wait_for_main_executor();
        done.wait_for_notification();
        testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

        error = 0;
        EXPECT_EQ(6U, fs.write(0, data_, sizeof(data_), &error, &done));
        EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS, error);

        //
        // Write unsupported space.
        //
        EXPECT_CALL(mRxFlow_,
            register_handler(&fs, Defs::RESP_MEM_W, Message::EXACT_MASK)).Times(1);
        EXPECT_CALL(mTxFlow_, send_packet(
            StartsWith(
                "\x41\xd2\xc3\x7a\x10\x01\x00\x0D\x00\x00\x00\x00\xEF"s +
                "\x10\x11\x12\x13\x14\x15\x16\x17"s)))
            .Times(1);
        error = 0;
        EXPECT_EQ(0U, fs.write(0, data_, sizeof(data_), &error, &done));
        EXPECT_EQ(ERROR_AGAIN, error);
        testing::Mock::VerifyAndClearExpectations(&mRxFlow_);
        testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

        EXPECT_CALL(mRxFlow_, unregister_handler_all(&fs)).Times(1);
        {
            auto *b = mRxFlow_.dispatcher_.alloc();
            Defs::prepare(&b->data()->payload, Defs::RESP_MEM_W, 4);
            Defs::append_uint16(&b->data()->payload,
                openlcb::MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN);
            Defs::append_uint16(&b->data()->payload, 0);
            Defs::append_crc(&b->data()->payload);
            mRxFlow_.dispatcher_.send(b);
        }
        wait_for_main_executor();
        done.wait_for_notification();
        testing::Mock::VerifyAndClearExpectations(&mRxFlow_);

        error = 0;
        EXPECT_EQ(0U, fs.write(0, data_, sizeof(data_), &error, &done));
        EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_SPACE_NOT_KNOWN, error);
    }

    EXPECT_CALL(mTxFlow_, send_packet(
        StartsWith("\x41\xd2\xc3\x7a\x00\x02\x00\x01\x02"s))).Times(1);
    // Make sure we are only capturing the first error code.
    EXPECT_EQ(openlcb::MemoryConfigDefs::ERROR_OUT_OF_BOUNDS, ms->unfreeze());
    wait_for_main_executor();
    testing::Mock::VerifyAndClearExpectations(&mTxFlow_);

}

} // traction_modem